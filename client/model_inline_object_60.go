/*
 * Ansible Tower API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version:
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

// InlineObject60 struct for InlineObject60
type InlineObject60 struct {
	// Enable capturing activity for the activity stream.
	ACTIVITY_STREAM_ENABLED bool `json:"ACTIVITY_STREAM_ENABLED"`
	// Enable capturing activity for the activity stream when running inventory sync.
	ACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC bool `json:"ACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC"`
	// List of modules allowed to be used by ad-hoc jobs.
	AD_HOC_COMMANDS []string `json:"AD_HOC_COMMANDS,omitempty"`
	// Ansible allows variable substitution via the Jinja2 templating language for --extra-vars. This poses a potential security risk where Tower users with the ability to specify extra vars at job launch time can use Jinja2 templates to run arbitrary Python.  It is recommended that this value be set to \"template\" or \"never\".
	ALLOW_JINJA_IN_EXTRA_VARS string `json:"ALLOW_JINJA_IN_EXTRA_VARS"`
	// For security reasons, users from external auth providers (LDAP, SAML, SSO, Radius, and others) are not allowed to create OAuth2 tokens. To change this behavior, enable this setting. Existing tokens will not be deleted when this setting is toggled off.
	ALLOWOAUTH2FOREXTERNALUSERS bool `json:"ALLOW_OAUTH2_FOR_EXTERNAL_USERS,omitempty"`
	// Maximum time, in seconds, that stored Ansible facts are considered valid since the last time they were modified. Only valid, non-stale, facts will be accessible by a playbook. Note, this does not influence the deletion of ansible_facts from the database. Use a value of 0 to indicate that no timeout should be imposed.
	ANSIBLE_FACT_CACHE_TIMEOUT int32 `json:"ANSIBLE_FACT_CACHE_TIMEOUT,omitempty"`
	// Enable HTTP Basic Auth for the API Browser.
	AUTH_BASIC_ENABLED bool `json:"AUTH_BASIC_ENABLED"`
	// DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the Ansible Tower documentation for example syntax.
	AUTHLDAP1BINDDN string `json:"AUTH_LDAP_1_BIND_DN,omitempty"`
	// Password used to bind LDAP user account.
	AUTHLDAP1BINDPASSWORD string `json:"AUTH_LDAP_1_BIND_PASSWORD,omitempty"`
	// Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. \"OPT_REFERRALS\"). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set.
	AUTHLDAP1CONNECTIONOPTIONS map[string]interface{} `json:"AUTH_LDAP_1_CONNECTION_OPTIONS,omitempty"`
	// Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported.
	AUTHLDAP1DENYGROUP string `json:"AUTH_LDAP_1_DENY_GROUP,omitempty"`
	// Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion.
	AUTHLDAP1GROUPSEARCH []string `json:"AUTH_LDAP_1_GROUP_SEARCH,omitempty"`
	// The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups
	AUTHLDAP1GROUPTYPE string `json:"AUTH_LDAP_1_GROUP_TYPE,omitempty"`
	// Key value parameters to send the chosen group type init method.
	AUTHLDAP1GROUPTYPEPARAMS map[string]interface{} `json:"AUTH_LDAP_1_GROUP_TYPE_PARAMS,omitempty"`
	// Mapping between organization admins/users and LDAP groups. This controls which users are placed into which Tower organizations relative to their LDAP group memberships. Configuration details are available in the Ansible Tower documentation.
	AUTHLDAP1ORGANIZATIONMAP map[string]interface{} `json:"AUTH_LDAP_1_ORGANIZATION_MAP,omitempty"`
	// Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login via Tower. Only one require group is supported.
	AUTHLDAP1REQUIREGROUP string `json:"AUTH_LDAP_1_REQUIRE_GROUP,omitempty"`
	// URI to connect to LDAP server, such as \"ldap://ldap.example.com:389\" (non-SSL) or \"ldaps://ldap.example.com:636\" (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty.
	AUTHLDAP1SERVERURI string `json:"AUTH_LDAP_1_SERVER_URI,omitempty"`
	// Whether to enable TLS when the LDAP connection is not using SSL.
	AUTHLDAP1STARTTLS bool `json:"AUTH_LDAP_1_START_TLS,omitempty"`
	// Mapping between team members (users) and LDAP groups. Configuration details are available in the Ansible Tower documentation.
	AUTHLDAP1TEAMMAP map[string]interface{} `json:"AUTH_LDAP_1_TEAM_MAP,omitempty"`
	// Mapping of LDAP user schema to Tower API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the Ansible Tower documentation for additional details.
	AUTHLDAP1USERATTRMAP map[string]interface{} `json:"AUTH_LDAP_1_USER_ATTR_MAP,omitempty"`
	// Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH.
	AUTHLDAP1USERDNTEMPLATE string `json:"AUTH_LDAP_1_USER_DN_TEMPLATE,omitempty"`
	// Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the Ansible Tower documentation for more detail.
	AUTHLDAP1USERFLAGSBYGROUP map[string]interface{} `json:"AUTH_LDAP_1_USER_FLAGS_BY_GROUP,omitempty"`
	// LDAP search query to find users.  Any user that matches the given pattern will be able to login to Tower.  The user should also be mapped into a Tower organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of \"LDAPUnion\" is possible. See Tower documentation for details.
	AUTHLDAP1USERSEARCH []string `json:"AUTH_LDAP_1_USER_SEARCH,omitempty"`
	// DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the Ansible Tower documentation for example syntax.
	AUTHLDAP2BINDDN string `json:"AUTH_LDAP_2_BIND_DN,omitempty"`
	// Password used to bind LDAP user account.
	AUTHLDAP2BINDPASSWORD string `json:"AUTH_LDAP_2_BIND_PASSWORD,omitempty"`
	// Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. \"OPT_REFERRALS\"). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set.
	AUTHLDAP2CONNECTIONOPTIONS map[string]interface{} `json:"AUTH_LDAP_2_CONNECTION_OPTIONS,omitempty"`
	// Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported.
	AUTHLDAP2DENYGROUP string `json:"AUTH_LDAP_2_DENY_GROUP,omitempty"`
	// Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion.
	AUTHLDAP2GROUPSEARCH []string `json:"AUTH_LDAP_2_GROUP_SEARCH,omitempty"`
	// The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups
	AUTHLDAP2GROUPTYPE string `json:"AUTH_LDAP_2_GROUP_TYPE,omitempty"`
	// Key value parameters to send the chosen group type init method.
	AUTHLDAP2GROUPTYPEPARAMS map[string]interface{} `json:"AUTH_LDAP_2_GROUP_TYPE_PARAMS,omitempty"`
	// Mapping between organization admins/users and LDAP groups. This controls which users are placed into which Tower organizations relative to their LDAP group memberships. Configuration details are available in the Ansible Tower documentation.
	AUTHLDAP2ORGANIZATIONMAP map[string]interface{} `json:"AUTH_LDAP_2_ORGANIZATION_MAP,omitempty"`
	// Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login via Tower. Only one require group is supported.
	AUTHLDAP2REQUIREGROUP string `json:"AUTH_LDAP_2_REQUIRE_GROUP,omitempty"`
	// URI to connect to LDAP server, such as \"ldap://ldap.example.com:389\" (non-SSL) or \"ldaps://ldap.example.com:636\" (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty.
	AUTHLDAP2SERVERURI string `json:"AUTH_LDAP_2_SERVER_URI,omitempty"`
	// Whether to enable TLS when the LDAP connection is not using SSL.
	AUTHLDAP2STARTTLS bool `json:"AUTH_LDAP_2_START_TLS,omitempty"`
	// Mapping between team members (users) and LDAP groups. Configuration details are available in the Ansible Tower documentation.
	AUTHLDAP2TEAMMAP map[string]interface{} `json:"AUTH_LDAP_2_TEAM_MAP,omitempty"`
	// Mapping of LDAP user schema to Tower API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the Ansible Tower documentation for additional details.
	AUTHLDAP2USERATTRMAP map[string]interface{} `json:"AUTH_LDAP_2_USER_ATTR_MAP,omitempty"`
	// Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH.
	AUTHLDAP2USERDNTEMPLATE string `json:"AUTH_LDAP_2_USER_DN_TEMPLATE,omitempty"`
	// Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the Ansible Tower documentation for more detail.
	AUTHLDAP2USERFLAGSBYGROUP map[string]interface{} `json:"AUTH_LDAP_2_USER_FLAGS_BY_GROUP,omitempty"`
	// LDAP search query to find users.  Any user that matches the given pattern will be able to login to Tower.  The user should also be mapped into a Tower organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of \"LDAPUnion\" is possible. See Tower documentation for details.
	AUTHLDAP2USERSEARCH []string `json:"AUTH_LDAP_2_USER_SEARCH,omitempty"`
	// DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the Ansible Tower documentation for example syntax.
	AUTHLDAP3BINDDN string `json:"AUTH_LDAP_3_BIND_DN,omitempty"`
	// Password used to bind LDAP user account.
	AUTHLDAP3BINDPASSWORD string `json:"AUTH_LDAP_3_BIND_PASSWORD,omitempty"`
	// Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. \"OPT_REFERRALS\"). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set.
	AUTHLDAP3CONNECTIONOPTIONS map[string]interface{} `json:"AUTH_LDAP_3_CONNECTION_OPTIONS,omitempty"`
	// Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported.
	AUTHLDAP3DENYGROUP string `json:"AUTH_LDAP_3_DENY_GROUP,omitempty"`
	// Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion.
	AUTHLDAP3GROUPSEARCH []string `json:"AUTH_LDAP_3_GROUP_SEARCH,omitempty"`
	// The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups
	AUTHLDAP3GROUPTYPE string `json:"AUTH_LDAP_3_GROUP_TYPE,omitempty"`
	// Key value parameters to send the chosen group type init method.
	AUTHLDAP3GROUPTYPEPARAMS map[string]interface{} `json:"AUTH_LDAP_3_GROUP_TYPE_PARAMS,omitempty"`
	// Mapping between organization admins/users and LDAP groups. This controls which users are placed into which Tower organizations relative to their LDAP group memberships. Configuration details are available in the Ansible Tower documentation.
	AUTHLDAP3ORGANIZATIONMAP map[string]interface{} `json:"AUTH_LDAP_3_ORGANIZATION_MAP,omitempty"`
	// Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login via Tower. Only one require group is supported.
	AUTHLDAP3REQUIREGROUP string `json:"AUTH_LDAP_3_REQUIRE_GROUP,omitempty"`
	// URI to connect to LDAP server, such as \"ldap://ldap.example.com:389\" (non-SSL) or \"ldaps://ldap.example.com:636\" (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty.
	AUTHLDAP3SERVERURI string `json:"AUTH_LDAP_3_SERVER_URI,omitempty"`
	// Whether to enable TLS when the LDAP connection is not using SSL.
	AUTHLDAP3STARTTLS bool `json:"AUTH_LDAP_3_START_TLS,omitempty"`
	// Mapping between team members (users) and LDAP groups. Configuration details are available in the Ansible Tower documentation.
	AUTHLDAP3TEAMMAP map[string]interface{} `json:"AUTH_LDAP_3_TEAM_MAP,omitempty"`
	// Mapping of LDAP user schema to Tower API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the Ansible Tower documentation for additional details.
	AUTHLDAP3USERATTRMAP map[string]interface{} `json:"AUTH_LDAP_3_USER_ATTR_MAP,omitempty"`
	// Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH.
	AUTHLDAP3USERDNTEMPLATE string `json:"AUTH_LDAP_3_USER_DN_TEMPLATE,omitempty"`
	// Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the Ansible Tower documentation for more detail.
	AUTHLDAP3USERFLAGSBYGROUP map[string]interface{} `json:"AUTH_LDAP_3_USER_FLAGS_BY_GROUP,omitempty"`
	// LDAP search query to find users.  Any user that matches the given pattern will be able to login to Tower.  The user should also be mapped into a Tower organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of \"LDAPUnion\" is possible. See Tower documentation for details.
	AUTHLDAP3USERSEARCH []string `json:"AUTH_LDAP_3_USER_SEARCH,omitempty"`
	// DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the Ansible Tower documentation for example syntax.
	AUTHLDAP4BINDDN string `json:"AUTH_LDAP_4_BIND_DN,omitempty"`
	// Password used to bind LDAP user account.
	AUTHLDAP4BINDPASSWORD string `json:"AUTH_LDAP_4_BIND_PASSWORD,omitempty"`
	// Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. \"OPT_REFERRALS\"). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set.
	AUTHLDAP4CONNECTIONOPTIONS map[string]interface{} `json:"AUTH_LDAP_4_CONNECTION_OPTIONS,omitempty"`
	// Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported.
	AUTHLDAP4DENYGROUP string `json:"AUTH_LDAP_4_DENY_GROUP,omitempty"`
	// Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion.
	AUTHLDAP4GROUPSEARCH []string `json:"AUTH_LDAP_4_GROUP_SEARCH,omitempty"`
	// The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups
	AUTHLDAP4GROUPTYPE string `json:"AUTH_LDAP_4_GROUP_TYPE,omitempty"`
	// Key value parameters to send the chosen group type init method.
	AUTHLDAP4GROUPTYPEPARAMS map[string]interface{} `json:"AUTH_LDAP_4_GROUP_TYPE_PARAMS,omitempty"`
	// Mapping between organization admins/users and LDAP groups. This controls which users are placed into which Tower organizations relative to their LDAP group memberships. Configuration details are available in the Ansible Tower documentation.
	AUTHLDAP4ORGANIZATIONMAP map[string]interface{} `json:"AUTH_LDAP_4_ORGANIZATION_MAP,omitempty"`
	// Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login via Tower. Only one require group is supported.
	AUTHLDAP4REQUIREGROUP string `json:"AUTH_LDAP_4_REQUIRE_GROUP,omitempty"`
	// URI to connect to LDAP server, such as \"ldap://ldap.example.com:389\" (non-SSL) or \"ldaps://ldap.example.com:636\" (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty.
	AUTHLDAP4SERVERURI string `json:"AUTH_LDAP_4_SERVER_URI,omitempty"`
	// Whether to enable TLS when the LDAP connection is not using SSL.
	AUTHLDAP4STARTTLS bool `json:"AUTH_LDAP_4_START_TLS,omitempty"`
	// Mapping between team members (users) and LDAP groups. Configuration details are available in the Ansible Tower documentation.
	AUTHLDAP4TEAMMAP map[string]interface{} `json:"AUTH_LDAP_4_TEAM_MAP,omitempty"`
	// Mapping of LDAP user schema to Tower API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the Ansible Tower documentation for additional details.
	AUTHLDAP4USERATTRMAP map[string]interface{} `json:"AUTH_LDAP_4_USER_ATTR_MAP,omitempty"`
	// Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH.
	AUTHLDAP4USERDNTEMPLATE string `json:"AUTH_LDAP_4_USER_DN_TEMPLATE,omitempty"`
	// Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the Ansible Tower documentation for more detail.
	AUTHLDAP4USERFLAGSBYGROUP map[string]interface{} `json:"AUTH_LDAP_4_USER_FLAGS_BY_GROUP,omitempty"`
	// LDAP search query to find users.  Any user that matches the given pattern will be able to login to Tower.  The user should also be mapped into a Tower organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of \"LDAPUnion\" is possible. See Tower documentation for details.
	AUTHLDAP4USERSEARCH []string `json:"AUTH_LDAP_4_USER_SEARCH,omitempty"`
	// DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the Ansible Tower documentation for example syntax.
	AUTHLDAP5BINDDN string `json:"AUTH_LDAP_5_BIND_DN,omitempty"`
	// Password used to bind LDAP user account.
	AUTHLDAP5BINDPASSWORD string `json:"AUTH_LDAP_5_BIND_PASSWORD,omitempty"`
	// Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. \"OPT_REFERRALS\"). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set.
	AUTHLDAP5CONNECTIONOPTIONS map[string]interface{} `json:"AUTH_LDAP_5_CONNECTION_OPTIONS,omitempty"`
	// Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported.
	AUTHLDAP5DENYGROUP string `json:"AUTH_LDAP_5_DENY_GROUP,omitempty"`
	// Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion.
	AUTHLDAP5GROUPSEARCH []string `json:"AUTH_LDAP_5_GROUP_SEARCH,omitempty"`
	// The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups
	AUTHLDAP5GROUPTYPE string `json:"AUTH_LDAP_5_GROUP_TYPE,omitempty"`
	// Key value parameters to send the chosen group type init method.
	AUTHLDAP5GROUPTYPEPARAMS map[string]interface{} `json:"AUTH_LDAP_5_GROUP_TYPE_PARAMS,omitempty"`
	// Mapping between organization admins/users and LDAP groups. This controls which users are placed into which Tower organizations relative to their LDAP group memberships. Configuration details are available in the Ansible Tower documentation.
	AUTHLDAP5ORGANIZATIONMAP map[string]interface{} `json:"AUTH_LDAP_5_ORGANIZATION_MAP,omitempty"`
	// Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login via Tower. Only one require group is supported.
	AUTHLDAP5REQUIREGROUP string `json:"AUTH_LDAP_5_REQUIRE_GROUP,omitempty"`
	// URI to connect to LDAP server, such as \"ldap://ldap.example.com:389\" (non-SSL) or \"ldaps://ldap.example.com:636\" (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty.
	AUTHLDAP5SERVERURI string `json:"AUTH_LDAP_5_SERVER_URI,omitempty"`
	// Whether to enable TLS when the LDAP connection is not using SSL.
	AUTHLDAP5STARTTLS bool `json:"AUTH_LDAP_5_START_TLS,omitempty"`
	// Mapping between team members (users) and LDAP groups. Configuration details are available in the Ansible Tower documentation.
	AUTHLDAP5TEAMMAP map[string]interface{} `json:"AUTH_LDAP_5_TEAM_MAP,omitempty"`
	// Mapping of LDAP user schema to Tower API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the Ansible Tower documentation for additional details.
	AUTHLDAP5USERATTRMAP map[string]interface{} `json:"AUTH_LDAP_5_USER_ATTR_MAP,omitempty"`
	// Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH.
	AUTHLDAP5USERDNTEMPLATE string `json:"AUTH_LDAP_5_USER_DN_TEMPLATE,omitempty"`
	// Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the Ansible Tower documentation for more detail.
	AUTHLDAP5USERFLAGSBYGROUP map[string]interface{} `json:"AUTH_LDAP_5_USER_FLAGS_BY_GROUP,omitempty"`
	// LDAP search query to find users.  Any user that matches the given pattern will be able to login to Tower.  The user should also be mapped into a Tower organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of \"LDAPUnion\" is possible. See Tower documentation for details.
	AUTHLDAP5USERSEARCH []string `json:"AUTH_LDAP_5_USER_SEARCH,omitempty"`
	// DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the Ansible Tower documentation for example syntax.
	AUTH_LDAP_BIND_DN string `json:"AUTH_LDAP_BIND_DN,omitempty"`
	// Password used to bind LDAP user account.
	AUTH_LDAP_BIND_PASSWORD string `json:"AUTH_LDAP_BIND_PASSWORD,omitempty"`
	// Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. \"OPT_REFERRALS\"). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set.
	AUTH_LDAP_CONNECTION_OPTIONS map[string]interface{} `json:"AUTH_LDAP_CONNECTION_OPTIONS,omitempty"`
	// Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported.
	AUTH_LDAP_DENY_GROUP string `json:"AUTH_LDAP_DENY_GROUP,omitempty"`
	// Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion.
	AUTH_LDAP_GROUP_SEARCH []string `json:"AUTH_LDAP_GROUP_SEARCH,omitempty"`
	// The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups
	AUTH_LDAP_GROUP_TYPE string `json:"AUTH_LDAP_GROUP_TYPE,omitempty"`
	// Key value parameters to send the chosen group type init method.
	AUTH_LDAP_GROUP_TYPE_PARAMS map[string]interface{} `json:"AUTH_LDAP_GROUP_TYPE_PARAMS,omitempty"`
	// Mapping between organization admins/users and LDAP groups. This controls which users are placed into which Tower organizations relative to their LDAP group memberships. Configuration details are available in the Ansible Tower documentation.
	AUTH_LDAP_ORGANIZATION_MAP map[string]interface{} `json:"AUTH_LDAP_ORGANIZATION_MAP,omitempty"`
	// Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login via Tower. Only one require group is supported.
	AUTH_LDAP_REQUIRE_GROUP string `json:"AUTH_LDAP_REQUIRE_GROUP,omitempty"`
	// URI to connect to LDAP server, such as \"ldap://ldap.example.com:389\" (non-SSL) or \"ldaps://ldap.example.com:636\" (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty.
	AUTH_LDAP_SERVER_URI string `json:"AUTH_LDAP_SERVER_URI,omitempty"`
	// Whether to enable TLS when the LDAP connection is not using SSL.
	AUTH_LDAP_START_TLS bool `json:"AUTH_LDAP_START_TLS,omitempty"`
	// Mapping between team members (users) and LDAP groups. Configuration details are available in the Ansible Tower documentation.
	AUTH_LDAP_TEAM_MAP map[string]interface{} `json:"AUTH_LDAP_TEAM_MAP,omitempty"`
	// Mapping of LDAP user schema to Tower API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the Ansible Tower documentation for additional details.
	AUTH_LDAP_USER_ATTR_MAP map[string]interface{} `json:"AUTH_LDAP_USER_ATTR_MAP,omitempty"`
	// Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH.
	AUTH_LDAP_USER_DN_TEMPLATE string `json:"AUTH_LDAP_USER_DN_TEMPLATE,omitempty"`
	// Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the Ansible Tower documentation for more detail.
	AUTH_LDAP_USER_FLAGS_BY_GROUP map[string]interface{} `json:"AUTH_LDAP_USER_FLAGS_BY_GROUP,omitempty"`
	// LDAP search query to find users.  Any user that matches the given pattern will be able to login to Tower.  The user should also be mapped into a Tower organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of \"LDAPUnion\" is possible. See Tower documentation for details.
	AUTH_LDAP_USER_SEARCH []string `json:"AUTH_LDAP_USER_SEARCH,omitempty"`
	// Interval (in seconds) between data gathering.
	AUTOMATION_ANALYTICS_GATHER_INTERVAL int32 `json:"AUTOMATION_ANALYTICS_GATHER_INTERVAL,omitempty"`
	//
	AUTOMATION_ANALYTICS_LAST_GATHER string `json:"AUTOMATION_ANALYTICS_LAST_GATHER"`
	// This setting is used to to configure data collection for the Automation Analytics dashboard
	AUTOMATION_ANALYTICS_URL string `json:"AUTOMATION_ANALYTICS_URL,omitempty"`
	// List of paths to search for extra callback plugins to be used when running jobs. Enter one path per line.
	AWX_ANSIBLE_CALLBACK_PLUGINS []string `json:"AWX_ANSIBLE_CALLBACK_PLUGINS,omitempty"`
	// Allows collections to be dynamically downloaded from a requirements.yml file for SCM projects.
	AWX_COLLECTIONS_ENABLED bool `json:"AWX_COLLECTIONS_ENABLED,omitempty"`
	// The number of seconds to sleep between status checks for jobs running on isolated instances.
	AWX_ISOLATED_CHECK_INTERVAL int32 `json:"AWX_ISOLATED_CHECK_INTERVAL"`
	// Ansible SSH connection timeout (in seconds) to use when communicating with isolated instances. Value should be substantially greater than expected network latency.
	AWX_ISOLATED_CONNECTION_TIMEOUT int32 `json:"AWX_ISOLATED_CONNECTION_TIMEOUT,omitempty"`
	// When set to True, AWX will enforce strict host key checking for communication with isolated nodes.
	AWX_ISOLATED_HOST_KEY_CHECKING bool `json:"AWX_ISOLATED_HOST_KEY_CHECKING,omitempty"`
	// The timeout (in seconds) for launching jobs on isolated instances.  This includes the time needed to copy source control files (playbooks) to the isolated instance.
	AWX_ISOLATED_LAUNCH_TIMEOUT int32 `json:"AWX_ISOLATED_LAUNCH_TIMEOUT"`
	// The directory in which Tower will create new temporary directories for job execution and isolation (such as credential files and custom inventory scripts).
	AWX_PROOT_BASE_PATH string `json:"AWX_PROOT_BASE_PATH"`
	// Isolates an Ansible job from protected parts of the system to prevent exposing sensitive information.
	AWX_PROOT_ENABLED bool `json:"AWX_PROOT_ENABLED"`
	// Additional paths to hide from isolated processes. Enter one path per line.
	AWX_PROOT_HIDE_PATHS []string `json:"AWX_PROOT_HIDE_PATHS,omitempty"`
	// List of paths that would otherwise be hidden to expose to isolated jobs. Enter one path per line.
	AWX_PROOT_SHOW_PATHS []string `json:"AWX_PROOT_SHOW_PATHS,omitempty"`
	// Interval (in seconds) between polls for cpu usage. Setting this lower than the default will affect playbook performance.
	AWX_RESOURCE_PROFILING_CPU_POLL_INTERVAL float32 `json:"AWX_RESOURCE_PROFILING_CPU_POLL_INTERVAL,omitempty"`
	// If set, detailed resource profiling data will be collected on all jobs. This data can be gathered with `sosreport`.
	AWX_RESOURCE_PROFILING_ENABLED bool `json:"AWX_RESOURCE_PROFILING_ENABLED,omitempty"`
	// Interval (in seconds) between polls for memory usage. Setting this lower than the default will affect playbook performance.
	AWX_RESOURCE_PROFILING_MEMORY_POLL_INTERVAL float32 `json:"AWX_RESOURCE_PROFILING_MEMORY_POLL_INTERVAL,omitempty"`
	// Interval (in seconds) between polls for PID count. Setting this lower than the default will affect playbook performance.
	AWX_RESOURCE_PROFILING_PID_POLL_INTERVAL float32 `json:"AWX_RESOURCE_PROFILING_PID_POLL_INTERVAL,omitempty"`
	// Allows roles to be dynamically downloaded from a requirements.yml file for SCM projects.
	AWX_ROLES_ENABLED bool `json:"AWX_ROLES_ENABLED,omitempty"`
	// Follow symbolic links when scanning for playbooks. Be aware that setting this to True can lead to infinite recursion if a link points to a parent directory of itself.
	AWX_SHOW_PLAYBOOK_LINKS bool `json:"AWX_SHOW_PLAYBOOK_LINKS,omitempty"`
	// Additional environment variables set for playbook runs, inventory updates, project updates, and notification sending.
	AWX_TASK_ENV map[string]interface{} `json:"AWX_TASK_ENV,omitempty"`
	// If needed, you can add specific information (such as a legal notice or a disclaimer) to a text box in the login modal using this setting. Any content added must be in plain text or an HTML fragment, as other markup languages are not supported.
	CUSTOM_LOGIN_INFO string `json:"CUSTOM_LOGIN_INFO,omitempty"`
	// To set up a custom logo, provide a file that you create. For the custom logo to look its best, use a .png file with a transparent background. GIF, PNG and JPEG formats are supported.
	CUSTOM_LOGO string `json:"CUSTOM_LOGO,omitempty"`
	// Paths where Tower will look for custom virtual environments (in addition to /var/lib/awx/venv/). Enter one path per line.
	CUSTOM_VENV_PATHS []string `json:"CUSTOM_VENV_PATHS,omitempty"`
	// Maximum time in seconds to allow inventory updates to run. Use value of 0 to indicate that no timeout should be imposed. A timeout set on an individual inventory source will override this.
	DEFAULT_INVENTORY_UPDATE_TIMEOUT int32 `json:"DEFAULT_INVENTORY_UPDATE_TIMEOUT,omitempty"`
	// Maximum time in seconds to allow jobs to run. Use value of 0 to indicate that no timeout should be imposed. A timeout set on an individual job template will override this.
	DEFAULT_JOB_TIMEOUT int32 `json:"DEFAULT_JOB_TIMEOUT,omitempty"`
	// Maximum time in seconds to allow project updates to run. Use value of 0 to indicate that no timeout should be imposed. A timeout set on an individual project will override this.
	DEFAULT_PROJECT_UPDATE_TIMEOUT int32 `json:"DEFAULT_PROJECT_UPDATE_TIMEOUT,omitempty"`
	// Maximum Size of Standard Output in bytes to display for a single job or ad hoc command event. `stdout` will end with `…` when truncated.
	EVENT_STDOUT_MAX_BYTES_DISPLAY int32 `json:"EVENT_STDOUT_MAX_BYTES_DISPLAY"`
	// If set to true, certificate validation will not be done when installing content from any Galaxy server.
	GALAXY_IGNORE_CERTS bool `json:"GALAXY_IGNORE_CERTS,omitempty"`
	// Enables Tower to gather data on automation and send it to Red Hat.
	INSIGHTS_TRACKING_STATE bool `json:"INSIGHTS_TRACKING_STATE,omitempty"`
	// URL to which unauthorized users will be redirected to log in. If blank, users will be sent to the Tower login page.
	LOGIN_REDIRECT_OVERRIDE string `json:"LOGIN_REDIRECT_OVERRIDE,omitempty"`
	// Enable sending logs to external log aggregator.
	LOG_AGGREGATOR_ENABLED bool `json:"LOG_AGGREGATOR_ENABLED,omitempty"`
	// Hostname/IP where external logs will be sent to.
	LOG_AGGREGATOR_HOST string `json:"LOG_AGGREGATOR_HOST,omitempty"`
	// If set, system tracking facts will be sent for each package, service, or other item found in a scan, allowing for greater search query granularity. If unset, facts will be sent as a single dictionary, allowing for greater efficiency in fact processing.
	LOG_AGGREGATOR_INDIVIDUAL_FACTS bool `json:"LOG_AGGREGATOR_INDIVIDUAL_FACTS,omitempty"`
	// Level threshold used by log handler. Severities from lowest to highest are DEBUG, INFO, WARNING, ERROR, CRITICAL. Messages less severe than the threshold will be ignored by log handler. (messages under category awx.anlytics ignore this setting)
	LOG_AGGREGATOR_LEVEL string `json:"LOG_AGGREGATOR_LEVEL,omitempty"`
	// List of loggers that will send HTTP logs to the collector, these can include any or all of:  awx - service logs activity_stream - activity stream records job_events - callback data from Ansible job events system_tracking - facts gathered from scan jobs.
	LOG_AGGREGATOR_LOGGERS []string `json:"LOG_AGGREGATOR_LOGGERS,omitempty"`
	// Amount of data to store (in gigabytes) during an outage of the external log aggregator (defaults to 1). Equivalent to the rsyslogd queue.maxdiskspace setting.
	LOG_AGGREGATOR_MAX_DISK_USAGE_GB int32 `json:"LOG_AGGREGATOR_MAX_DISK_USAGE_GB,omitempty"`
	// Location to persist logs that should be retried after an outage of the external log aggregator (defaults to /var/lib/awx). Equivalent to the rsyslogd queue.spoolDirectory setting.
	LOG_AGGREGATOR_MAX_DISK_USAGE_PATH string `json:"LOG_AGGREGATOR_MAX_DISK_USAGE_PATH,omitempty"`
	// Password or authentication token for external log aggregator (if required; HTTP/s only).
	LOG_AGGREGATOR_PASSWORD string `json:"LOG_AGGREGATOR_PASSWORD,omitempty"`
	// Port on Logging Aggregator to send logs to (if required and not provided in Logging Aggregator).
	LOG_AGGREGATOR_PORT int32 `json:"LOG_AGGREGATOR_PORT,omitempty"`
	// Protocol used to communicate with log aggregator.  HTTPS/HTTP assumes HTTPS unless http:// is explicitly used in the Logging Aggregator hostname.
	LOG_AGGREGATOR_PROTOCOL string `json:"LOG_AGGREGATOR_PROTOCOL,omitempty"`
	// Enabled high verbosity debugging for rsyslogd.  Useful for debugging connection issues for external log aggregation.
	LOG_AGGREGATOR_RSYSLOGD_DEBUG bool `json:"LOG_AGGREGATOR_RSYSLOGD_DEBUG,omitempty"`
	// Number of seconds for a TCP connection to external log aggregator to timeout. Applies to HTTPS and TCP log aggregator protocols.
	LOG_AGGREGATOR_TCP_TIMEOUT int32 `json:"LOG_AGGREGATOR_TCP_TIMEOUT,omitempty"`
	// Useful to uniquely identify Tower instances.
	LOG_AGGREGATOR_TOWER_UUID string `json:"LOG_AGGREGATOR_TOWER_UUID,omitempty"`
	// Format messages for the chosen log aggregator.
	LOG_AGGREGATOR_TYPE string `json:"LOG_AGGREGATOR_TYPE,omitempty"`
	// Username for external log aggregator (if required; HTTP/s only).
	LOG_AGGREGATOR_USERNAME string `json:"LOG_AGGREGATOR_USERNAME,omitempty"`
	// Flag to control enable/disable of certificate verification when LOG_AGGREGATOR_PROTOCOL is \"https\". If enabled, Tower's log handler will verify certificate sent by external log aggregator before establishing connection.
	LOG_AGGREGATOR_VERIFY_CERT bool `json:"LOG_AGGREGATOR_VERIFY_CERT,omitempty"`
	// Controls whether any Organization Admin has the privileges to create and manage users and teams. You may want to disable this ability if you are using an LDAP or SAML integration.
	MANAGE_ORGANIZATION_AUTH bool `json:"MANAGE_ORGANIZATION_AUTH"`
	// Saving a Job Template with more than this number of forks will result in an error. When set to 0, no limit is applied.
	MAX_FORKS int32 `json:"MAX_FORKS,omitempty"`
	// Maximum number of job events for the UI to retrieve within a single request.
	MAX_UI_JOB_EVENTS int32 `json:"MAX_UI_JOB_EVENTS"`
	// Dictionary for customizing OAuth 2 timeouts, available items are `ACCESS_TOKEN_EXPIRE_SECONDS`, the duration of access tokens in the number of seconds, `AUTHORIZATION_CODE_EXPIRE_SECONDS`, the duration of authorization codes in the number of seconds, and `REFRESH_TOKEN_EXPIRE_SECONDS`, the duration of refresh tokens, after expired access tokens, in the number of seconds.
	OAUTH2PROVIDER map[string]interface{} `json:"OAUTH2_PROVIDER,omitempty"`
	// Controls whether any Organization Admin can view all users and teams, even those not associated with their Organization.
	ORG_ADMINS_CAN_SEE_ALL_USERS bool `json:"ORG_ADMINS_CAN_SEE_ALL_USERS"`
	// Adds the CLI -vvv flag to ansible-playbook runs of project_update.yml used for project updates.
	PROJECT_UPDATE_VVV bool `json:"PROJECT_UPDATE_VVV"`
	// If Tower is behind a reverse proxy/load balancer, use this setting to configure the proxy IP addresses from which Tower should trust custom REMOTE_HOST_HEADERS header values. If this setting is an empty list (the default), the headers specified by REMOTE_HOST_HEADERS will be trusted unconditionally')
	PROXY_IP_ALLOWED_LIST []string `json:"PROXY_IP_ALLOWED_LIST"`
	// Port of RADIUS server.
	RADIUS_PORT int32 `json:"RADIUS_PORT,omitempty"`
	// Shared secret for authenticating to RADIUS server.
	RADIUS_SECRET string `json:"RADIUS_SECRET,omitempty"`
	// Hostname/IP of RADIUS server. RADIUS authentication is disabled if this setting is empty.
	RADIUS_SERVER string `json:"RADIUS_SERVER,omitempty"`
	// This password is used to retrieve license information and to send Automation Analytics
	REDHAT_PASSWORD string `json:"REDHAT_PASSWORD,omitempty"`
	// This username is used to retrieve license information and to send Automation Analytics
	REDHAT_USERNAME string `json:"REDHAT_USERNAME,omitempty"`
	// HTTP headers and meta keys to search to determine remote host name or IP. Add additional items to this list, such as \"HTTP_X_FORWARDED_FOR\", if behind a reverse proxy. See the \"Proxy Support\" section of the Adminstrator guide for more details.
	REMOTE_HOST_HEADERS []string `json:"REMOTE_HOST_HEADERS"`
	// When enabled (the default), mapped Organizations and Teams will be created automatically on successful SAML login.
	SAML_AUTO_CREATE_OBJECTS bool `json:"SAML_AUTO_CREATE_OBJECTS,omitempty"`
	// Maximum number of the same job template that can be waiting to run when launching from a schedule before no more are created.
	SCHEDULE_MAX_JOBS int32 `json:"SCHEDULE_MAX_JOBS"`
	// Maximum number of simultaneous logged in sessions a user may have. To disable enter -1.
	SESSIONS_PER_USER int32 `json:"SESSIONS_PER_USER"`
	// Number of seconds that a user is inactive before they will need to login again.
	SESSION_COOKIE_AGE int32 `json:"SESSION_COOKIE_AGE"`
	// The OAuth2 key (Client ID) from your Azure AD application.
	SOCIALAUTHAZUREADOAUTH2KEY string `json:"SOCIAL_AUTH_AZUREAD_OAUTH2_KEY,omitempty"`
	// Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which Tower organizations based on their username and email address. Configuration details are available in the Ansible Tower documentation.
	SOCIALAUTHAZUREADOAUTH2ORGANIZATIONMAP map[string]interface{} `json:"SOCIAL_AUTH_AZUREAD_OAUTH2_ORGANIZATION_MAP,omitempty"`
	// The OAuth2 secret (Client Secret) from your Azure AD application.
	SOCIALAUTHAZUREADOAUTH2SECRET string `json:"SOCIAL_AUTH_AZUREAD_OAUTH2_SECRET,omitempty"`
	// Mapping of team members (users) from social auth accounts. Configuration details are available in Tower documentation.
	SOCIALAUTHAZUREADOAUTH2TEAMMAP map[string]interface{} `json:"SOCIAL_AUTH_AZUREAD_OAUTH2_TEAM_MAP,omitempty"`
	// The OAuth2 key (Client ID) from your GitHub developer application.
	SOCIAL_AUTH_GITHUB_KEY string `json:"SOCIAL_AUTH_GITHUB_KEY,omitempty"`
	// Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which Tower organizations based on their username and email address. Configuration details are available in the Ansible Tower documentation.
	SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP map[string]interface{} `json:"SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP,omitempty"`
	// The OAuth2 key (Client ID) from your GitHub organization application.
	SOCIAL_AUTH_GITHUB_ORG_KEY string `json:"SOCIAL_AUTH_GITHUB_ORG_KEY,omitempty"`
	// The name of your GitHub organization, as used in your organization's URL: https://github.com/<yourorg>/.
	SOCIAL_AUTH_GITHUB_ORG_NAME string `json:"SOCIAL_AUTH_GITHUB_ORG_NAME,omitempty"`
	// Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which Tower organizations based on their username and email address. Configuration details are available in the Ansible Tower documentation.
	SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP map[string]interface{} `json:"SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP,omitempty"`
	// The OAuth2 secret (Client Secret) from your GitHub organization application.
	SOCIAL_AUTH_GITHUB_ORG_SECRET string `json:"SOCIAL_AUTH_GITHUB_ORG_SECRET,omitempty"`
	// Mapping of team members (users) from social auth accounts. Configuration details are available in Tower documentation.
	SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP map[string]interface{} `json:"SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP,omitempty"`
	// The OAuth2 secret (Client Secret) from your GitHub developer application.
	SOCIAL_AUTH_GITHUB_SECRET string `json:"SOCIAL_AUTH_GITHUB_SECRET,omitempty"`
	// Find the numeric team ID using the Github API: http://fabian-kostadinov.github.io/2015/01/16/how-to-find-a-github-team-id/.
	SOCIAL_AUTH_GITHUB_TEAM_ID string `json:"SOCIAL_AUTH_GITHUB_TEAM_ID,omitempty"`
	// The OAuth2 key (Client ID) from your GitHub organization application.
	SOCIAL_AUTH_GITHUB_TEAM_KEY string `json:"SOCIAL_AUTH_GITHUB_TEAM_KEY,omitempty"`
	// Mapping of team members (users) from social auth accounts. Configuration details are available in Tower documentation.
	SOCIAL_AUTH_GITHUB_TEAM_MAP map[string]interface{} `json:"SOCIAL_AUTH_GITHUB_TEAM_MAP,omitempty"`
	// Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which Tower organizations based on their username and email address. Configuration details are available in the Ansible Tower documentation.
	SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP map[string]interface{} `json:"SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP,omitempty"`
	// The OAuth2 secret (Client Secret) from your GitHub organization application.
	SOCIAL_AUTH_GITHUB_TEAM_SECRET string `json:"SOCIAL_AUTH_GITHUB_TEAM_SECRET,omitempty"`
	// Mapping of team members (users) from social auth accounts. Configuration details are available in Tower documentation.
	SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP map[string]interface{} `json:"SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP,omitempty"`
	// Extra arguments for Google OAuth2 login. You can restrict it to only allow a single domain to authenticate, even if the user is logged in with multple Google accounts. Refer to the Ansible Tower documentation for more detail.
	SOCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTS map[string]interface{} `json:"SOCIAL_AUTH_GOOGLE_OAUTH2_AUTH_EXTRA_ARGUMENTS,omitempty"`
	// The OAuth2 key from your web application.
	SOCIALAUTHGOOGLEOAUTH2KEY string `json:"SOCIAL_AUTH_GOOGLE_OAUTH2_KEY,omitempty"`
	// Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which Tower organizations based on their username and email address. Configuration details are available in the Ansible Tower documentation.
	SOCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAP map[string]interface{} `json:"SOCIAL_AUTH_GOOGLE_OAUTH2_ORGANIZATION_MAP,omitempty"`
	// The OAuth2 secret from your web application.
	SOCIALAUTHGOOGLEOAUTH2SECRET string `json:"SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET,omitempty"`
	// Mapping of team members (users) from social auth accounts. Configuration details are available in Tower documentation.
	SOCIALAUTHGOOGLEOAUTH2TEAMMAP map[string]interface{} `json:"SOCIAL_AUTH_GOOGLE_OAUTH2_TEAM_MAP,omitempty"`
	// Update this setting to restrict the domains who are allowed to login using Google OAuth2.
	SOCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINS []string `json:"SOCIAL_AUTH_GOOGLE_OAUTH2_WHITELISTED_DOMAINS,omitempty"`
	// Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which Tower organizations based on their username and email address. Configuration details are available in the Ansible Tower documentation.
	SOCIAL_AUTH_ORGANIZATION_MAP map[string]interface{} `json:"SOCIAL_AUTH_ORGANIZATION_MAP,omitempty"`
	// Configure the Entity ID, SSO URL and certificate for each identity provider (IdP) in use. Multiple SAML IdPs are supported. Some IdPs may provide user data using attribute names that differ from the default OIDs. Attribute names may be overridden for each IdP. Refer to the Ansible documentation for additional details and syntax.
	SOCIAL_AUTH_SAML_ENABLED_IDPS map[string]interface{} `json:"SOCIAL_AUTH_SAML_ENABLED_IDPS,omitempty"`
	// A list of tuples that maps IDP attributes to extra_attributes. Each attribute will be a list of values, even if only 1 value.
	SOCIAL_AUTH_SAML_EXTRA_DATA []string `json:"SOCIAL_AUTH_SAML_EXTRA_DATA,omitempty"`
	// Used to translate user organization membership into Tower.
	SOCIAL_AUTH_SAML_ORGANIZATION_ATTR map[string]interface{} `json:"SOCIAL_AUTH_SAML_ORGANIZATION_ATTR,omitempty"`
	// Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which Tower organizations based on their username and email address. Configuration details are available in the Ansible Tower documentation.
	SOCIAL_AUTH_SAML_ORGANIZATION_MAP map[string]interface{} `json:"SOCIAL_AUTH_SAML_ORGANIZATION_MAP,omitempty"`
	// Provide the URL, display name, and the name of your app. Refer to the Ansible Tower documentation for example syntax.
	SOCIAL_AUTH_SAML_ORG_INFO map[string]interface{} `json:"SOCIAL_AUTH_SAML_ORG_INFO"`
	// A dict of key value pairs that are passed to the underlying python-saml security setting https://github.com/onelogin/python-saml#settings
	SOCIAL_AUTH_SAML_SECURITY_CONFIG map[string]interface{} `json:"SOCIAL_AUTH_SAML_SECURITY_CONFIG,omitempty"`
	// The application-defined unique identifier used as the audience of the SAML service provider (SP) configuration. This is usually the URL for Tower.
	SOCIAL_AUTH_SAML_SP_ENTITY_ID string `json:"SOCIAL_AUTH_SAML_SP_ENTITY_ID,omitempty"`
	// A dict of key value pairs to be passed to the underlying python-saml Service Provider configuration setting.
	SOCIAL_AUTH_SAML_SP_EXTRA map[string]interface{} `json:"SOCIAL_AUTH_SAML_SP_EXTRA,omitempty"`
	// Create a keypair for Tower to use as a service provider (SP) and include the private key content here.
	SOCIAL_AUTH_SAML_SP_PRIVATE_KEY string `json:"SOCIAL_AUTH_SAML_SP_PRIVATE_KEY"`
	// Create a keypair for Tower to use as a service provider (SP) and include the certificate content here.
	SOCIAL_AUTH_SAML_SP_PUBLIC_CERT string `json:"SOCIAL_AUTH_SAML_SP_PUBLIC_CERT"`
	// Provide the name and email address of the support contact for your service provider. Refer to the Ansible Tower documentation for example syntax.
	SOCIAL_AUTH_SAML_SUPPORT_CONTACT map[string]interface{} `json:"SOCIAL_AUTH_SAML_SUPPORT_CONTACT"`
	// Used to translate user team membership into Tower.
	SOCIAL_AUTH_SAML_TEAM_ATTR map[string]interface{} `json:"SOCIAL_AUTH_SAML_TEAM_ATTR,omitempty"`
	// Mapping of team members (users) from social auth accounts. Configuration details are available in Tower documentation.
	SOCIAL_AUTH_SAML_TEAM_MAP map[string]interface{} `json:"SOCIAL_AUTH_SAML_TEAM_MAP,omitempty"`
	// Provide the name and email address of the technical contact for your service provider. Refer to the Ansible Tower documentation for example syntax.
	SOCIAL_AUTH_SAML_TECHNICAL_CONTACT map[string]interface{} `json:"SOCIAL_AUTH_SAML_TECHNICAL_CONTACT"`
	// Mapping of team members (users) from social auth accounts. Configuration details are available in Tower documentation.
	SOCIAL_AUTH_TEAM_MAP map[string]interface{} `json:"SOCIAL_AUTH_TEAM_MAP,omitempty"`
	// When set to an empty list `[]`, this setting prevents new user accounts from being created. Only users who have previously logged in using social auth or have a user account with a matching email address will be able to login.
	SOCIAL_AUTH_USER_FIELDS []string `json:"SOCIAL_AUTH_USER_FIELDS,omitempty"`
	// Maximum Size of Standard Output in bytes to display before requiring the output be downloaded.
	STDOUT_MAX_BYTES_DISPLAY int32 `json:"STDOUT_MAX_BYTES_DISPLAY"`
	// Choose the authentication protocol used by TACACS+ client.
	TACACSPLUS_AUTH_PROTOCOL string `json:"TACACSPLUS_AUTH_PROTOCOL,omitempty"`
	// Hostname of TACACS+ server.
	TACACSPLUS_HOST string `json:"TACACSPLUS_HOST,omitempty"`
	// Port number of TACACS+ server.
	TACACSPLUS_PORT int32 `json:"TACACSPLUS_PORT,omitempty"`
	// Shared secret for authenticating to TACACS+ server.
	TACACSPLUS_SECRET string `json:"TACACSPLUS_SECRET,omitempty"`
	// TACACS+ session timeout value in seconds, 0 disables timeout.
	TACACSPLUS_SESSION_TIMEOUT int32 `json:"TACACSPLUS_SESSION_TIMEOUT,omitempty"`
	// This setting is used by services like notifications to render a valid url to the Tower host.
	TOWER_URL_BASE string `json:"TOWER_URL_BASE"`
	// If disabled, the page will not refresh when events are received. Reloading the page will be required to get the latest details.
	UI_LIVE_UPDATES_ENABLED bool `json:"UI_LIVE_UPDATES_ENABLED"`
}
