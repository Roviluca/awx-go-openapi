/*
 * Ansible Tower API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version:
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// JobHostSummariesApiService JobHostSummariesApi service
type JobHostSummariesApiService service

type ApiJobHostSummariesJobHostSummariesReadRequest struct {
	ctx        _context.Context
	ApiService *JobHostSummariesApiService
	id         string
	search     *string
}

func (r ApiJobHostSummariesJobHostSummariesReadRequest) Search(search string) ApiJobHostSummariesJobHostSummariesReadRequest {
	r.search = &search
	return r
}

func (r ApiJobHostSummariesJobHostSummariesReadRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.JobHostSummariesJobHostSummariesReadExecute(r)
}

/*
 * JobHostSummariesJobHostSummariesRead  Retrieve a Job Host Summary
 *
Make GET request to this resource to retrieve a single job host summary
record containing the following fields:

* `id`: Database ID for this job host summary. (integer)
* `type`: Data type for this job host summary. (choice)
* `url`: URL for this job host summary. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this job host summary was created. (datetime)
* `modified`: Timestamp when this job host summary was last modified. (datetime)
* `job`:  (id)
* `host`:  (id)
* `host_name`:  (string)
* `changed`:  (integer)
* `dark`:  (integer)
* `failures`:  (integer)
* `ok`:  (integer)
* `processed`:  (integer)
* `skipped`:  (integer)
* `failed`:  (boolean)
* `ignored`:  (integer)
* `rescued`:  (integer)
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiJobHostSummariesJobHostSummariesReadRequest
*/
func (a *JobHostSummariesApiService) JobHostSummariesJobHostSummariesRead(ctx _context.Context, id string) ApiJobHostSummariesJobHostSummariesReadRequest {
	return ApiJobHostSummariesJobHostSummariesReadRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

/*
 * Execute executes the request
 */
func (a *JobHostSummariesApiService) JobHostSummariesJobHostSummariesReadExecute(r ApiJobHostSummariesJobHostSummariesReadRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "JobHostSummariesApiService.JobHostSummariesJobHostSummariesRead")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/job_host_summaries/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
