/*
 * Ansible Tower API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// SystemJobTemplatesApiService SystemJobTemplatesApi service
type SystemJobTemplatesApiService service

type ApiSystemJobTemplatesSystemJobTemplatesJobsListRequest struct {
	ctx _context.Context
	ApiService *SystemJobTemplatesApiService
	id string
	page *int32
	pageSize *int32
	search *string
}

func (r ApiSystemJobTemplatesSystemJobTemplatesJobsListRequest) Page(page int32) ApiSystemJobTemplatesSystemJobTemplatesJobsListRequest {
	r.page = &page
	return r
}
func (r ApiSystemJobTemplatesSystemJobTemplatesJobsListRequest) PageSize(pageSize int32) ApiSystemJobTemplatesSystemJobTemplatesJobsListRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiSystemJobTemplatesSystemJobTemplatesJobsListRequest) Search(search string) ApiSystemJobTemplatesSystemJobTemplatesJobsListRequest {
	r.search = &search
	return r
}

func (r ApiSystemJobTemplatesSystemJobTemplatesJobsListRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SystemJobTemplatesSystemJobTemplatesJobsListExecute(r)
}

/*
 * SystemJobTemplatesSystemJobTemplatesJobsList  List System Jobs for a System Job Template
 * 
Make a GET request to this resource to retrieve a list of
system jobs associated with the selected
system job template.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of system jobs
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more system job records.  

## Results

Each system job data structure includes the following fields:

* `id`: Database ID for this system job. (integer)
* `type`: Data type for this system job. (choice)
* `url`: URL for this system job. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this system job was created. (datetime)
* `modified`: Timestamp when this system job was last modified. (datetime)
* `name`: Name of this system job. (string)
* `description`: Optional description of this system job. (string)
* `unified_job_template`:  (id)
* `launch_type`:  (choice)
    - `manual`: Manual
    - `relaunch`: Relaunch
    - `callback`: Callback
    - `scheduled`: Scheduled
    - `dependency`: Dependency
    - `workflow`: Workflow
    - `webhook`: Webhook
    - `sync`: Sync
    - `scm`: SCM Update
* `status`:  (choice)
    - `new`: New
    - `pending`: Pending
    - `waiting`: Waiting
    - `running`: Running
    - `successful`: Successful
    - `failed`: Failed
    - `error`: Error
    - `canceled`: Canceled
* `failed`:  (boolean)
* `started`: The date and time the job was queued for starting. (datetime)
* `finished`: The date and time the job finished execution. (datetime)
* `canceled_on`: The date and time when the cancel request was sent. (datetime)
* `elapsed`: Elapsed time in seconds that the job ran. (decimal)
* `job_explanation`: A status field to indicate the state of the job if it wasn&#39;t able to run and capture stdout (string)
* `execution_node`: The node the job executed on. (string)
* `system_job_template`:  (id)
* `job_type`:  (choice)
    - `""`: ---------
    - `cleanup_jobs`: Remove jobs older than a certain number of days
    - `cleanup_activitystream`: Remove activity stream entries older than a certain number of days
    - `cleanup_sessions`: Removes expired browser sessions from the database
    - `cleanup_tokens`: Removes expired OAuth 2 access tokens and refresh tokens
* `extra_vars`:  (string)
* `result_stdout`:  (field)



## Sorting

To specify that system jobs are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiSystemJobTemplatesSystemJobTemplatesJobsListRequest
 */
func (a *SystemJobTemplatesApiService) SystemJobTemplatesSystemJobTemplatesJobsList(ctx _context.Context, id string) ApiSystemJobTemplatesSystemJobTemplatesJobsListRequest {
	return ApiSystemJobTemplatesSystemJobTemplatesJobsListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *SystemJobTemplatesApiService) SystemJobTemplatesSystemJobTemplatesJobsListExecute(r ApiSystemJobTemplatesSystemJobTemplatesJobsListRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemJobTemplatesApiService.SystemJobTemplatesSystemJobTemplatesJobsList")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/system_job_templates/{id}/jobs/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSystemJobTemplatesSystemJobTemplatesLaunchCreateRequest struct {
	ctx _context.Context
	ApiService *SystemJobTemplatesApiService
	id string
}


func (r ApiSystemJobTemplatesSystemJobTemplatesLaunchCreateRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SystemJobTemplatesSystemJobTemplatesLaunchCreateExecute(r)
}

/*
 * SystemJobTemplatesSystemJobTemplatesLaunchCreate Launch a Job Template
 * 
Make a POST request to this resource to launch the system job template.

Variables specified inside of the parameter `extra_vars` are passed to the
system job task as command line parameters. These tasks can be run manually
on the host system via the `awx-manage` command.

For example on `cleanup_jobs` and `cleanup_activitystream`:

`{"extra_vars": {"days": 30}}`

Which will act on data older than 30 days.

For `cleanup_activitystream` and `cleanup_jobs` commands, providing
`"dry_run": true` inside of `extra_vars` will show items that will be
removed without deleting them.

Each individual system job task has its own default values, which are
applicable either when running it from the command line or launching its
system job template with empty `extra_vars`.

 - Defaults for `cleanup_activitystream`: days=90
 - Defaults for `cleanup_jobs`: days=90

If successful, the response status code will be 202.  If the job cannot be
launched, a 405 status code will be returned.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiSystemJobTemplatesSystemJobTemplatesLaunchCreateRequest
 */
func (a *SystemJobTemplatesApiService) SystemJobTemplatesSystemJobTemplatesLaunchCreate(ctx _context.Context, id string) ApiSystemJobTemplatesSystemJobTemplatesLaunchCreateRequest {
	return ApiSystemJobTemplatesSystemJobTemplatesLaunchCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *SystemJobTemplatesApiService) SystemJobTemplatesSystemJobTemplatesLaunchCreateExecute(r ApiSystemJobTemplatesSystemJobTemplatesLaunchCreateRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemJobTemplatesApiService.SystemJobTemplatesSystemJobTemplatesLaunchCreate")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/system_job_templates/{id}/launch/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSystemJobTemplatesSystemJobTemplatesLaunchListRequest struct {
	ctx _context.Context
	ApiService *SystemJobTemplatesApiService
	id string
	page *int32
	pageSize *int32
	search *string
}

func (r ApiSystemJobTemplatesSystemJobTemplatesLaunchListRequest) Page(page int32) ApiSystemJobTemplatesSystemJobTemplatesLaunchListRequest {
	r.page = &page
	return r
}
func (r ApiSystemJobTemplatesSystemJobTemplatesLaunchListRequest) PageSize(pageSize int32) ApiSystemJobTemplatesSystemJobTemplatesLaunchListRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiSystemJobTemplatesSystemJobTemplatesLaunchListRequest) Search(search string) ApiSystemJobTemplatesSystemJobTemplatesLaunchListRequest {
	r.search = &search
	return r
}

func (r ApiSystemJobTemplatesSystemJobTemplatesLaunchListRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SystemJobTemplatesSystemJobTemplatesLaunchListExecute(r)
}

/*
 * SystemJobTemplatesSystemJobTemplatesLaunchList Launch a Job Template
 * 
Make a POST request to this resource to launch the system job template.

Variables specified inside of the parameter `extra_vars` are passed to the
system job task as command line parameters. These tasks can be run manually
on the host system via the `awx-manage` command.

For example on `cleanup_jobs` and `cleanup_activitystream`:

`{"extra_vars": {"days": 30}}`

Which will act on data older than 30 days.

For `cleanup_activitystream` and `cleanup_jobs` commands, providing
`"dry_run": true` inside of `extra_vars` will show items that will be
removed without deleting them.

Each individual system job task has its own default values, which are
applicable either when running it from the command line or launching its
system job template with empty `extra_vars`.

 - Defaults for `cleanup_activitystream`: days=90
 - Defaults for `cleanup_jobs`: days=90

If successful, the response status code will be 202.  If the job cannot be
launched, a 405 status code will be returned.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiSystemJobTemplatesSystemJobTemplatesLaunchListRequest
 */
func (a *SystemJobTemplatesApiService) SystemJobTemplatesSystemJobTemplatesLaunchList(ctx _context.Context, id string) ApiSystemJobTemplatesSystemJobTemplatesLaunchListRequest {
	return ApiSystemJobTemplatesSystemJobTemplatesLaunchListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *SystemJobTemplatesApiService) SystemJobTemplatesSystemJobTemplatesLaunchListExecute(r ApiSystemJobTemplatesSystemJobTemplatesLaunchListRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemJobTemplatesApiService.SystemJobTemplatesSystemJobTemplatesLaunchList")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/system_job_templates/{id}/launch/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSystemJobTemplatesSystemJobTemplatesListRequest struct {
	ctx _context.Context
	ApiService *SystemJobTemplatesApiService
	page *int32
	pageSize *int32
	search *string
}

func (r ApiSystemJobTemplatesSystemJobTemplatesListRequest) Page(page int32) ApiSystemJobTemplatesSystemJobTemplatesListRequest {
	r.page = &page
	return r
}
func (r ApiSystemJobTemplatesSystemJobTemplatesListRequest) PageSize(pageSize int32) ApiSystemJobTemplatesSystemJobTemplatesListRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiSystemJobTemplatesSystemJobTemplatesListRequest) Search(search string) ApiSystemJobTemplatesSystemJobTemplatesListRequest {
	r.search = &search
	return r
}

func (r ApiSystemJobTemplatesSystemJobTemplatesListRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SystemJobTemplatesSystemJobTemplatesListExecute(r)
}

/*
 * SystemJobTemplatesSystemJobTemplatesList  List System Job Templates
 * 
Make a GET request to this resource to retrieve the list of
system job templates.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of system job templates
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more system job template records.  

## Results

Each system job template data structure includes the following fields:

* `id`: Database ID for this system job template. (integer)
* `type`: Data type for this system job template. (choice)
* `url`: URL for this system job template. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this system job template was created. (datetime)
* `modified`: Timestamp when this system job template was last modified. (datetime)
* `name`: Name of this system job template. (string)
* `description`: Optional description of this system job template. (string)
* `last_job_run`:  (datetime)
* `last_job_failed`:  (boolean)
* `next_job_run`:  (datetime)
* `status`:  (choice)
    - `new`: New
    - `pending`: Pending
    - `waiting`: Waiting
    - `running`: Running
    - `successful`: Successful
    - `failed`: Failed
    - `error`: Error
    - `canceled`: Canceled
    - `never updated`: Never Updated
    - `ok`: OK
    - `missing`: Missing
    - `none`: No External Source
    - `updating`: Updating
* `job_type`:  (choice)
    - `""`: ---------
    - `cleanup_jobs`: Remove jobs older than a certain number of days
    - `cleanup_activitystream`: Remove activity stream entries older than a certain number of days
    - `cleanup_sessions`: Removes expired browser sessions from the database
    - `cleanup_tokens`: Removes expired OAuth 2 access tokens and refresh tokens



## Sorting

To specify that system job templates are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiSystemJobTemplatesSystemJobTemplatesListRequest
 */
func (a *SystemJobTemplatesApiService) SystemJobTemplatesSystemJobTemplatesList(ctx _context.Context) ApiSystemJobTemplatesSystemJobTemplatesListRequest {
	return ApiSystemJobTemplatesSystemJobTemplatesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *SystemJobTemplatesApiService) SystemJobTemplatesSystemJobTemplatesListExecute(r ApiSystemJobTemplatesSystemJobTemplatesListRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemJobTemplatesApiService.SystemJobTemplatesSystemJobTemplatesList")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/system_job_templates/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesErrorCreateRequest struct {
	ctx _context.Context
	ApiService *SystemJobTemplatesApiService
	id string
	data *InlineObject61
}

func (r ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesErrorCreateRequest) Data(data InlineObject61) ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesErrorCreateRequest {
	r.data = &data
	return r
}

func (r ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesErrorCreateRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SystemJobTemplatesSystemJobTemplatesNotificationTemplatesErrorCreateExecute(r)
}

/*
 * SystemJobTemplatesSystemJobTemplatesNotificationTemplatesErrorCreate  Create a Notification Template for a System Job Template
 * 
Make a POST request to this resource with the following notification template
fields to create a new notification template associated with this
system job template.









* `name`: Name of this notification template. (string, required)
* `description`: Optional description of this notification template. (string, default=`""`)
* `organization`:  (id, required)
* `notification_type`:  (choice, required)
    - `email`: Email
    - `grafana`: Grafana
    - `irc`: IRC
    - `mattermost`: Mattermost
    - `pagerduty`: Pagerduty
    - `rocketchat`: Rocket.Chat
    - `slack`: Slack
    - `twilio`: Twilio
    - `webhook`: Webhook
* `notification_configuration`:  (json, default=`{}`)
* `messages`: Optional custom messages for notification template. (json, default=`{&#39;started&#39;: None, &#39;success&#39;: None, &#39;error&#39;: None, &#39;workflow_approval&#39;: None}`)








# Add Notification Templates for a System Job Template:

Make a POST request to this resource with only an `id` field to associate an
existing notification template with this system job template.

# Remove Notification Templates from this System Job Template:

Make a POST request to this resource with `id` and `disassociate` fields to
remove the notification template from this system job template
 without deleting the notification template.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesErrorCreateRequest
 */
func (a *SystemJobTemplatesApiService) SystemJobTemplatesSystemJobTemplatesNotificationTemplatesErrorCreate(ctx _context.Context, id string) ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesErrorCreateRequest {
	return ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesErrorCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *SystemJobTemplatesApiService) SystemJobTemplatesSystemJobTemplatesNotificationTemplatesErrorCreateExecute(r ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesErrorCreateRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemJobTemplatesApiService.SystemJobTemplatesSystemJobTemplatesNotificationTemplatesErrorCreate")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/system_job_templates/{id}/notification_templates_error/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.data
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesErrorListRequest struct {
	ctx _context.Context
	ApiService *SystemJobTemplatesApiService
	id string
	page *int32
	pageSize *int32
	search *string
}

func (r ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesErrorListRequest) Page(page int32) ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesErrorListRequest {
	r.page = &page
	return r
}
func (r ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesErrorListRequest) PageSize(pageSize int32) ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesErrorListRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesErrorListRequest) Search(search string) ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesErrorListRequest {
	r.search = &search
	return r
}

func (r ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesErrorListRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SystemJobTemplatesSystemJobTemplatesNotificationTemplatesErrorListExecute(r)
}

/*
 * SystemJobTemplatesSystemJobTemplatesNotificationTemplatesErrorList  List Notification Templates for a System Job Template
 * 
Make a GET request to this resource to retrieve a list of
notification templates associated with the selected
system job template.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of notification templates
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more notification template records.  

## Results

Each notification template data structure includes the following fields:

* `id`: Database ID for this notification template. (integer)
* `type`: Data type for this notification template. (choice)
* `url`: URL for this notification template. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this notification template was created. (datetime)
* `modified`: Timestamp when this notification template was last modified. (datetime)
* `name`: Name of this notification template. (string)
* `description`: Optional description of this notification template. (string)
* `organization`:  (id)
* `notification_type`:  (choice)
    - `email`: Email
    - `grafana`: Grafana
    - `irc`: IRC
    - `mattermost`: Mattermost
    - `pagerduty`: Pagerduty
    - `rocketchat`: Rocket.Chat
    - `slack`: Slack
    - `twilio`: Twilio
    - `webhook`: Webhook
* `notification_configuration`:  (json)
* `messages`: Optional custom messages for notification template. (json)



## Sorting

To specify that notification templates are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesErrorListRequest
 */
func (a *SystemJobTemplatesApiService) SystemJobTemplatesSystemJobTemplatesNotificationTemplatesErrorList(ctx _context.Context, id string) ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesErrorListRequest {
	return ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesErrorListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *SystemJobTemplatesApiService) SystemJobTemplatesSystemJobTemplatesNotificationTemplatesErrorListExecute(r ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesErrorListRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemJobTemplatesApiService.SystemJobTemplatesSystemJobTemplatesNotificationTemplatesErrorList")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/system_job_templates/{id}/notification_templates_error/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesStartedCreateRequest struct {
	ctx _context.Context
	ApiService *SystemJobTemplatesApiService
	id string
	data *map[string]interface{}
}

func (r ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesStartedCreateRequest) Data(data map[string]interface{}) ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesStartedCreateRequest {
	r.data = &data
	return r
}

func (r ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesStartedCreateRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SystemJobTemplatesSystemJobTemplatesNotificationTemplatesStartedCreateExecute(r)
}

/*
 * SystemJobTemplatesSystemJobTemplatesNotificationTemplatesStartedCreate  Create a Notification Template for a System Job Template
 * 
Make a POST request to this resource with the following notification template
fields to create a new notification template associated with this
system job template.









* `name`: Name of this notification template. (string, required)
* `description`: Optional description of this notification template. (string, default=`""`)
* `organization`:  (id, required)
* `notification_type`:  (choice, required)
    - `email`: Email
    - `grafana`: Grafana
    - `irc`: IRC
    - `mattermost`: Mattermost
    - `pagerduty`: Pagerduty
    - `rocketchat`: Rocket.Chat
    - `slack`: Slack
    - `twilio`: Twilio
    - `webhook`: Webhook
* `notification_configuration`:  (json, default=`{}`)
* `messages`: Optional custom messages for notification template. (json, default=`{&#39;started&#39;: None, &#39;success&#39;: None, &#39;error&#39;: None, &#39;workflow_approval&#39;: None}`)








# Add Notification Templates for a System Job Template:

Make a POST request to this resource with only an `id` field to associate an
existing notification template with this system job template.

# Remove Notification Templates from this System Job Template:

Make a POST request to this resource with `id` and `disassociate` fields to
remove the notification template from this system job template
 without deleting the notification template.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesStartedCreateRequest
 */
func (a *SystemJobTemplatesApiService) SystemJobTemplatesSystemJobTemplatesNotificationTemplatesStartedCreate(ctx _context.Context, id string) ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesStartedCreateRequest {
	return ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesStartedCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *SystemJobTemplatesApiService) SystemJobTemplatesSystemJobTemplatesNotificationTemplatesStartedCreateExecute(r ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesStartedCreateRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemJobTemplatesApiService.SystemJobTemplatesSystemJobTemplatesNotificationTemplatesStartedCreate")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/system_job_templates/{id}/notification_templates_started/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.data
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesStartedListRequest struct {
	ctx _context.Context
	ApiService *SystemJobTemplatesApiService
	id string
	page *int32
	pageSize *int32
	search *string
}

func (r ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesStartedListRequest) Page(page int32) ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesStartedListRequest {
	r.page = &page
	return r
}
func (r ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesStartedListRequest) PageSize(pageSize int32) ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesStartedListRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesStartedListRequest) Search(search string) ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesStartedListRequest {
	r.search = &search
	return r
}

func (r ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesStartedListRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SystemJobTemplatesSystemJobTemplatesNotificationTemplatesStartedListExecute(r)
}

/*
 * SystemJobTemplatesSystemJobTemplatesNotificationTemplatesStartedList  List Notification Templates for a System Job Template
 * 
Make a GET request to this resource to retrieve a list of
notification templates associated with the selected
system job template.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of notification templates
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more notification template records.  

## Results

Each notification template data structure includes the following fields:

* `id`: Database ID for this notification template. (integer)
* `type`: Data type for this notification template. (choice)
* `url`: URL for this notification template. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this notification template was created. (datetime)
* `modified`: Timestamp when this notification template was last modified. (datetime)
* `name`: Name of this notification template. (string)
* `description`: Optional description of this notification template. (string)
* `organization`:  (id)
* `notification_type`:  (choice)
    - `email`: Email
    - `grafana`: Grafana
    - `irc`: IRC
    - `mattermost`: Mattermost
    - `pagerduty`: Pagerduty
    - `rocketchat`: Rocket.Chat
    - `slack`: Slack
    - `twilio`: Twilio
    - `webhook`: Webhook
* `notification_configuration`:  (json)
* `messages`: Optional custom messages for notification template. (json)



## Sorting

To specify that notification templates are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesStartedListRequest
 */
func (a *SystemJobTemplatesApiService) SystemJobTemplatesSystemJobTemplatesNotificationTemplatesStartedList(ctx _context.Context, id string) ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesStartedListRequest {
	return ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesStartedListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *SystemJobTemplatesApiService) SystemJobTemplatesSystemJobTemplatesNotificationTemplatesStartedListExecute(r ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesStartedListRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemJobTemplatesApiService.SystemJobTemplatesSystemJobTemplatesNotificationTemplatesStartedList")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/system_job_templates/{id}/notification_templates_started/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesSuccessCreateRequest struct {
	ctx _context.Context
	ApiService *SystemJobTemplatesApiService
	id string
	data *InlineObject62
}

func (r ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesSuccessCreateRequest) Data(data InlineObject62) ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesSuccessCreateRequest {
	r.data = &data
	return r
}

func (r ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesSuccessCreateRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SystemJobTemplatesSystemJobTemplatesNotificationTemplatesSuccessCreateExecute(r)
}

/*
 * SystemJobTemplatesSystemJobTemplatesNotificationTemplatesSuccessCreate  Create a Notification Template for a System Job Template
 * 
Make a POST request to this resource with the following notification template
fields to create a new notification template associated with this
system job template.









* `name`: Name of this notification template. (string, required)
* `description`: Optional description of this notification template. (string, default=`""`)
* `organization`:  (id, required)
* `notification_type`:  (choice, required)
    - `email`: Email
    - `grafana`: Grafana
    - `irc`: IRC
    - `mattermost`: Mattermost
    - `pagerduty`: Pagerduty
    - `rocketchat`: Rocket.Chat
    - `slack`: Slack
    - `twilio`: Twilio
    - `webhook`: Webhook
* `notification_configuration`:  (json, default=`{}`)
* `messages`: Optional custom messages for notification template. (json, default=`{&#39;started&#39;: None, &#39;success&#39;: None, &#39;error&#39;: None, &#39;workflow_approval&#39;: None}`)








# Add Notification Templates for a System Job Template:

Make a POST request to this resource with only an `id` field to associate an
existing notification template with this system job template.

# Remove Notification Templates from this System Job Template:

Make a POST request to this resource with `id` and `disassociate` fields to
remove the notification template from this system job template
 without deleting the notification template.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesSuccessCreateRequest
 */
func (a *SystemJobTemplatesApiService) SystemJobTemplatesSystemJobTemplatesNotificationTemplatesSuccessCreate(ctx _context.Context, id string) ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesSuccessCreateRequest {
	return ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesSuccessCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *SystemJobTemplatesApiService) SystemJobTemplatesSystemJobTemplatesNotificationTemplatesSuccessCreateExecute(r ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesSuccessCreateRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemJobTemplatesApiService.SystemJobTemplatesSystemJobTemplatesNotificationTemplatesSuccessCreate")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/system_job_templates/{id}/notification_templates_success/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.data
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesSuccessListRequest struct {
	ctx _context.Context
	ApiService *SystemJobTemplatesApiService
	id string
	page *int32
	pageSize *int32
	search *string
}

func (r ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesSuccessListRequest) Page(page int32) ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesSuccessListRequest {
	r.page = &page
	return r
}
func (r ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesSuccessListRequest) PageSize(pageSize int32) ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesSuccessListRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesSuccessListRequest) Search(search string) ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesSuccessListRequest {
	r.search = &search
	return r
}

func (r ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesSuccessListRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SystemJobTemplatesSystemJobTemplatesNotificationTemplatesSuccessListExecute(r)
}

/*
 * SystemJobTemplatesSystemJobTemplatesNotificationTemplatesSuccessList  List Notification Templates for a System Job Template
 * 
Make a GET request to this resource to retrieve a list of
notification templates associated with the selected
system job template.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of notification templates
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more notification template records.  

## Results

Each notification template data structure includes the following fields:

* `id`: Database ID for this notification template. (integer)
* `type`: Data type for this notification template. (choice)
* `url`: URL for this notification template. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this notification template was created. (datetime)
* `modified`: Timestamp when this notification template was last modified. (datetime)
* `name`: Name of this notification template. (string)
* `description`: Optional description of this notification template. (string)
* `organization`:  (id)
* `notification_type`:  (choice)
    - `email`: Email
    - `grafana`: Grafana
    - `irc`: IRC
    - `mattermost`: Mattermost
    - `pagerduty`: Pagerduty
    - `rocketchat`: Rocket.Chat
    - `slack`: Slack
    - `twilio`: Twilio
    - `webhook`: Webhook
* `notification_configuration`:  (json)
* `messages`: Optional custom messages for notification template. (json)



## Sorting

To specify that notification templates are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesSuccessListRequest
 */
func (a *SystemJobTemplatesApiService) SystemJobTemplatesSystemJobTemplatesNotificationTemplatesSuccessList(ctx _context.Context, id string) ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesSuccessListRequest {
	return ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesSuccessListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *SystemJobTemplatesApiService) SystemJobTemplatesSystemJobTemplatesNotificationTemplatesSuccessListExecute(r ApiSystemJobTemplatesSystemJobTemplatesNotificationTemplatesSuccessListRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemJobTemplatesApiService.SystemJobTemplatesSystemJobTemplatesNotificationTemplatesSuccessList")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/system_job_templates/{id}/notification_templates_success/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSystemJobTemplatesSystemJobTemplatesReadRequest struct {
	ctx _context.Context
	ApiService *SystemJobTemplatesApiService
	id string
	search *string
}

func (r ApiSystemJobTemplatesSystemJobTemplatesReadRequest) Search(search string) ApiSystemJobTemplatesSystemJobTemplatesReadRequest {
	r.search = &search
	return r
}

func (r ApiSystemJobTemplatesSystemJobTemplatesReadRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SystemJobTemplatesSystemJobTemplatesReadExecute(r)
}

/*
 * SystemJobTemplatesSystemJobTemplatesRead  Retrieve a System Job Template
 * 
Make GET request to this resource to retrieve a single system job template
record containing the following fields:

* `id`: Database ID for this system job template. (integer)
* `type`: Data type for this system job template. (choice)
* `url`: URL for this system job template. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this system job template was created. (datetime)
* `modified`: Timestamp when this system job template was last modified. (datetime)
* `name`: Name of this system job template. (string)
* `description`: Optional description of this system job template. (string)
* `last_job_run`:  (datetime)
* `last_job_failed`:  (boolean)
* `next_job_run`:  (datetime)
* `status`:  (choice)
    - `new`: New
    - `pending`: Pending
    - `waiting`: Waiting
    - `running`: Running
    - `successful`: Successful
    - `failed`: Failed
    - `error`: Error
    - `canceled`: Canceled
    - `never updated`: Never Updated
    - `ok`: OK
    - `missing`: Missing
    - `none`: No External Source
    - `updating`: Updating
* `job_type`:  (choice)
    - `""`: ---------
    - `cleanup_jobs`: Remove jobs older than a certain number of days
    - `cleanup_activitystream`: Remove activity stream entries older than a certain number of days
    - `cleanup_sessions`: Removes expired browser sessions from the database
    - `cleanup_tokens`: Removes expired OAuth 2 access tokens and refresh tokens
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiSystemJobTemplatesSystemJobTemplatesReadRequest
 */
func (a *SystemJobTemplatesApiService) SystemJobTemplatesSystemJobTemplatesRead(ctx _context.Context, id string) ApiSystemJobTemplatesSystemJobTemplatesReadRequest {
	return ApiSystemJobTemplatesSystemJobTemplatesReadRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *SystemJobTemplatesApiService) SystemJobTemplatesSystemJobTemplatesReadExecute(r ApiSystemJobTemplatesSystemJobTemplatesReadRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemJobTemplatesApiService.SystemJobTemplatesSystemJobTemplatesRead")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/system_job_templates/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSystemJobTemplatesSystemJobTemplatesSchedulesCreateRequest struct {
	ctx _context.Context
	ApiService *SystemJobTemplatesApiService
	id string
	data *InlineObject63
}

func (r ApiSystemJobTemplatesSystemJobTemplatesSchedulesCreateRequest) Data(data InlineObject63) ApiSystemJobTemplatesSystemJobTemplatesSchedulesCreateRequest {
	r.data = &data
	return r
}

func (r ApiSystemJobTemplatesSystemJobTemplatesSchedulesCreateRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SystemJobTemplatesSystemJobTemplatesSchedulesCreateExecute(r)
}

/*
 * SystemJobTemplatesSystemJobTemplatesSchedulesCreate  Create a Schedule for a System Job Template
 * 
Make a POST request to this resource with the following schedule
fields to create a new schedule associated with this
system job template.


* `rrule`: A value representing the schedules iCal recurrence rule. (string, required)







* `name`: Name of this schedule. (string, required)
* `description`: Optional description of this schedule. (string, default=`""`)
* `extra_data`:  (json, default=`{}`)
* `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id, default=``)
* `scm_branch`:  (string, default=`""`)
* `job_type`:  (choice)
    - `None`: --------- (default)
    - `""`: ---------
    - `run`: Run
    - `check`: Check
* `job_tags`:  (string, default=`""`)
* `skip_tags`:  (string, default=`""`)
* `limit`:  (string, default=`""`)
* `diff_mode`:  (boolean, default=`None`)
* `verbosity`:  (choice)
    - `None`: --------- (default)
    - `0`: 0 (Normal)
    - `1`: 1 (Verbose)
    - `2`: 2 (More Verbose)
    - `3`: 3 (Debug)
    - `4`: 4 (Connection Debug)
    - `5`: 5 (WinRM Debug)

* `enabled`: Enables processing of this schedule. (boolean, default=`True`)
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiSystemJobTemplatesSystemJobTemplatesSchedulesCreateRequest
 */
func (a *SystemJobTemplatesApiService) SystemJobTemplatesSystemJobTemplatesSchedulesCreate(ctx _context.Context, id string) ApiSystemJobTemplatesSystemJobTemplatesSchedulesCreateRequest {
	return ApiSystemJobTemplatesSystemJobTemplatesSchedulesCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *SystemJobTemplatesApiService) SystemJobTemplatesSystemJobTemplatesSchedulesCreateExecute(r ApiSystemJobTemplatesSystemJobTemplatesSchedulesCreateRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemJobTemplatesApiService.SystemJobTemplatesSystemJobTemplatesSchedulesCreate")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/system_job_templates/{id}/schedules/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.data
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiSystemJobTemplatesSystemJobTemplatesSchedulesListRequest struct {
	ctx _context.Context
	ApiService *SystemJobTemplatesApiService
	id string
	page *int32
	pageSize *int32
	search *string
}

func (r ApiSystemJobTemplatesSystemJobTemplatesSchedulesListRequest) Page(page int32) ApiSystemJobTemplatesSystemJobTemplatesSchedulesListRequest {
	r.page = &page
	return r
}
func (r ApiSystemJobTemplatesSystemJobTemplatesSchedulesListRequest) PageSize(pageSize int32) ApiSystemJobTemplatesSystemJobTemplatesSchedulesListRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiSystemJobTemplatesSystemJobTemplatesSchedulesListRequest) Search(search string) ApiSystemJobTemplatesSystemJobTemplatesSchedulesListRequest {
	r.search = &search
	return r
}

func (r ApiSystemJobTemplatesSystemJobTemplatesSchedulesListRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.SystemJobTemplatesSystemJobTemplatesSchedulesListExecute(r)
}

/*
 * SystemJobTemplatesSystemJobTemplatesSchedulesList  List Schedules for a System Job Template
 * 
Make a GET request to this resource to retrieve a list of
schedules associated with the selected
system job template.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of schedules
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more schedule records.  

## Results

Each schedule data structure includes the following fields:

* `rrule`: A value representing the schedules iCal recurrence rule. (string)
* `id`: Database ID for this schedule. (integer)
* `type`: Data type for this schedule. (choice)
* `url`: URL for this schedule. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this schedule was created. (datetime)
* `modified`: Timestamp when this schedule was last modified. (datetime)
* `name`: Name of this schedule. (string)
* `description`: Optional description of this schedule. (string)
* `extra_data`:  (json)
* `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id)
* `scm_branch`:  (string)
* `job_type`:  (choice)
    - `None`: ---------
    - `""`: ---------
    - `run`: Run
    - `check`: Check
* `job_tags`:  (string)
* `skip_tags`:  (string)
* `limit`:  (string)
* `diff_mode`:  (boolean)
* `verbosity`:  (choice)
    - `None`: ---------
    - `0`: 0 (Normal)
    - `1`: 1 (Verbose)
    - `2`: 2 (More Verbose)
    - `3`: 3 (Debug)
    - `4`: 4 (Connection Debug)
    - `5`: 5 (WinRM Debug)
* `unified_job_template`:  (id)
* `enabled`: Enables processing of this schedule. (boolean)
* `dtstart`: The first occurrence of the schedule occurs on or after this time. (datetime)
* `dtend`: The last occurrence of the schedule occurs before this time, aftewards the schedule expires. (datetime)
* `next_run`: The next time that the scheduled action will run. (datetime)
* `timezone`:  (field)
* `until`:  (field)



## Sorting

To specify that schedules are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiSystemJobTemplatesSystemJobTemplatesSchedulesListRequest
 */
func (a *SystemJobTemplatesApiService) SystemJobTemplatesSystemJobTemplatesSchedulesList(ctx _context.Context, id string) ApiSystemJobTemplatesSystemJobTemplatesSchedulesListRequest {
	return ApiSystemJobTemplatesSystemJobTemplatesSchedulesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *SystemJobTemplatesApiService) SystemJobTemplatesSystemJobTemplatesSchedulesListExecute(r ApiSystemJobTemplatesSystemJobTemplatesSchedulesListRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "SystemJobTemplatesApiService.SystemJobTemplatesSystemJobTemplatesSchedulesList")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/system_job_templates/{id}/schedules/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
