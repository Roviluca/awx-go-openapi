/*
 * Ansible Tower API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// WorkflowApprovalsApiService WorkflowApprovalsApi service
type WorkflowApprovalsApiService service

type ApiWorkflowApprovalsWorkflowApprovalsApproveCreateRequest struct {
	ctx _context.Context
	ApiService *WorkflowApprovalsApiService
	id string
}


func (r ApiWorkflowApprovalsWorkflowApprovalsApproveCreateRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkflowApprovalsWorkflowApprovalsApproveCreateExecute(r)
}

/*
 * WorkflowApprovalsWorkflowApprovalsApproveCreate  Retrieve a Workflow Approval
 * 
Make GET request to this resource to retrieve a single workflow approval
record containing the following fields:
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiWorkflowApprovalsWorkflowApprovalsApproveCreateRequest
 */
func (a *WorkflowApprovalsApiService) WorkflowApprovalsWorkflowApprovalsApproveCreate(ctx _context.Context, id string) ApiWorkflowApprovalsWorkflowApprovalsApproveCreateRequest {
	return ApiWorkflowApprovalsWorkflowApprovalsApproveCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *WorkflowApprovalsApiService) WorkflowApprovalsWorkflowApprovalsApproveCreateExecute(r ApiWorkflowApprovalsWorkflowApprovalsApproveCreateRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowApprovalsApiService.WorkflowApprovalsWorkflowApprovalsApproveCreate")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/workflow_approvals/{id}/approve/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkflowApprovalsWorkflowApprovalsApproveReadRequest struct {
	ctx _context.Context
	ApiService *WorkflowApprovalsApiService
	id string
	search *string
}

func (r ApiWorkflowApprovalsWorkflowApprovalsApproveReadRequest) Search(search string) ApiWorkflowApprovalsWorkflowApprovalsApproveReadRequest {
	r.search = &search
	return r
}

func (r ApiWorkflowApprovalsWorkflowApprovalsApproveReadRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkflowApprovalsWorkflowApprovalsApproveReadExecute(r)
}

/*
 * WorkflowApprovalsWorkflowApprovalsApproveRead  Retrieve a Workflow Approval
 * 
Make GET request to this resource to retrieve a single workflow approval
record containing the following fields:
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiWorkflowApprovalsWorkflowApprovalsApproveReadRequest
 */
func (a *WorkflowApprovalsApiService) WorkflowApprovalsWorkflowApprovalsApproveRead(ctx _context.Context, id string) ApiWorkflowApprovalsWorkflowApprovalsApproveReadRequest {
	return ApiWorkflowApprovalsWorkflowApprovalsApproveReadRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *WorkflowApprovalsApiService) WorkflowApprovalsWorkflowApprovalsApproveReadExecute(r ApiWorkflowApprovalsWorkflowApprovalsApproveReadRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowApprovalsApiService.WorkflowApprovalsWorkflowApprovalsApproveRead")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/workflow_approvals/{id}/approve/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkflowApprovalsWorkflowApprovalsCreateRequest struct {
	ctx _context.Context
	ApiService *WorkflowApprovalsApiService
	data *InlineObject74
}

func (r ApiWorkflowApprovalsWorkflowApprovalsCreateRequest) Data(data InlineObject74) ApiWorkflowApprovalsWorkflowApprovalsCreateRequest {
	r.data = &data
	return r
}

func (r ApiWorkflowApprovalsWorkflowApprovalsCreateRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkflowApprovalsWorkflowApprovalsCreateExecute(r)
}

/*
 * WorkflowApprovalsWorkflowApprovalsCreate  Create a Workflow Approval
 * 
Make a POST request to this resource with the following workflow approval
fields to create a new workflow approval:









* `name`: Name of this workflow approval. (string, required)
* `description`: Optional description of this workflow approval. (string, default=`""`)
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiWorkflowApprovalsWorkflowApprovalsCreateRequest
 */
func (a *WorkflowApprovalsApiService) WorkflowApprovalsWorkflowApprovalsCreate(ctx _context.Context) ApiWorkflowApprovalsWorkflowApprovalsCreateRequest {
	return ApiWorkflowApprovalsWorkflowApprovalsCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *WorkflowApprovalsApiService) WorkflowApprovalsWorkflowApprovalsCreateExecute(r ApiWorkflowApprovalsWorkflowApprovalsCreateRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowApprovalsApiService.WorkflowApprovalsWorkflowApprovalsCreate")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/workflow_approvals/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.data
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkflowApprovalsWorkflowApprovalsDeleteRequest struct {
	ctx _context.Context
	ApiService *WorkflowApprovalsApiService
	id string
	search *string
}

func (r ApiWorkflowApprovalsWorkflowApprovalsDeleteRequest) Search(search string) ApiWorkflowApprovalsWorkflowApprovalsDeleteRequest {
	r.search = &search
	return r
}

func (r ApiWorkflowApprovalsWorkflowApprovalsDeleteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkflowApprovalsWorkflowApprovalsDeleteExecute(r)
}

/*
 * WorkflowApprovalsWorkflowApprovalsDelete  Delete a Workflow Approval
 * 
Make a DELETE request to this resource to delete this workflow approval.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiWorkflowApprovalsWorkflowApprovalsDeleteRequest
 */
func (a *WorkflowApprovalsApiService) WorkflowApprovalsWorkflowApprovalsDelete(ctx _context.Context, id string) ApiWorkflowApprovalsWorkflowApprovalsDeleteRequest {
	return ApiWorkflowApprovalsWorkflowApprovalsDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *WorkflowApprovalsApiService) WorkflowApprovalsWorkflowApprovalsDeleteExecute(r ApiWorkflowApprovalsWorkflowApprovalsDeleteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowApprovalsApiService.WorkflowApprovalsWorkflowApprovalsDelete")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/workflow_approvals/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkflowApprovalsWorkflowApprovalsDenyCreateRequest struct {
	ctx _context.Context
	ApiService *WorkflowApprovalsApiService
	id string
}


func (r ApiWorkflowApprovalsWorkflowApprovalsDenyCreateRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkflowApprovalsWorkflowApprovalsDenyCreateExecute(r)
}

/*
 * WorkflowApprovalsWorkflowApprovalsDenyCreate  Retrieve a Workflow Approval
 * 
Make GET request to this resource to retrieve a single workflow approval
record containing the following fields:
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiWorkflowApprovalsWorkflowApprovalsDenyCreateRequest
 */
func (a *WorkflowApprovalsApiService) WorkflowApprovalsWorkflowApprovalsDenyCreate(ctx _context.Context, id string) ApiWorkflowApprovalsWorkflowApprovalsDenyCreateRequest {
	return ApiWorkflowApprovalsWorkflowApprovalsDenyCreateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *WorkflowApprovalsApiService) WorkflowApprovalsWorkflowApprovalsDenyCreateExecute(r ApiWorkflowApprovalsWorkflowApprovalsDenyCreateRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowApprovalsApiService.WorkflowApprovalsWorkflowApprovalsDenyCreate")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/workflow_approvals/{id}/deny/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkflowApprovalsWorkflowApprovalsDenyReadRequest struct {
	ctx _context.Context
	ApiService *WorkflowApprovalsApiService
	id string
	search *string
}

func (r ApiWorkflowApprovalsWorkflowApprovalsDenyReadRequest) Search(search string) ApiWorkflowApprovalsWorkflowApprovalsDenyReadRequest {
	r.search = &search
	return r
}

func (r ApiWorkflowApprovalsWorkflowApprovalsDenyReadRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkflowApprovalsWorkflowApprovalsDenyReadExecute(r)
}

/*
 * WorkflowApprovalsWorkflowApprovalsDenyRead  Retrieve a Workflow Approval
 * 
Make GET request to this resource to retrieve a single workflow approval
record containing the following fields:
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiWorkflowApprovalsWorkflowApprovalsDenyReadRequest
 */
func (a *WorkflowApprovalsApiService) WorkflowApprovalsWorkflowApprovalsDenyRead(ctx _context.Context, id string) ApiWorkflowApprovalsWorkflowApprovalsDenyReadRequest {
	return ApiWorkflowApprovalsWorkflowApprovalsDenyReadRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *WorkflowApprovalsApiService) WorkflowApprovalsWorkflowApprovalsDenyReadExecute(r ApiWorkflowApprovalsWorkflowApprovalsDenyReadRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowApprovalsApiService.WorkflowApprovalsWorkflowApprovalsDenyRead")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/workflow_approvals/{id}/deny/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkflowApprovalsWorkflowApprovalsListRequest struct {
	ctx _context.Context
	ApiService *WorkflowApprovalsApiService
	page *int32
	pageSize *int32
	search *string
}

func (r ApiWorkflowApprovalsWorkflowApprovalsListRequest) Page(page int32) ApiWorkflowApprovalsWorkflowApprovalsListRequest {
	r.page = &page
	return r
}
func (r ApiWorkflowApprovalsWorkflowApprovalsListRequest) PageSize(pageSize int32) ApiWorkflowApprovalsWorkflowApprovalsListRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiWorkflowApprovalsWorkflowApprovalsListRequest) Search(search string) ApiWorkflowApprovalsWorkflowApprovalsListRequest {
	r.search = &search
	return r
}

func (r ApiWorkflowApprovalsWorkflowApprovalsListRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkflowApprovalsWorkflowApprovalsListExecute(r)
}

/*
 * WorkflowApprovalsWorkflowApprovalsList  List Workflow Approvals
 * 
Make a GET request to this resource to retrieve the list of
workflow approvals.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of workflow approvals
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more workflow approval records.  

## Results

Each workflow approval data structure includes the following fields:

* `id`: Database ID for this workflow approval. (integer)
* `type`: Data type for this workflow approval. (choice)
* `url`: URL for this workflow approval. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this workflow approval was created. (datetime)
* `modified`: Timestamp when this workflow approval was last modified. (datetime)
* `name`: Name of this workflow approval. (string)
* `description`: Optional description of this workflow approval. (string)
* `unified_job_template`:  (id)
* `launch_type`:  (choice)
    - `manual`: Manual
    - `relaunch`: Relaunch
    - `callback`: Callback
    - `scheduled`: Scheduled
    - `dependency`: Dependency
    - `workflow`: Workflow
    - `webhook`: Webhook
    - `sync`: Sync
    - `scm`: SCM Update
* `status`:  (choice)
    - `new`: New
    - `pending`: Pending
    - `waiting`: Waiting
    - `running`: Running
    - `successful`: Successful
    - `failed`: Failed
    - `error`: Error
    - `canceled`: Canceled
* `failed`:  (boolean)
* `started`: The date and time the job was queued for starting. (datetime)
* `finished`: The date and time the job finished execution. (datetime)
* `canceled_on`: The date and time when the cancel request was sent. (datetime)
* `elapsed`: Elapsed time in seconds that the job ran. (decimal)
* `job_explanation`: A status field to indicate the state of the job if it wasn&#39;t able to run and capture stdout (string)
* `can_approve_or_deny`:  (field)
* `approval_expiration`:  (field)
* `timed_out`:  (boolean)



## Sorting

To specify that workflow approvals are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiWorkflowApprovalsWorkflowApprovalsListRequest
 */
func (a *WorkflowApprovalsApiService) WorkflowApprovalsWorkflowApprovalsList(ctx _context.Context) ApiWorkflowApprovalsWorkflowApprovalsListRequest {
	return ApiWorkflowApprovalsWorkflowApprovalsListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *WorkflowApprovalsApiService) WorkflowApprovalsWorkflowApprovalsListExecute(r ApiWorkflowApprovalsWorkflowApprovalsListRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowApprovalsApiService.WorkflowApprovalsWorkflowApprovalsList")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/workflow_approvals/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkflowApprovalsWorkflowApprovalsReadRequest struct {
	ctx _context.Context
	ApiService *WorkflowApprovalsApiService
	id string
	search *string
}

func (r ApiWorkflowApprovalsWorkflowApprovalsReadRequest) Search(search string) ApiWorkflowApprovalsWorkflowApprovalsReadRequest {
	r.search = &search
	return r
}

func (r ApiWorkflowApprovalsWorkflowApprovalsReadRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkflowApprovalsWorkflowApprovalsReadExecute(r)
}

/*
 * WorkflowApprovalsWorkflowApprovalsRead  Retrieve a Workflow Approval
 * 
Make GET request to this resource to retrieve a single workflow approval
record containing the following fields:

* `id`: Database ID for this workflow approval. (integer)
* `type`: Data type for this workflow approval. (choice)
* `url`: URL for this workflow approval. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this workflow approval was created. (datetime)
* `modified`: Timestamp when this workflow approval was last modified. (datetime)
* `name`: Name of this workflow approval. (string)
* `description`: Optional description of this workflow approval. (string)
* `unified_job_template`:  (id)
* `launch_type`:  (choice)
    - `manual`: Manual
    - `relaunch`: Relaunch
    - `callback`: Callback
    - `scheduled`: Scheduled
    - `dependency`: Dependency
    - `workflow`: Workflow
    - `webhook`: Webhook
    - `sync`: Sync
    - `scm`: SCM Update
* `status`:  (choice)
    - `new`: New
    - `pending`: Pending
    - `waiting`: Waiting
    - `running`: Running
    - `successful`: Successful
    - `failed`: Failed
    - `error`: Error
    - `canceled`: Canceled
* `failed`:  (boolean)
* `started`: The date and time the job was queued for starting. (datetime)
* `finished`: The date and time the job finished execution. (datetime)
* `canceled_on`: The date and time when the cancel request was sent. (datetime)
* `elapsed`: Elapsed time in seconds that the job ran. (decimal)
* `job_args`:  (string)
* `job_cwd`:  (string)
* `job_env`:  (json)
* `job_explanation`: A status field to indicate the state of the job if it wasn&#39;t able to run and capture stdout (string)
* `result_traceback`:  (string)
* `event_processing_finished`: Indicates whether all of the events generated by this unified job have been saved to the database. (boolean)
* `can_approve_or_deny`:  (field)
* `approval_expiration`:  (field)
* `timed_out`:  (boolean)
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiWorkflowApprovalsWorkflowApprovalsReadRequest
 */
func (a *WorkflowApprovalsApiService) WorkflowApprovalsWorkflowApprovalsRead(ctx _context.Context, id string) ApiWorkflowApprovalsWorkflowApprovalsReadRequest {
	return ApiWorkflowApprovalsWorkflowApprovalsReadRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *WorkflowApprovalsApiService) WorkflowApprovalsWorkflowApprovalsReadExecute(r ApiWorkflowApprovalsWorkflowApprovalsReadRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowApprovalsApiService.WorkflowApprovalsWorkflowApprovalsRead")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/workflow_approvals/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")) , -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
