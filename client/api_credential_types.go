/*
 * Ansible Tower API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version:
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// CredentialTypesApiService CredentialTypesApi service
type CredentialTypesApiService service

type ApiCredentialTypesCredentialTypesActivityStreamListRequest struct {
	ctx        _context.Context
	ApiService *CredentialTypesApiService
	id         string
	page       *int32
	pageSize   *int32
	search     *string
}

func (r ApiCredentialTypesCredentialTypesActivityStreamListRequest) Page(page int32) ApiCredentialTypesCredentialTypesActivityStreamListRequest {
	r.page = &page
	return r
}
func (r ApiCredentialTypesCredentialTypesActivityStreamListRequest) PageSize(pageSize int32) ApiCredentialTypesCredentialTypesActivityStreamListRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiCredentialTypesCredentialTypesActivityStreamListRequest) Search(search string) ApiCredentialTypesCredentialTypesActivityStreamListRequest {
	r.search = &search
	return r
}

func (r ApiCredentialTypesCredentialTypesActivityStreamListRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.CredentialTypesCredentialTypesActivityStreamListExecute(r)
}

/*
 * CredentialTypesCredentialTypesActivityStreamList  List Activity Streams for a Credential Type
 *
Make a GET request to this resource to retrieve a list of
activity streams associated with the selected
credential type.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of activity streams
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more activity stream records.

## Results

Each activity stream data structure includes the following fields:

* `id`: Database ID for this activity stream. (integer)
* `type`: Data type for this activity stream. (choice)
* `url`: URL for this activity stream. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `timestamp`:  (datetime)
* `operation`: The action taken with respect to the given object(s). (choice)
    - `create`: Entity Created
    - `update`: Entity Updated
    - `delete`: Entity Deleted
    - `associate`: Entity Associated with another Entity
    - `disassociate`: Entity was Disassociated with another Entity
* `changes`: A summary of the new and changed values when an object is created, updated, or deleted (json)
* `object1`: For create, update, and delete events this is the object type that was affected. For associate and disassociate events this is the object type associated or disassociated with object2. (string)
* `object2`: Unpopulated for create, update, and delete events. For associate and disassociate events this is the object type that object1 is being associated with. (string)
* `object_association`: When present, shows the field name of the role or relationship that changed. (field)
* `action_node`: The cluster node the activity took place on. (string)
* `object_type`: When present, shows the model on which the role or relationship was defined. (field)



## Sorting

To specify that activity streams are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiCredentialTypesCredentialTypesActivityStreamListRequest
*/
func (a *CredentialTypesApiService) CredentialTypesCredentialTypesActivityStreamList(ctx _context.Context, id string) ApiCredentialTypesCredentialTypesActivityStreamListRequest {
	return ApiCredentialTypesCredentialTypesActivityStreamListRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

/*
 * Execute executes the request
 */
func (a *CredentialTypesApiService) CredentialTypesCredentialTypesActivityStreamListExecute(r ApiCredentialTypesCredentialTypesActivityStreamListRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CredentialTypesApiService.CredentialTypesCredentialTypesActivityStreamList")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/credential_types/{id}/activity_stream/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCredentialTypesCredentialTypesCreateRequest struct {
	ctx        _context.Context
	ApiService *CredentialTypesApiService
	data       *map[string]interface{}
}

func (r ApiCredentialTypesCredentialTypesCreateRequest) Data(data map[string]interface{}) ApiCredentialTypesCredentialTypesCreateRequest {
	r.data = &data
	return r
}

func (r ApiCredentialTypesCredentialTypesCreateRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.CredentialTypesCredentialTypesCreateExecute(r)
}

/*
 * CredentialTypesCredentialTypesCreate  Create a Credential Type
 *
Make a POST request to this resource with the following credential type
fields to create a new credential type:









* `name`: Name of this credential type. (string, required)
* `description`: Optional description of this credential type. (string, default=`""`)
* `kind`:  (choice, required)
    - `net`: Network
    - `cloud`: Cloud


* `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the Ansible Tower documentation for example syntax. (json, default=`{}`)
* `injectors`: Enter injectors using either JSON or YAML syntax. Refer to the Ansible Tower documentation for example syntax. (json, default=`{}`)
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiCredentialTypesCredentialTypesCreateRequest
*/
func (a *CredentialTypesApiService) CredentialTypesCredentialTypesCreate(ctx _context.Context) ApiCredentialTypesCredentialTypesCreateRequest {
	return ApiCredentialTypesCredentialTypesCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CredentialTypesApiService) CredentialTypesCredentialTypesCreateExecute(r ApiCredentialTypesCredentialTypesCreateRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CredentialTypesApiService.CredentialTypesCredentialTypesCreate")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/credential_types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.data
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCredentialTypesCredentialTypesCredentialsCreateRequest struct {
	ctx        _context.Context
	ApiService *CredentialTypesApiService
	id         string
	data       *InlineObject3
}

func (r ApiCredentialTypesCredentialTypesCredentialsCreateRequest) Data(data InlineObject3) ApiCredentialTypesCredentialTypesCredentialsCreateRequest {
	r.data = &data
	return r
}

func (r ApiCredentialTypesCredentialTypesCredentialsCreateRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.CredentialTypesCredentialTypesCredentialsCreateExecute(r)
}

/*
 * CredentialTypesCredentialTypesCredentialsCreate  Create a Credential for a Credential Type
 *
Make a POST request to this resource with the following credential
fields to create a new credential associated with this
credential type.









* `name`: Name of this credential. (string, required)
* `description`: Optional description of this credential. (string, default=`""`)
* `organization`:  (id, default=`None`)
* `credential_type`: Specify the type of credential you want to create. Refer to the Ansible Tower documentation for details on each type. (id, required)

* `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the Ansible Tower documentation for example syntax. (json, default=`{}`)
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiCredentialTypesCredentialTypesCredentialsCreateRequest
*/
func (a *CredentialTypesApiService) CredentialTypesCredentialTypesCredentialsCreate(ctx _context.Context, id string) ApiCredentialTypesCredentialTypesCredentialsCreateRequest {
	return ApiCredentialTypesCredentialTypesCredentialsCreateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

/*
 * Execute executes the request
 */
func (a *CredentialTypesApiService) CredentialTypesCredentialTypesCredentialsCreateExecute(r ApiCredentialTypesCredentialTypesCredentialsCreateRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CredentialTypesApiService.CredentialTypesCredentialTypesCredentialsCreate")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/credential_types/{id}/credentials/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.data
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCredentialTypesCredentialTypesCredentialsListRequest struct {
	ctx        _context.Context
	ApiService *CredentialTypesApiService
	id         string
	page       *int32
	pageSize   *int32
	search     *string
}

func (r ApiCredentialTypesCredentialTypesCredentialsListRequest) Page(page int32) ApiCredentialTypesCredentialTypesCredentialsListRequest {
	r.page = &page
	return r
}
func (r ApiCredentialTypesCredentialTypesCredentialsListRequest) PageSize(pageSize int32) ApiCredentialTypesCredentialTypesCredentialsListRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiCredentialTypesCredentialTypesCredentialsListRequest) Search(search string) ApiCredentialTypesCredentialTypesCredentialsListRequest {
	r.search = &search
	return r
}

func (r ApiCredentialTypesCredentialTypesCredentialsListRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.CredentialTypesCredentialTypesCredentialsListExecute(r)
}

/*
 * CredentialTypesCredentialTypesCredentialsList  List Credentials for a Credential Type
 *
Make a GET request to this resource to retrieve a list of
credentials associated with the selected
credential type.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of credentials
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more credential records.

## Results

Each credential data structure includes the following fields:

* `id`: Database ID for this credential. (integer)
* `type`: Data type for this credential. (choice)
* `url`: URL for this credential. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this credential was created. (datetime)
* `modified`: Timestamp when this credential was last modified. (datetime)
* `name`: Name of this credential. (string)
* `description`: Optional description of this credential. (string)
* `organization`:  (id)
* `credential_type`: Specify the type of credential you want to create. Refer to the Ansible Tower documentation for details on each type. (id)
* `managed_by_tower`:  (boolean)
* `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the Ansible Tower documentation for example syntax. (json)
* `kind`:  (field)
* `cloud`:  (field)
* `kubernetes`:  (field)



## Sorting

To specify that credentials are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiCredentialTypesCredentialTypesCredentialsListRequest
*/
func (a *CredentialTypesApiService) CredentialTypesCredentialTypesCredentialsList(ctx _context.Context, id string) ApiCredentialTypesCredentialTypesCredentialsListRequest {
	return ApiCredentialTypesCredentialTypesCredentialsListRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

/*
 * Execute executes the request
 */
func (a *CredentialTypesApiService) CredentialTypesCredentialTypesCredentialsListExecute(r ApiCredentialTypesCredentialTypesCredentialsListRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CredentialTypesApiService.CredentialTypesCredentialTypesCredentialsList")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/credential_types/{id}/credentials/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCredentialTypesCredentialTypesDeleteRequest struct {
	ctx        _context.Context
	ApiService *CredentialTypesApiService
	id         string
	search     *string
}

func (r ApiCredentialTypesCredentialTypesDeleteRequest) Search(search string) ApiCredentialTypesCredentialTypesDeleteRequest {
	r.search = &search
	return r
}

func (r ApiCredentialTypesCredentialTypesDeleteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.CredentialTypesCredentialTypesDeleteExecute(r)
}

/*
 * CredentialTypesCredentialTypesDelete  Delete a Credential Type
 *
Make a DELETE request to this resource to delete this credential type.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiCredentialTypesCredentialTypesDeleteRequest
*/
func (a *CredentialTypesApiService) CredentialTypesCredentialTypesDelete(ctx _context.Context, id string) ApiCredentialTypesCredentialTypesDeleteRequest {
	return ApiCredentialTypesCredentialTypesDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

/*
 * Execute executes the request
 */
func (a *CredentialTypesApiService) CredentialTypesCredentialTypesDeleteExecute(r ApiCredentialTypesCredentialTypesDeleteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CredentialTypesApiService.CredentialTypesCredentialTypesDelete")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/credential_types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCredentialTypesCredentialTypesListRequest struct {
	ctx        _context.Context
	ApiService *CredentialTypesApiService
	page       *int32
	pageSize   *int32
	search     *string
}

func (r ApiCredentialTypesCredentialTypesListRequest) Page(page int32) ApiCredentialTypesCredentialTypesListRequest {
	r.page = &page
	return r
}
func (r ApiCredentialTypesCredentialTypesListRequest) PageSize(pageSize int32) ApiCredentialTypesCredentialTypesListRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiCredentialTypesCredentialTypesListRequest) Search(search string) ApiCredentialTypesCredentialTypesListRequest {
	r.search = &search
	return r
}

func (r ApiCredentialTypesCredentialTypesListRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.CredentialTypesCredentialTypesListExecute(r)
}

/*
 * CredentialTypesCredentialTypesList  List Credential Types
 *
Make a GET request to this resource to retrieve the list of
credential types.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of credential types
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more credential type records.

## Results

Each credential type data structure includes the following fields:

* `id`: Database ID for this credential type. (integer)
* `type`: Data type for this credential type. (choice)
* `url`: URL for this credential type. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this credential type was created. (datetime)
* `modified`: Timestamp when this credential type was last modified. (datetime)
* `name`: Name of this credential type. (string)
* `description`: Optional description of this credential type. (string)
* `kind`:  (choice)
    - `ssh`: Machine
    - `vault`: Vault
    - `net`: Network
    - `scm`: Source Control
    - `cloud`: Cloud
    - `token`: Personal Access Token
    - `insights`: Insights
    - `external`: External
    - `kubernetes`: Kubernetes
    - `galaxy`: Galaxy/Automation Hub
* `namespace`:  (string)
* `managed_by_tower`:  (boolean)
* `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the Ansible Tower documentation for example syntax. (json)
* `injectors`: Enter injectors using either JSON or YAML syntax. Refer to the Ansible Tower documentation for example syntax. (json)



## Sorting

To specify that credential types are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiCredentialTypesCredentialTypesListRequest
*/
func (a *CredentialTypesApiService) CredentialTypesCredentialTypesList(ctx _context.Context) ApiCredentialTypesCredentialTypesListRequest {
	return ApiCredentialTypesCredentialTypesListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CredentialTypesApiService) CredentialTypesCredentialTypesListExecute(r ApiCredentialTypesCredentialTypesListRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CredentialTypesApiService.CredentialTypesCredentialTypesList")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/credential_types/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCredentialTypesCredentialTypesPartialUpdateRequest struct {
	ctx        _context.Context
	ApiService *CredentialTypesApiService
	id         string
	search     *string
	data       *map[string]interface{}
}

func (r ApiCredentialTypesCredentialTypesPartialUpdateRequest) Search(search string) ApiCredentialTypesCredentialTypesPartialUpdateRequest {
	r.search = &search
	return r
}
func (r ApiCredentialTypesCredentialTypesPartialUpdateRequest) Data(data map[string]interface{}) ApiCredentialTypesCredentialTypesPartialUpdateRequest {
	r.data = &data
	return r
}

func (r ApiCredentialTypesCredentialTypesPartialUpdateRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.CredentialTypesCredentialTypesPartialUpdateExecute(r)
}

/*
 * CredentialTypesCredentialTypesPartialUpdate  Update a Credential Type
 *
Make a PUT or PATCH request to this resource to update this
credential type.  The following fields may be modified:









* `name`: Name of this credential type. (string, required)
* `description`: Optional description of this credential type. (string, default=`""`)
* `kind`:  (choice, required)
    - `net`: Network
    - `cloud`: Cloud


* `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the Ansible Tower documentation for example syntax. (json, default=`{}`)
* `injectors`: Enter injectors using either JSON or YAML syntax. Refer to the Ansible Tower documentation for example syntax. (json, default=`{}`)








For a PATCH request, include only the fields that are being modified.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiCredentialTypesCredentialTypesPartialUpdateRequest
*/
func (a *CredentialTypesApiService) CredentialTypesCredentialTypesPartialUpdate(ctx _context.Context, id string) ApiCredentialTypesCredentialTypesPartialUpdateRequest {
	return ApiCredentialTypesCredentialTypesPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

/*
 * Execute executes the request
 */
func (a *CredentialTypesApiService) CredentialTypesCredentialTypesPartialUpdateExecute(r ApiCredentialTypesCredentialTypesPartialUpdateRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CredentialTypesApiService.CredentialTypesCredentialTypesPartialUpdate")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/credential_types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.data
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCredentialTypesCredentialTypesReadRequest struct {
	ctx        _context.Context
	ApiService *CredentialTypesApiService
	id         string
	search     *string
}

func (r ApiCredentialTypesCredentialTypesReadRequest) Search(search string) ApiCredentialTypesCredentialTypesReadRequest {
	r.search = &search
	return r
}

func (r ApiCredentialTypesCredentialTypesReadRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.CredentialTypesCredentialTypesReadExecute(r)
}

/*
 * CredentialTypesCredentialTypesRead  Retrieve a Credential Type
 *
Make GET request to this resource to retrieve a single credential type
record containing the following fields:

* `id`: Database ID for this credential type. (integer)
* `type`: Data type for this credential type. (choice)
* `url`: URL for this credential type. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this credential type was created. (datetime)
* `modified`: Timestamp when this credential type was last modified. (datetime)
* `name`: Name of this credential type. (string)
* `description`: Optional description of this credential type. (string)
* `kind`:  (choice)
    - `ssh`: Machine
    - `vault`: Vault
    - `net`: Network
    - `scm`: Source Control
    - `cloud`: Cloud
    - `token`: Personal Access Token
    - `insights`: Insights
    - `external`: External
    - `kubernetes`: Kubernetes
    - `galaxy`: Galaxy/Automation Hub
* `namespace`:  (string)
* `managed_by_tower`:  (boolean)
* `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the Ansible Tower documentation for example syntax. (json)
* `injectors`: Enter injectors using either JSON or YAML syntax. Refer to the Ansible Tower documentation for example syntax. (json)
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiCredentialTypesCredentialTypesReadRequest
*/
func (a *CredentialTypesApiService) CredentialTypesCredentialTypesRead(ctx _context.Context, id string) ApiCredentialTypesCredentialTypesReadRequest {
	return ApiCredentialTypesCredentialTypesReadRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

/*
 * Execute executes the request
 */
func (a *CredentialTypesApiService) CredentialTypesCredentialTypesReadExecute(r ApiCredentialTypesCredentialTypesReadRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CredentialTypesApiService.CredentialTypesCredentialTypesRead")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/credential_types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCredentialTypesCredentialTypesTestCreateRequest struct {
	ctx        _context.Context
	ApiService *CredentialTypesApiService
	id         string
	data       *map[string]interface{}
}

func (r ApiCredentialTypesCredentialTypesTestCreateRequest) Data(data map[string]interface{}) ApiCredentialTypesCredentialTypesTestCreateRequest {
	r.data = &data
	return r
}

func (r ApiCredentialTypesCredentialTypesTestCreateRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.CredentialTypesCredentialTypesTestCreateExecute(r)
}

/*
 * CredentialTypesCredentialTypesTestCreate  Retrieve a Credential Type
 *
Make GET request to this resource to retrieve a single credential type
record containing the following fields:
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiCredentialTypesCredentialTypesTestCreateRequest
*/
func (a *CredentialTypesApiService) CredentialTypesCredentialTypesTestCreate(ctx _context.Context, id string) ApiCredentialTypesCredentialTypesTestCreateRequest {
	return ApiCredentialTypesCredentialTypesTestCreateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

/*
 * Execute executes the request
 */
func (a *CredentialTypesApiService) CredentialTypesCredentialTypesTestCreateExecute(r ApiCredentialTypesCredentialTypesTestCreateRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CredentialTypesApiService.CredentialTypesCredentialTypesTestCreate")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/credential_types/{id}/test/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.data
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCredentialTypesCredentialTypesTestReadRequest struct {
	ctx        _context.Context
	ApiService *CredentialTypesApiService
	id         string
	search     *string
}

func (r ApiCredentialTypesCredentialTypesTestReadRequest) Search(search string) ApiCredentialTypesCredentialTypesTestReadRequest {
	r.search = &search
	return r
}

func (r ApiCredentialTypesCredentialTypesTestReadRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.CredentialTypesCredentialTypesTestReadExecute(r)
}

/*
 * CredentialTypesCredentialTypesTestRead  Retrieve a Credential Type
 *
Make GET request to this resource to retrieve a single credential type
record containing the following fields:
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiCredentialTypesCredentialTypesTestReadRequest
*/
func (a *CredentialTypesApiService) CredentialTypesCredentialTypesTestRead(ctx _context.Context, id string) ApiCredentialTypesCredentialTypesTestReadRequest {
	return ApiCredentialTypesCredentialTypesTestReadRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

/*
 * Execute executes the request
 */
func (a *CredentialTypesApiService) CredentialTypesCredentialTypesTestReadExecute(r ApiCredentialTypesCredentialTypesTestReadRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CredentialTypesApiService.CredentialTypesCredentialTypesTestRead")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/credential_types/{id}/test/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCredentialTypesCredentialTypesUpdateRequest struct {
	ctx        _context.Context
	ApiService *CredentialTypesApiService
	id         string
	search     *string
	data       *InlineObject2
}

func (r ApiCredentialTypesCredentialTypesUpdateRequest) Search(search string) ApiCredentialTypesCredentialTypesUpdateRequest {
	r.search = &search
	return r
}
func (r ApiCredentialTypesCredentialTypesUpdateRequest) Data(data InlineObject2) ApiCredentialTypesCredentialTypesUpdateRequest {
	r.data = &data
	return r
}

func (r ApiCredentialTypesCredentialTypesUpdateRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.CredentialTypesCredentialTypesUpdateExecute(r)
}

/*
 * CredentialTypesCredentialTypesUpdate  Update a Credential Type
 *
Make a PUT or PATCH request to this resource to update this
credential type.  The following fields may be modified:









* `name`: Name of this credential type. (string, required)
* `description`: Optional description of this credential type. (string, default=`""`)
* `kind`:  (choice, required)
    - `net`: Network
    - `cloud`: Cloud


* `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the Ansible Tower documentation for example syntax. (json, default=`{}`)
* `injectors`: Enter injectors using either JSON or YAML syntax. Refer to the Ansible Tower documentation for example syntax. (json, default=`{}`)






For a PUT request, include **all** fields in the request.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiCredentialTypesCredentialTypesUpdateRequest
*/
func (a *CredentialTypesApiService) CredentialTypesCredentialTypesUpdate(ctx _context.Context, id string) ApiCredentialTypesCredentialTypesUpdateRequest {
	return ApiCredentialTypesCredentialTypesUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

/*
 * Execute executes the request
 */
func (a *CredentialTypesApiService) CredentialTypesCredentialTypesUpdateExecute(r ApiCredentialTypesCredentialTypesUpdateRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CredentialTypesApiService.CredentialTypesCredentialTypesUpdate")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/credential_types/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.data
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
