/*
 * Ansible Tower API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version:
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// InstanceGroupsApiService InstanceGroupsApi service
type InstanceGroupsApiService service

type ApiInstanceGroupsInstanceGroupsCreateRequest struct {
	ctx        _context.Context
	ApiService *InstanceGroupsApiService
	data       *InlineObject15
}

func (r ApiInstanceGroupsInstanceGroupsCreateRequest) Data(data InlineObject15) ApiInstanceGroupsInstanceGroupsCreateRequest {
	r.data = &data
	return r
}

func (r ApiInstanceGroupsInstanceGroupsCreateRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.InstanceGroupsInstanceGroupsCreateExecute(r)
}

/*
 * InstanceGroupsInstanceGroupsCreate  Create an Instance Group
 *
Make a POST request to this resource with the following instance group
fields to create a new instance group:






* `name`: Name of this instance group. (string, required)













* `credential`:  (id, default=``)
* `policy_instance_percentage`: Minimum percentage of all instances that will be automatically assigned to this group when new instances come online. (integer, default=`0`)
* `policy_instance_minimum`: Static minimum number of Instances that will be automatically assign to this group when new instances come online. (integer, default=`0`)
* `policy_instance_list`: List of exact-match Instances that will be assigned to this group (json, default=``)
* `pod_spec_override`:  (string, default=`""`)
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiInstanceGroupsInstanceGroupsCreateRequest
*/
func (a *InstanceGroupsApiService) InstanceGroupsInstanceGroupsCreate(ctx _context.Context) ApiInstanceGroupsInstanceGroupsCreateRequest {
	return ApiInstanceGroupsInstanceGroupsCreateRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *InstanceGroupsApiService) InstanceGroupsInstanceGroupsCreateExecute(r ApiInstanceGroupsInstanceGroupsCreateRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstanceGroupsApiService.InstanceGroupsInstanceGroupsCreate")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instance_groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.data
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiInstanceGroupsInstanceGroupsDeleteRequest struct {
	ctx        _context.Context
	ApiService *InstanceGroupsApiService
	id         string
	search     *string
}

func (r ApiInstanceGroupsInstanceGroupsDeleteRequest) Search(search string) ApiInstanceGroupsInstanceGroupsDeleteRequest {
	r.search = &search
	return r
}

func (r ApiInstanceGroupsInstanceGroupsDeleteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.InstanceGroupsInstanceGroupsDeleteExecute(r)
}

/*
 * InstanceGroupsInstanceGroupsDelete  Delete an Instance Group
 *
Make a DELETE request to this resource to delete this instance group.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiInstanceGroupsInstanceGroupsDeleteRequest
*/
func (a *InstanceGroupsApiService) InstanceGroupsInstanceGroupsDelete(ctx _context.Context, id string) ApiInstanceGroupsInstanceGroupsDeleteRequest {
	return ApiInstanceGroupsInstanceGroupsDeleteRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

/*
 * Execute executes the request
 */
func (a *InstanceGroupsApiService) InstanceGroupsInstanceGroupsDeleteExecute(r ApiInstanceGroupsInstanceGroupsDeleteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstanceGroupsApiService.InstanceGroupsInstanceGroupsDelete")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instance_groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiInstanceGroupsInstanceGroupsInstancesCreateRequest struct {
	ctx        _context.Context
	ApiService *InstanceGroupsApiService
	id         string
	data       *InlineObject17
}

func (r ApiInstanceGroupsInstanceGroupsInstancesCreateRequest) Data(data InlineObject17) ApiInstanceGroupsInstanceGroupsInstancesCreateRequest {
	r.data = &data
	return r
}

func (r ApiInstanceGroupsInstanceGroupsInstancesCreateRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.InstanceGroupsInstanceGroupsInstancesCreateExecute(r)
}

/*
 * InstanceGroupsInstanceGroupsInstancesCreate  Create an Instance for an Instance Group
 *
Make a POST request to this resource with the following instance
fields to create a new instance associated with this
instance group.










* `capacity_adjustment`:  (decimal, default=`1`)










* `enabled`:  (boolean, default=`True`)
* `managed_by_policy`:  (boolean, default=`True`)








# Add Instances for an Instance Group:

Make a POST request to this resource with only an `id` field to associate an
existing instance with this instance group.

# Remove Instances from this Instance Group:

Make a POST request to this resource with `id` and `disassociate` fields to
remove the instance from this instance group
 without deleting the instance.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiInstanceGroupsInstanceGroupsInstancesCreateRequest
*/
func (a *InstanceGroupsApiService) InstanceGroupsInstanceGroupsInstancesCreate(ctx _context.Context, id string) ApiInstanceGroupsInstanceGroupsInstancesCreateRequest {
	return ApiInstanceGroupsInstanceGroupsInstancesCreateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

/*
 * Execute executes the request
 */
func (a *InstanceGroupsApiService) InstanceGroupsInstanceGroupsInstancesCreateExecute(r ApiInstanceGroupsInstanceGroupsInstancesCreateRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstanceGroupsApiService.InstanceGroupsInstanceGroupsInstancesCreate")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instance_groups/{id}/instances/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.data
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiInstanceGroupsInstanceGroupsInstancesListRequest struct {
	ctx        _context.Context
	ApiService *InstanceGroupsApiService
	id         string
	page       *int32
	pageSize   *int32
	search     *string
}

func (r ApiInstanceGroupsInstanceGroupsInstancesListRequest) Page(page int32) ApiInstanceGroupsInstanceGroupsInstancesListRequest {
	r.page = &page
	return r
}
func (r ApiInstanceGroupsInstanceGroupsInstancesListRequest) PageSize(pageSize int32) ApiInstanceGroupsInstanceGroupsInstancesListRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiInstanceGroupsInstanceGroupsInstancesListRequest) Search(search string) ApiInstanceGroupsInstanceGroupsInstancesListRequest {
	r.search = &search
	return r
}

func (r ApiInstanceGroupsInstanceGroupsInstancesListRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.InstanceGroupsInstanceGroupsInstancesListExecute(r)
}

/*
 * InstanceGroupsInstanceGroupsInstancesList  List Instances for an Instance Group
 *
Make a GET request to this resource to retrieve a list of
instances associated with the selected
instance group.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of instances
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more instance records.

## Results

Each instance data structure includes the following fields:

* `id`: Database ID for this instance. (integer)
* `type`: Data type for this instance. (choice)
* `url`: URL for this instance. (string)
* `related`: Data structure with URLs of related resources. (object)
* `uuid`:  (string)
* `hostname`:  (string)
* `created`: Timestamp when this instance was created. (datetime)
* `modified`: Timestamp when this instance was last modified. (datetime)
* `capacity_adjustment`:  (decimal)
* `version`:  (string)
* `capacity`:  (integer)
* `consumed_capacity`:  (field)
* `percent_capacity_remaining`:  (field)
* `jobs_running`: Count of jobs in the running or waiting state that are targeted for this instance (integer)
* `jobs_total`: Count of all jobs that target this instance (integer)
* `cpu`:  (integer)
* `memory`:  (integer)
* `cpu_capacity`:  (integer)
* `mem_capacity`:  (integer)
* `enabled`:  (boolean)
* `managed_by_policy`:  (boolean)



## Sorting

To specify that instances are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiInstanceGroupsInstanceGroupsInstancesListRequest
*/
func (a *InstanceGroupsApiService) InstanceGroupsInstanceGroupsInstancesList(ctx _context.Context, id string) ApiInstanceGroupsInstanceGroupsInstancesListRequest {
	return ApiInstanceGroupsInstanceGroupsInstancesListRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

/*
 * Execute executes the request
 */
func (a *InstanceGroupsApiService) InstanceGroupsInstanceGroupsInstancesListExecute(r ApiInstanceGroupsInstanceGroupsInstancesListRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstanceGroupsApiService.InstanceGroupsInstanceGroupsInstancesList")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instance_groups/{id}/instances/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiInstanceGroupsInstanceGroupsJobsListRequest struct {
	ctx        _context.Context
	ApiService *InstanceGroupsApiService
	id         string
	page       *int32
	pageSize   *int32
	search     *string
}

func (r ApiInstanceGroupsInstanceGroupsJobsListRequest) Page(page int32) ApiInstanceGroupsInstanceGroupsJobsListRequest {
	r.page = &page
	return r
}
func (r ApiInstanceGroupsInstanceGroupsJobsListRequest) PageSize(pageSize int32) ApiInstanceGroupsInstanceGroupsJobsListRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiInstanceGroupsInstanceGroupsJobsListRequest) Search(search string) ApiInstanceGroupsInstanceGroupsJobsListRequest {
	r.search = &search
	return r
}

func (r ApiInstanceGroupsInstanceGroupsJobsListRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.InstanceGroupsInstanceGroupsJobsListExecute(r)
}

/*
 * InstanceGroupsInstanceGroupsJobsList  List Unified Jobs for an Instance Group
 *
Make a GET request to this resource to retrieve a list of
unified jobs associated with the selected
instance group.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of unified jobs
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more unified job records.

## Results

Each unified job data structure includes the following fields:

* `id`: Database ID for this unified job. (integer)
* `type`: Data type for this unified job. (choice)
* `url`: URL for this unified job. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this unified job was created. (datetime)
* `modified`: Timestamp when this unified job was last modified. (datetime)
* `name`: Name of this unified job. (string)
* `description`: Optional description of this unified job. (string)
* `unified_job_template`:  (id)
* `launch_type`:  (choice)
    - `manual`: Manual
    - `relaunch`: Relaunch
    - `callback`: Callback
    - `scheduled`: Scheduled
    - `dependency`: Dependency
    - `workflow`: Workflow
    - `webhook`: Webhook
    - `sync`: Sync
    - `scm`: SCM Update
* `status`:  (choice)
    - `new`: New
    - `pending`: Pending
    - `waiting`: Waiting
    - `running`: Running
    - `successful`: Successful
    - `failed`: Failed
    - `error`: Error
    - `canceled`: Canceled
* `failed`:  (boolean)
* `started`: The date and time the job was queued for starting. (datetime)
* `finished`: The date and time the job finished execution. (datetime)
* `canceled_on`: The date and time when the cancel request was sent. (datetime)
* `elapsed`: Elapsed time in seconds that the job ran. (decimal)
* `job_explanation`: A status field to indicate the state of the job if it wasn&#39;t able to run and capture stdout (string)
* `execution_node`: The node the job executed on. (string)
* `controller_node`: The instance that managed the isolated execution environment. (string)



## Sorting

To specify that unified jobs are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiInstanceGroupsInstanceGroupsJobsListRequest
*/
func (a *InstanceGroupsApiService) InstanceGroupsInstanceGroupsJobsList(ctx _context.Context, id string) ApiInstanceGroupsInstanceGroupsJobsListRequest {
	return ApiInstanceGroupsInstanceGroupsJobsListRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

/*
 * Execute executes the request
 */
func (a *InstanceGroupsApiService) InstanceGroupsInstanceGroupsJobsListExecute(r ApiInstanceGroupsInstanceGroupsJobsListRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstanceGroupsApiService.InstanceGroupsInstanceGroupsJobsList")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instance_groups/{id}/jobs/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiInstanceGroupsInstanceGroupsListRequest struct {
	ctx        _context.Context
	ApiService *InstanceGroupsApiService
	page       *int32
	pageSize   *int32
	search     *string
}

func (r ApiInstanceGroupsInstanceGroupsListRequest) Page(page int32) ApiInstanceGroupsInstanceGroupsListRequest {
	r.page = &page
	return r
}
func (r ApiInstanceGroupsInstanceGroupsListRequest) PageSize(pageSize int32) ApiInstanceGroupsInstanceGroupsListRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiInstanceGroupsInstanceGroupsListRequest) Search(search string) ApiInstanceGroupsInstanceGroupsListRequest {
	r.search = &search
	return r
}

func (r ApiInstanceGroupsInstanceGroupsListRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.InstanceGroupsInstanceGroupsListExecute(r)
}

/*
 * InstanceGroupsInstanceGroupsList  List Instance Groups
 *
Make a GET request to this resource to retrieve the list of
instance groups.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of instance groups
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more instance group records.

## Results

Each instance group data structure includes the following fields:

* `id`: Database ID for this instance group. (integer)
* `type`: Data type for this instance group. (choice)
* `url`: URL for this instance group. (string)
* `related`: Data structure with URLs of related resources. (object)
* `name`: Name of this instance group. (string)
* `created`: Timestamp when this instance group was created. (datetime)
* `modified`: Timestamp when this instance group was last modified. (datetime)
* `capacity`:  (field)
* `committed_capacity`:  (field)
* `consumed_capacity`:  (field)
* `percent_capacity_remaining`:  (field)
* `jobs_running`: Count of jobs in the running or waiting state that are targeted for this instance group (integer)
* `jobs_total`: Count of all jobs that target this instance group (integer)
* `instances`:  (field)
* `controller`: Instance Group to remotely control this group. (id)
* `is_controller`: Indicates whether instance group controls any other group (boolean)
* `is_isolated`: Indicates whether instances in this group are isolated.Isolated groups have a designated controller group. (boolean)
* `is_containerized`: Indicates whether instances in this group are containerized.Containerized groups have a designated Openshift or Kubernetes cluster. (boolean)
* `credential`:  (id)
* `policy_instance_percentage`: Minimum percentage of all instances that will be automatically assigned to this group when new instances come online. (integer)
* `policy_instance_minimum`: Static minimum number of Instances that will be automatically assign to this group when new instances come online. (integer)
* `policy_instance_list`: List of exact-match Instances that will be assigned to this group (json)
* `pod_spec_override`:  (string)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)



## Sorting

To specify that instance groups are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiInstanceGroupsInstanceGroupsListRequest
*/
func (a *InstanceGroupsApiService) InstanceGroupsInstanceGroupsList(ctx _context.Context) ApiInstanceGroupsInstanceGroupsListRequest {
	return ApiInstanceGroupsInstanceGroupsListRequest{
		ApiService: a,
		ctx:        ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *InstanceGroupsApiService) InstanceGroupsInstanceGroupsListExecute(r ApiInstanceGroupsInstanceGroupsListRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstanceGroupsApiService.InstanceGroupsInstanceGroupsList")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instance_groups/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiInstanceGroupsInstanceGroupsPartialUpdateRequest struct {
	ctx        _context.Context
	ApiService *InstanceGroupsApiService
	id         string
	search     *string
	data       *map[string]interface{}
}

func (r ApiInstanceGroupsInstanceGroupsPartialUpdateRequest) Search(search string) ApiInstanceGroupsInstanceGroupsPartialUpdateRequest {
	r.search = &search
	return r
}
func (r ApiInstanceGroupsInstanceGroupsPartialUpdateRequest) Data(data map[string]interface{}) ApiInstanceGroupsInstanceGroupsPartialUpdateRequest {
	r.data = &data
	return r
}

func (r ApiInstanceGroupsInstanceGroupsPartialUpdateRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.InstanceGroupsInstanceGroupsPartialUpdateExecute(r)
}

/*
 * InstanceGroupsInstanceGroupsPartialUpdate  Update an Instance Group
 *
Make a PUT or PATCH request to this resource to update this
instance group.  The following fields may be modified:






* `name`: Name of this instance group. (string, required)













* `credential`:  (id, default=``)
* `policy_instance_percentage`: Minimum percentage of all instances that will be automatically assigned to this group when new instances come online. (integer, default=`0`)
* `policy_instance_minimum`: Static minimum number of Instances that will be automatically assign to this group when new instances come online. (integer, default=`0`)
* `policy_instance_list`: List of exact-match Instances that will be assigned to this group (json, default=``)
* `pod_spec_override`:  (string, default=`""`)









For a PATCH request, include only the fields that are being modified.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiInstanceGroupsInstanceGroupsPartialUpdateRequest
*/
func (a *InstanceGroupsApiService) InstanceGroupsInstanceGroupsPartialUpdate(ctx _context.Context, id string) ApiInstanceGroupsInstanceGroupsPartialUpdateRequest {
	return ApiInstanceGroupsInstanceGroupsPartialUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

/*
 * Execute executes the request
 */
func (a *InstanceGroupsApiService) InstanceGroupsInstanceGroupsPartialUpdateExecute(r ApiInstanceGroupsInstanceGroupsPartialUpdateRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstanceGroupsApiService.InstanceGroupsInstanceGroupsPartialUpdate")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instance_groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.data
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiInstanceGroupsInstanceGroupsReadRequest struct {
	ctx        _context.Context
	ApiService *InstanceGroupsApiService
	id         string
	search     *string
}

func (r ApiInstanceGroupsInstanceGroupsReadRequest) Search(search string) ApiInstanceGroupsInstanceGroupsReadRequest {
	r.search = &search
	return r
}

func (r ApiInstanceGroupsInstanceGroupsReadRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.InstanceGroupsInstanceGroupsReadExecute(r)
}

/*
 * InstanceGroupsInstanceGroupsRead  Retrieve an Instance Group
 *
Make GET request to this resource to retrieve a single instance group
record containing the following fields:

* `id`: Database ID for this instance group. (integer)
* `type`: Data type for this instance group. (choice)
* `url`: URL for this instance group. (string)
* `related`: Data structure with URLs of related resources. (object)
* `name`: Name of this instance group. (string)
* `created`: Timestamp when this instance group was created. (datetime)
* `modified`: Timestamp when this instance group was last modified. (datetime)
* `capacity`:  (field)
* `committed_capacity`:  (field)
* `consumed_capacity`:  (field)
* `percent_capacity_remaining`:  (field)
* `jobs_running`: Count of jobs in the running or waiting state that are targeted for this instance group (integer)
* `jobs_total`: Count of all jobs that target this instance group (integer)
* `instances`:  (field)
* `controller`: Instance Group to remotely control this group. (id)
* `is_controller`: Indicates whether instance group controls any other group (boolean)
* `is_isolated`: Indicates whether instances in this group are isolated.Isolated groups have a designated controller group. (boolean)
* `is_containerized`: Indicates whether instances in this group are containerized.Containerized groups have a designated Openshift or Kubernetes cluster. (boolean)
* `credential`:  (id)
* `policy_instance_percentage`: Minimum percentage of all instances that will be automatically assigned to this group when new instances come online. (integer)
* `policy_instance_minimum`: Static minimum number of Instances that will be automatically assign to this group when new instances come online. (integer)
* `policy_instance_list`: List of exact-match Instances that will be assigned to this group (json)
* `pod_spec_override`:  (string)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiInstanceGroupsInstanceGroupsReadRequest
*/
func (a *InstanceGroupsApiService) InstanceGroupsInstanceGroupsRead(ctx _context.Context, id string) ApiInstanceGroupsInstanceGroupsReadRequest {
	return ApiInstanceGroupsInstanceGroupsReadRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

/*
 * Execute executes the request
 */
func (a *InstanceGroupsApiService) InstanceGroupsInstanceGroupsReadExecute(r ApiInstanceGroupsInstanceGroupsReadRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstanceGroupsApiService.InstanceGroupsInstanceGroupsRead")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instance_groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiInstanceGroupsInstanceGroupsUpdateRequest struct {
	ctx        _context.Context
	ApiService *InstanceGroupsApiService
	id         string
	search     *string
	data       *InlineObject16
}

func (r ApiInstanceGroupsInstanceGroupsUpdateRequest) Search(search string) ApiInstanceGroupsInstanceGroupsUpdateRequest {
	r.search = &search
	return r
}
func (r ApiInstanceGroupsInstanceGroupsUpdateRequest) Data(data InlineObject16) ApiInstanceGroupsInstanceGroupsUpdateRequest {
	r.data = &data
	return r
}

func (r ApiInstanceGroupsInstanceGroupsUpdateRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.InstanceGroupsInstanceGroupsUpdateExecute(r)
}

/*
 * InstanceGroupsInstanceGroupsUpdate  Update an Instance Group
 *
Make a PUT or PATCH request to this resource to update this
instance group.  The following fields may be modified:






* `name`: Name of this instance group. (string, required)













* `credential`:  (id, default=``)
* `policy_instance_percentage`: Minimum percentage of all instances that will be automatically assigned to this group when new instances come online. (integer, default=`0`)
* `policy_instance_minimum`: Static minimum number of Instances that will be automatically assign to this group when new instances come online. (integer, default=`0`)
* `policy_instance_list`: List of exact-match Instances that will be assigned to this group (json, default=``)
* `pod_spec_override`:  (string, default=`""`)







For a PUT request, include **all** fields in the request.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiInstanceGroupsInstanceGroupsUpdateRequest
*/
func (a *InstanceGroupsApiService) InstanceGroupsInstanceGroupsUpdate(ctx _context.Context, id string) ApiInstanceGroupsInstanceGroupsUpdateRequest {
	return ApiInstanceGroupsInstanceGroupsUpdateRequest{
		ApiService: a,
		ctx:        ctx,
		id:         id,
	}
}

/*
 * Execute executes the request
 */
func (a *InstanceGroupsApiService) InstanceGroupsInstanceGroupsUpdateExecute(r ApiInstanceGroupsInstanceGroupsUpdateRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "InstanceGroupsApiService.InstanceGroupsInstanceGroupsUpdate")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/instance_groups/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.data
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
