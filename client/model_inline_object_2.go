/*
 * Ansible Tower API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version:
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineObject2 struct for InlineObject2
type InlineObject2 struct {
	//
	Description *string `json:"description,omitempty"`
	// Enter injectors using either JSON or YAML syntax. Refer to the Ansible Tower documentation for example syntax.
	Injectors *map[string]interface{} `json:"injectors,omitempty"`
	// Enter inputs using either JSON or YAML syntax. Refer to the Ansible Tower documentation for example syntax.
	Inputs *map[string]interface{} `json:"inputs,omitempty"`
	//
	Kind string `json:"kind"`
	//
	Name string `json:"name"`
}

// NewInlineObject2 instantiates a new InlineObject2 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject2(kind string, name string) *InlineObject2 {
	this := InlineObject2{}
	this.Kind = kind
	this.Name = name
	return &this
}

// NewInlineObject2WithDefaults instantiates a new InlineObject2 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject2WithDefaults() *InlineObject2 {
	this := InlineObject2{}
	return &this
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *InlineObject2) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject2) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *InlineObject2) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *InlineObject2) SetDescription(v string) {
	o.Description = &v
}

// GetInjectors returns the Injectors field value if set, zero value otherwise.
func (o *InlineObject2) GetInjectors() map[string]interface{} {
	if o == nil || o.Injectors == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Injectors
}

// GetInjectorsOk returns a tuple with the Injectors field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject2) GetInjectorsOk() (*map[string]interface{}, bool) {
	if o == nil || o.Injectors == nil {
		return nil, false
	}
	return o.Injectors, true
}

// HasInjectors returns a boolean if a field has been set.
func (o *InlineObject2) HasInjectors() bool {
	if o != nil && o.Injectors != nil {
		return true
	}

	return false
}

// SetInjectors gets a reference to the given map[string]interface{} and assigns it to the Injectors field.
func (o *InlineObject2) SetInjectors(v map[string]interface{}) {
	o.Injectors = &v
}

// GetInputs returns the Inputs field value if set, zero value otherwise.
func (o *InlineObject2) GetInputs() map[string]interface{} {
	if o == nil || o.Inputs == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.Inputs
}

// GetInputsOk returns a tuple with the Inputs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject2) GetInputsOk() (*map[string]interface{}, bool) {
	if o == nil || o.Inputs == nil {
		return nil, false
	}
	return o.Inputs, true
}

// HasInputs returns a boolean if a field has been set.
func (o *InlineObject2) HasInputs() bool {
	if o != nil && o.Inputs != nil {
		return true
	}

	return false
}

// SetInputs gets a reference to the given map[string]interface{} and assigns it to the Inputs field.
func (o *InlineObject2) SetInputs(v map[string]interface{}) {
	o.Inputs = &v
}

// GetKind returns the Kind field value
func (o *InlineObject2) GetKind() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Kind
}

// GetKindOk returns a tuple with the Kind field value
// and a boolean to check if the value has been set.
func (o *InlineObject2) GetKindOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Kind, true
}

// SetKind sets field value
func (o *InlineObject2) SetKind(v string) {
	o.Kind = v
}

// GetName returns the Name field value
func (o *InlineObject2) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *InlineObject2) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *InlineObject2) SetName(v string) {
	o.Name = v
}

func (o InlineObject2) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Injectors != nil {
		toSerialize["injectors"] = o.Injectors
	}
	if o.Inputs != nil {
		toSerialize["inputs"] = o.Inputs
	}
	if true {
		toSerialize["kind"] = o.Kind
	}
	if true {
		toSerialize["name"] = o.Name
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject2 struct {
	value *InlineObject2
	isSet bool
}

func (v NullableInlineObject2) Get() *InlineObject2 {
	return v.value
}

func (v *NullableInlineObject2) Set(val *InlineObject2) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject2) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject2) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject2(val *InlineObject2) *NullableInlineObject2 {
	return &NullableInlineObject2{value: val, isSet: true}
}

func (v NullableInlineObject2) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject2) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
