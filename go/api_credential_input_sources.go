/*
 * Ansible Tower API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// CredentialInputSourcesApiService CredentialInputSourcesApi service
type CredentialInputSourcesApiService service

type ApiCredentialInputSourcesCredentialInputSourcesCreateRequest struct {
	ctx _context.Context
	ApiService *CredentialInputSourcesApiService
	data *map[string]interface{}
}

func (r ApiCredentialInputSourcesCredentialInputSourcesCreateRequest) Data(data map[string]interface{}) ApiCredentialInputSourcesCredentialInputSourcesCreateRequest {
	r.data = &data
	return r
}

func (r ApiCredentialInputSourcesCredentialInputSourcesCreateRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.CredentialInputSourcesCredentialInputSourcesCreateExecute(r)
}

/*
 * CredentialInputSourcesCredentialInputSourcesCreate  Create a Credential Input Source
 * 
Make a POST request to this resource with the following credential input source
fields to create a new credential input source:









* `description`: Optional description of this credential input source. (string, default=`""`)
* `input_field_name`:  (string, required)
* `metadata`:  (json, default=`{}`)
* `target_credential`:  (id, required)
* `source_credential`:  (id, required)
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiCredentialInputSourcesCredentialInputSourcesCreateRequest
 */
func (a *CredentialInputSourcesApiService) CredentialInputSourcesCredentialInputSourcesCreate(ctx _context.Context) ApiCredentialInputSourcesCredentialInputSourcesCreateRequest {
	return ApiCredentialInputSourcesCredentialInputSourcesCreateRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CredentialInputSourcesApiService) CredentialInputSourcesCredentialInputSourcesCreateExecute(r ApiCredentialInputSourcesCredentialInputSourcesCreateRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPost
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CredentialInputSourcesApiService.CredentialInputSourcesCredentialInputSourcesCreate")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/credential_input_sources/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.data
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCredentialInputSourcesCredentialInputSourcesDeleteRequest struct {
	ctx _context.Context
	ApiService *CredentialInputSourcesApiService
	id string
	search *string
}

func (r ApiCredentialInputSourcesCredentialInputSourcesDeleteRequest) Search(search string) ApiCredentialInputSourcesCredentialInputSourcesDeleteRequest {
	r.search = &search
	return r
}

func (r ApiCredentialInputSourcesCredentialInputSourcesDeleteRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.CredentialInputSourcesCredentialInputSourcesDeleteExecute(r)
}

/*
 * CredentialInputSourcesCredentialInputSourcesDelete  Delete a Credential Input Source
 * 
Make a DELETE request to this resource to delete this credential input source.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiCredentialInputSourcesCredentialInputSourcesDeleteRequest
 */
func (a *CredentialInputSourcesApiService) CredentialInputSourcesCredentialInputSourcesDelete(ctx _context.Context, id string) ApiCredentialInputSourcesCredentialInputSourcesDeleteRequest {
	return ApiCredentialInputSourcesCredentialInputSourcesDeleteRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *CredentialInputSourcesApiService) CredentialInputSourcesCredentialInputSourcesDeleteExecute(r ApiCredentialInputSourcesCredentialInputSourcesDeleteRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodDelete
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CredentialInputSourcesApiService.CredentialInputSourcesCredentialInputSourcesDelete")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/credential_input_sources/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCredentialInputSourcesCredentialInputSourcesListRequest struct {
	ctx _context.Context
	ApiService *CredentialInputSourcesApiService
	page *int32
	pageSize *int32
	search *string
}

func (r ApiCredentialInputSourcesCredentialInputSourcesListRequest) Page(page int32) ApiCredentialInputSourcesCredentialInputSourcesListRequest {
	r.page = &page
	return r
}
func (r ApiCredentialInputSourcesCredentialInputSourcesListRequest) PageSize(pageSize int32) ApiCredentialInputSourcesCredentialInputSourcesListRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiCredentialInputSourcesCredentialInputSourcesListRequest) Search(search string) ApiCredentialInputSourcesCredentialInputSourcesListRequest {
	r.search = &search
	return r
}

func (r ApiCredentialInputSourcesCredentialInputSourcesListRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.CredentialInputSourcesCredentialInputSourcesListExecute(r)
}

/*
 * CredentialInputSourcesCredentialInputSourcesList  List Credential Input Sources
 * 
Make a GET request to this resource to retrieve the list of
credential input sources.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of credential input sources
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more credential input source records.  

## Results

Each credential input source data structure includes the following fields:

* `id`: Database ID for this credential input source. (integer)
* `type`: Data type for this credential input source. (choice)
* `url`: URL for this credential input source. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this credential input source was created. (datetime)
* `modified`: Timestamp when this credential input source was last modified. (datetime)
* `description`: Optional description of this credential input source. (string)
* `input_field_name`:  (string)
* `metadata`:  (json)
* `target_credential`:  (id)
* `source_credential`:  (id)



## Sorting

To specify that credential input sources are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiCredentialInputSourcesCredentialInputSourcesListRequest
 */
func (a *CredentialInputSourcesApiService) CredentialInputSourcesCredentialInputSourcesList(ctx _context.Context) ApiCredentialInputSourcesCredentialInputSourcesListRequest {
	return ApiCredentialInputSourcesCredentialInputSourcesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *CredentialInputSourcesApiService) CredentialInputSourcesCredentialInputSourcesListExecute(r ApiCredentialInputSourcesCredentialInputSourcesListRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CredentialInputSourcesApiService.CredentialInputSourcesCredentialInputSourcesList")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/credential_input_sources/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCredentialInputSourcesCredentialInputSourcesPartialUpdateRequest struct {
	ctx _context.Context
	ApiService *CredentialInputSourcesApiService
	id string
	search *string
	data *map[string]interface{}
}

func (r ApiCredentialInputSourcesCredentialInputSourcesPartialUpdateRequest) Search(search string) ApiCredentialInputSourcesCredentialInputSourcesPartialUpdateRequest {
	r.search = &search
	return r
}
func (r ApiCredentialInputSourcesCredentialInputSourcesPartialUpdateRequest) Data(data map[string]interface{}) ApiCredentialInputSourcesCredentialInputSourcesPartialUpdateRequest {
	r.data = &data
	return r
}

func (r ApiCredentialInputSourcesCredentialInputSourcesPartialUpdateRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.CredentialInputSourcesCredentialInputSourcesPartialUpdateExecute(r)
}

/*
 * CredentialInputSourcesCredentialInputSourcesPartialUpdate  Update a Credential Input Source
 * 
Make a PUT or PATCH request to this resource to update this
credential input source.  The following fields may be modified:









* `description`: Optional description of this credential input source. (string, default=`""`)
* `input_field_name`:  (string, required)
* `metadata`:  (json, default=`{}`)
* `target_credential`:  (id, required)
* `source_credential`:  (id, required)








For a PATCH request, include only the fields that are being modified.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiCredentialInputSourcesCredentialInputSourcesPartialUpdateRequest
 */
func (a *CredentialInputSourcesApiService) CredentialInputSourcesCredentialInputSourcesPartialUpdate(ctx _context.Context, id string) ApiCredentialInputSourcesCredentialInputSourcesPartialUpdateRequest {
	return ApiCredentialInputSourcesCredentialInputSourcesPartialUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *CredentialInputSourcesApiService) CredentialInputSourcesCredentialInputSourcesPartialUpdateExecute(r ApiCredentialInputSourcesCredentialInputSourcesPartialUpdateRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPatch
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CredentialInputSourcesApiService.CredentialInputSourcesCredentialInputSourcesPartialUpdate")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/credential_input_sources/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.data
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCredentialInputSourcesCredentialInputSourcesReadRequest struct {
	ctx _context.Context
	ApiService *CredentialInputSourcesApiService
	id string
	search *string
}

func (r ApiCredentialInputSourcesCredentialInputSourcesReadRequest) Search(search string) ApiCredentialInputSourcesCredentialInputSourcesReadRequest {
	r.search = &search
	return r
}

func (r ApiCredentialInputSourcesCredentialInputSourcesReadRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.CredentialInputSourcesCredentialInputSourcesReadExecute(r)
}

/*
 * CredentialInputSourcesCredentialInputSourcesRead  Retrieve a Credential Input Source
 * 
Make GET request to this resource to retrieve a single credential input source
record containing the following fields:

* `id`: Database ID for this credential input source. (integer)
* `type`: Data type for this credential input source. (choice)
* `url`: URL for this credential input source. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this credential input source was created. (datetime)
* `modified`: Timestamp when this credential input source was last modified. (datetime)
* `description`: Optional description of this credential input source. (string)
* `input_field_name`:  (string)
* `metadata`:  (json)
* `target_credential`:  (id)
* `source_credential`:  (id)
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiCredentialInputSourcesCredentialInputSourcesReadRequest
 */
func (a *CredentialInputSourcesApiService) CredentialInputSourcesCredentialInputSourcesRead(ctx _context.Context, id string) ApiCredentialInputSourcesCredentialInputSourcesReadRequest {
	return ApiCredentialInputSourcesCredentialInputSourcesReadRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *CredentialInputSourcesApiService) CredentialInputSourcesCredentialInputSourcesReadExecute(r ApiCredentialInputSourcesCredentialInputSourcesReadRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CredentialInputSourcesApiService.CredentialInputSourcesCredentialInputSourcesRead")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/credential_input_sources/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{"application/json"}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiCredentialInputSourcesCredentialInputSourcesUpdateRequest struct {
	ctx _context.Context
	ApiService *CredentialInputSourcesApiService
	id string
	search *string
	data *InlineObject1
}

func (r ApiCredentialInputSourcesCredentialInputSourcesUpdateRequest) Search(search string) ApiCredentialInputSourcesCredentialInputSourcesUpdateRequest {
	r.search = &search
	return r
}
func (r ApiCredentialInputSourcesCredentialInputSourcesUpdateRequest) Data(data InlineObject1) ApiCredentialInputSourcesCredentialInputSourcesUpdateRequest {
	r.data = &data
	return r
}

func (r ApiCredentialInputSourcesCredentialInputSourcesUpdateRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.CredentialInputSourcesCredentialInputSourcesUpdateExecute(r)
}

/*
 * CredentialInputSourcesCredentialInputSourcesUpdate  Update a Credential Input Source
 * 
Make a PUT or PATCH request to this resource to update this
credential input source.  The following fields may be modified:









* `description`: Optional description of this credential input source. (string, default=`""`)
* `input_field_name`:  (string, required)
* `metadata`:  (json, default=`{}`)
* `target_credential`:  (id, required)
* `source_credential`:  (id, required)






For a PUT request, include **all** fields in the request.
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiCredentialInputSourcesCredentialInputSourcesUpdateRequest
 */
func (a *CredentialInputSourcesApiService) CredentialInputSourcesCredentialInputSourcesUpdate(ctx _context.Context, id string) ApiCredentialInputSourcesCredentialInputSourcesUpdateRequest {
	return ApiCredentialInputSourcesCredentialInputSourcesUpdateRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *CredentialInputSourcesApiService) CredentialInputSourcesCredentialInputSourcesUpdateExecute(r ApiCredentialInputSourcesCredentialInputSourcesUpdateRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodPut
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "CredentialInputSourcesApiService.CredentialInputSourcesCredentialInputSourcesUpdate")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/credential_input_sources/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{"application/json"}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	// body params
	localVarPostBody = r.data
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
