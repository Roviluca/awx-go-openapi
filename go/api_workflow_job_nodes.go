/*
 * Ansible Tower API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	_context "context"
	_ioutil "io/ioutil"
	_nethttp "net/http"
	_neturl "net/url"
	"strings"
)

// Linger please
var (
	_ _context.Context
)

// WorkflowJobNodesApiService WorkflowJobNodesApi service
type WorkflowJobNodesApiService service

type ApiWorkflowJobNodesWorkflowJobNodesAlwaysNodesListRequest struct {
	ctx _context.Context
	ApiService *WorkflowJobNodesApiService
	id string
	page *int32
	pageSize *int32
	search *string
}

func (r ApiWorkflowJobNodesWorkflowJobNodesAlwaysNodesListRequest) Page(page int32) ApiWorkflowJobNodesWorkflowJobNodesAlwaysNodesListRequest {
	r.page = &page
	return r
}
func (r ApiWorkflowJobNodesWorkflowJobNodesAlwaysNodesListRequest) PageSize(pageSize int32) ApiWorkflowJobNodesWorkflowJobNodesAlwaysNodesListRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiWorkflowJobNodesWorkflowJobNodesAlwaysNodesListRequest) Search(search string) ApiWorkflowJobNodesWorkflowJobNodesAlwaysNodesListRequest {
	r.search = &search
	return r
}

func (r ApiWorkflowJobNodesWorkflowJobNodesAlwaysNodesListRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkflowJobNodesWorkflowJobNodesAlwaysNodesListExecute(r)
}

/*
 * WorkflowJobNodesWorkflowJobNodesAlwaysNodesList  List Workflow Job Nodes for a Workflow Job Node
 * 
Make a GET request to this resource to retrieve a list of
workflow job nodes associated with the selected
workflow job node.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of workflow job nodes
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more workflow job node records.  

## Results

Each workflow job node data structure includes the following fields:

* `id`: Database ID for this workflow job node. (integer)
* `type`: Data type for this workflow job node. (choice)
* `url`: URL for this workflow job node. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this workflow job node was created. (datetime)
* `modified`: Timestamp when this workflow job node was last modified. (datetime)
* `extra_data`:  (json)
* `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id)
* `scm_branch`:  (string)
* `job_type`:  (choice)
    - `None`: ---------
    - `""`: ---------
    - `run`: Run
    - `check`: Check
* `job_tags`:  (string)
* `skip_tags`:  (string)
* `limit`:  (string)
* `diff_mode`:  (boolean)
* `verbosity`:  (choice)
    - `None`: ---------
    - `0`: 0 (Normal)
    - `1`: 1 (Verbose)
    - `2`: 2 (More Verbose)
    - `3`: 3 (Debug)
    - `4`: 4 (Connection Debug)
    - `5`: 5 (WinRM Debug)
* `job`:  (id)
* `workflow_job`:  (id)
* `unified_job_template`:  (id)
* `success_nodes`:  (field)
* `failure_nodes`:  (field)
* `always_nodes`:  (field)
* `all_parents_must_converge`: If enabled then the node will only run if all of the parent nodes have met the criteria to reach this node (boolean)
* `do_not_run`: Indicates that a job will not be created when True. Workflow runtime semantics will mark this True if the node is in a path that will decidedly not be ran. A value of False means the node may not run. (boolean)
* `identifier`: An identifier coresponding to the workflow job template node that this node was created from. (string)



## Sorting

To specify that workflow job nodes are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiWorkflowJobNodesWorkflowJobNodesAlwaysNodesListRequest
 */
func (a *WorkflowJobNodesApiService) WorkflowJobNodesWorkflowJobNodesAlwaysNodesList(ctx _context.Context, id string) ApiWorkflowJobNodesWorkflowJobNodesAlwaysNodesListRequest {
	return ApiWorkflowJobNodesWorkflowJobNodesAlwaysNodesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *WorkflowJobNodesApiService) WorkflowJobNodesWorkflowJobNodesAlwaysNodesListExecute(r ApiWorkflowJobNodesWorkflowJobNodesAlwaysNodesListRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowJobNodesApiService.WorkflowJobNodesWorkflowJobNodesAlwaysNodesList")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/workflow_job_nodes/{id}/always_nodes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkflowJobNodesWorkflowJobNodesCredentialsListRequest struct {
	ctx _context.Context
	ApiService *WorkflowJobNodesApiService
	id string
	page *int32
	pageSize *int32
	search *string
}

func (r ApiWorkflowJobNodesWorkflowJobNodesCredentialsListRequest) Page(page int32) ApiWorkflowJobNodesWorkflowJobNodesCredentialsListRequest {
	r.page = &page
	return r
}
func (r ApiWorkflowJobNodesWorkflowJobNodesCredentialsListRequest) PageSize(pageSize int32) ApiWorkflowJobNodesWorkflowJobNodesCredentialsListRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiWorkflowJobNodesWorkflowJobNodesCredentialsListRequest) Search(search string) ApiWorkflowJobNodesWorkflowJobNodesCredentialsListRequest {
	r.search = &search
	return r
}

func (r ApiWorkflowJobNodesWorkflowJobNodesCredentialsListRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkflowJobNodesWorkflowJobNodesCredentialsListExecute(r)
}

/*
 * WorkflowJobNodesWorkflowJobNodesCredentialsList  List Credentials for a Workflow Job Node
 * 
Make a GET request to this resource to retrieve a list of
credentials associated with the selected
workflow job node.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of credentials
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more credential records.  

## Results

Each credential data structure includes the following fields:

* `id`: Database ID for this credential. (integer)
* `type`: Data type for this credential. (choice)
* `url`: URL for this credential. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this credential was created. (datetime)
* `modified`: Timestamp when this credential was last modified. (datetime)
* `name`: Name of this credential. (string)
* `description`: Optional description of this credential. (string)
* `organization`:  (id)
* `credential_type`: Specify the type of credential you want to create. Refer to the Ansible Tower documentation for details on each type. (id)
* `managed_by_tower`:  (boolean)
* `inputs`: Enter inputs using either JSON or YAML syntax. Refer to the Ansible Tower documentation for example syntax. (json)
* `kind`:  (field)
* `cloud`:  (field)
* `kubernetes`:  (field)



## Sorting

To specify that credentials are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiWorkflowJobNodesWorkflowJobNodesCredentialsListRequest
 */
func (a *WorkflowJobNodesApiService) WorkflowJobNodesWorkflowJobNodesCredentialsList(ctx _context.Context, id string) ApiWorkflowJobNodesWorkflowJobNodesCredentialsListRequest {
	return ApiWorkflowJobNodesWorkflowJobNodesCredentialsListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *WorkflowJobNodesApiService) WorkflowJobNodesWorkflowJobNodesCredentialsListExecute(r ApiWorkflowJobNodesWorkflowJobNodesCredentialsListRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowJobNodesApiService.WorkflowJobNodesWorkflowJobNodesCredentialsList")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/workflow_job_nodes/{id}/credentials/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkflowJobNodesWorkflowJobNodesFailureNodesListRequest struct {
	ctx _context.Context
	ApiService *WorkflowJobNodesApiService
	id string
	page *int32
	pageSize *int32
	search *string
}

func (r ApiWorkflowJobNodesWorkflowJobNodesFailureNodesListRequest) Page(page int32) ApiWorkflowJobNodesWorkflowJobNodesFailureNodesListRequest {
	r.page = &page
	return r
}
func (r ApiWorkflowJobNodesWorkflowJobNodesFailureNodesListRequest) PageSize(pageSize int32) ApiWorkflowJobNodesWorkflowJobNodesFailureNodesListRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiWorkflowJobNodesWorkflowJobNodesFailureNodesListRequest) Search(search string) ApiWorkflowJobNodesWorkflowJobNodesFailureNodesListRequest {
	r.search = &search
	return r
}

func (r ApiWorkflowJobNodesWorkflowJobNodesFailureNodesListRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkflowJobNodesWorkflowJobNodesFailureNodesListExecute(r)
}

/*
 * WorkflowJobNodesWorkflowJobNodesFailureNodesList  List Workflow Job Nodes for a Workflow Job Node
 * 
Make a GET request to this resource to retrieve a list of
workflow job nodes associated with the selected
workflow job node.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of workflow job nodes
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more workflow job node records.  

## Results

Each workflow job node data structure includes the following fields:

* `id`: Database ID for this workflow job node. (integer)
* `type`: Data type for this workflow job node. (choice)
* `url`: URL for this workflow job node. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this workflow job node was created. (datetime)
* `modified`: Timestamp when this workflow job node was last modified. (datetime)
* `extra_data`:  (json)
* `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id)
* `scm_branch`:  (string)
* `job_type`:  (choice)
    - `None`: ---------
    - `""`: ---------
    - `run`: Run
    - `check`: Check
* `job_tags`:  (string)
* `skip_tags`:  (string)
* `limit`:  (string)
* `diff_mode`:  (boolean)
* `verbosity`:  (choice)
    - `None`: ---------
    - `0`: 0 (Normal)
    - `1`: 1 (Verbose)
    - `2`: 2 (More Verbose)
    - `3`: 3 (Debug)
    - `4`: 4 (Connection Debug)
    - `5`: 5 (WinRM Debug)
* `job`:  (id)
* `workflow_job`:  (id)
* `unified_job_template`:  (id)
* `success_nodes`:  (field)
* `failure_nodes`:  (field)
* `always_nodes`:  (field)
* `all_parents_must_converge`: If enabled then the node will only run if all of the parent nodes have met the criteria to reach this node (boolean)
* `do_not_run`: Indicates that a job will not be created when True. Workflow runtime semantics will mark this True if the node is in a path that will decidedly not be ran. A value of False means the node may not run. (boolean)
* `identifier`: An identifier coresponding to the workflow job template node that this node was created from. (string)



## Sorting

To specify that workflow job nodes are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiWorkflowJobNodesWorkflowJobNodesFailureNodesListRequest
 */
func (a *WorkflowJobNodesApiService) WorkflowJobNodesWorkflowJobNodesFailureNodesList(ctx _context.Context, id string) ApiWorkflowJobNodesWorkflowJobNodesFailureNodesListRequest {
	return ApiWorkflowJobNodesWorkflowJobNodesFailureNodesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *WorkflowJobNodesApiService) WorkflowJobNodesWorkflowJobNodesFailureNodesListExecute(r ApiWorkflowJobNodesWorkflowJobNodesFailureNodesListRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowJobNodesApiService.WorkflowJobNodesWorkflowJobNodesFailureNodesList")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/workflow_job_nodes/{id}/failure_nodes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkflowJobNodesWorkflowJobNodesListRequest struct {
	ctx _context.Context
	ApiService *WorkflowJobNodesApiService
	page *int32
	pageSize *int32
	search *string
}

func (r ApiWorkflowJobNodesWorkflowJobNodesListRequest) Page(page int32) ApiWorkflowJobNodesWorkflowJobNodesListRequest {
	r.page = &page
	return r
}
func (r ApiWorkflowJobNodesWorkflowJobNodesListRequest) PageSize(pageSize int32) ApiWorkflowJobNodesWorkflowJobNodesListRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiWorkflowJobNodesWorkflowJobNodesListRequest) Search(search string) ApiWorkflowJobNodesWorkflowJobNodesListRequest {
	r.search = &search
	return r
}

func (r ApiWorkflowJobNodesWorkflowJobNodesListRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkflowJobNodesWorkflowJobNodesListExecute(r)
}

/*
 * WorkflowJobNodesWorkflowJobNodesList  List Workflow Job Nodes
 * 
Make a GET request to this resource to retrieve the list of
workflow job nodes.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of workflow job nodes
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more workflow job node records.  

## Results

Each workflow job node data structure includes the following fields:

* `id`: Database ID for this workflow job node. (integer)
* `type`: Data type for this workflow job node. (choice)
* `url`: URL for this workflow job node. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this workflow job node was created. (datetime)
* `modified`: Timestamp when this workflow job node was last modified. (datetime)
* `extra_data`:  (json)
* `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id)
* `scm_branch`:  (string)
* `job_type`:  (choice)
    - `None`: ---------
    - `""`: ---------
    - `run`: Run
    - `check`: Check
* `job_tags`:  (string)
* `skip_tags`:  (string)
* `limit`:  (string)
* `diff_mode`:  (boolean)
* `verbosity`:  (choice)
    - `None`: ---------
    - `0`: 0 (Normal)
    - `1`: 1 (Verbose)
    - `2`: 2 (More Verbose)
    - `3`: 3 (Debug)
    - `4`: 4 (Connection Debug)
    - `5`: 5 (WinRM Debug)
* `job`:  (id)
* `workflow_job`:  (id)
* `unified_job_template`:  (id)
* `success_nodes`:  (field)
* `failure_nodes`:  (field)
* `always_nodes`:  (field)
* `all_parents_must_converge`: If enabled then the node will only run if all of the parent nodes have met the criteria to reach this node (boolean)
* `do_not_run`: Indicates that a job will not be created when True. Workflow runtime semantics will mark this True if the node is in a path that will decidedly not be ran. A value of False means the node may not run. (boolean)
* `identifier`: An identifier coresponding to the workflow job template node that this node was created from. (string)



## Sorting

To specify that workflow job nodes are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @return ApiWorkflowJobNodesWorkflowJobNodesListRequest
 */
func (a *WorkflowJobNodesApiService) WorkflowJobNodesWorkflowJobNodesList(ctx _context.Context) ApiWorkflowJobNodesWorkflowJobNodesListRequest {
	return ApiWorkflowJobNodesWorkflowJobNodesListRequest{
		ApiService: a,
		ctx: ctx,
	}
}

/*
 * Execute executes the request
 */
func (a *WorkflowJobNodesApiService) WorkflowJobNodesWorkflowJobNodesListExecute(r ApiWorkflowJobNodesWorkflowJobNodesListRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowJobNodesApiService.WorkflowJobNodesWorkflowJobNodesList")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/workflow_job_nodes/"

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkflowJobNodesWorkflowJobNodesReadRequest struct {
	ctx _context.Context
	ApiService *WorkflowJobNodesApiService
	id string
	search *string
}

func (r ApiWorkflowJobNodesWorkflowJobNodesReadRequest) Search(search string) ApiWorkflowJobNodesWorkflowJobNodesReadRequest {
	r.search = &search
	return r
}

func (r ApiWorkflowJobNodesWorkflowJobNodesReadRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkflowJobNodesWorkflowJobNodesReadExecute(r)
}

/*
 * WorkflowJobNodesWorkflowJobNodesRead  Retrieve a Workflow Job Node
 * 
Make GET request to this resource to retrieve a single workflow job node
record containing the following fields:

* `id`: Database ID for this workflow job node. (integer)
* `type`: Data type for this workflow job node. (choice)
* `url`: URL for this workflow job node. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this workflow job node was created. (datetime)
* `modified`: Timestamp when this workflow job node was last modified. (datetime)
* `extra_data`:  (json)
* `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id)
* `scm_branch`:  (string)
* `job_type`:  (choice)
    - `None`: ---------
    - `""`: ---------
    - `run`: Run
    - `check`: Check
* `job_tags`:  (string)
* `skip_tags`:  (string)
* `limit`:  (string)
* `diff_mode`:  (boolean)
* `verbosity`:  (choice)
    - `None`: ---------
    - `0`: 0 (Normal)
    - `1`: 1 (Verbose)
    - `2`: 2 (More Verbose)
    - `3`: 3 (Debug)
    - `4`: 4 (Connection Debug)
    - `5`: 5 (WinRM Debug)
* `job`:  (id)
* `workflow_job`:  (id)
* `unified_job_template`:  (id)
* `success_nodes`:  (field)
* `failure_nodes`:  (field)
* `always_nodes`:  (field)
* `all_parents_must_converge`: If enabled then the node will only run if all of the parent nodes have met the criteria to reach this node (boolean)
* `do_not_run`: Indicates that a job will not be created when True. Workflow runtime semantics will mark this True if the node is in a path that will decidedly not be ran. A value of False means the node may not run. (boolean)
* `identifier`: An identifier coresponding to the workflow job template node that this node was created from. (string)
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiWorkflowJobNodesWorkflowJobNodesReadRequest
 */
func (a *WorkflowJobNodesApiService) WorkflowJobNodesWorkflowJobNodesRead(ctx _context.Context, id string) ApiWorkflowJobNodesWorkflowJobNodesReadRequest {
	return ApiWorkflowJobNodesWorkflowJobNodesReadRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *WorkflowJobNodesApiService) WorkflowJobNodesWorkflowJobNodesReadExecute(r ApiWorkflowJobNodesWorkflowJobNodesReadRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowJobNodesApiService.WorkflowJobNodesWorkflowJobNodesRead")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/workflow_job_nodes/{id}/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}

type ApiWorkflowJobNodesWorkflowJobNodesSuccessNodesListRequest struct {
	ctx _context.Context
	ApiService *WorkflowJobNodesApiService
	id string
	page *int32
	pageSize *int32
	search *string
}

func (r ApiWorkflowJobNodesWorkflowJobNodesSuccessNodesListRequest) Page(page int32) ApiWorkflowJobNodesWorkflowJobNodesSuccessNodesListRequest {
	r.page = &page
	return r
}
func (r ApiWorkflowJobNodesWorkflowJobNodesSuccessNodesListRequest) PageSize(pageSize int32) ApiWorkflowJobNodesWorkflowJobNodesSuccessNodesListRequest {
	r.pageSize = &pageSize
	return r
}
func (r ApiWorkflowJobNodesWorkflowJobNodesSuccessNodesListRequest) Search(search string) ApiWorkflowJobNodesWorkflowJobNodesSuccessNodesListRequest {
	r.search = &search
	return r
}

func (r ApiWorkflowJobNodesWorkflowJobNodesSuccessNodesListRequest) Execute() (*_nethttp.Response, error) {
	return r.ApiService.WorkflowJobNodesWorkflowJobNodesSuccessNodesListExecute(r)
}

/*
 * WorkflowJobNodesWorkflowJobNodesSuccessNodesList  List Workflow Job Nodes for a Workflow Job Node
 * 
Make a GET request to this resource to retrieve a list of
workflow job nodes associated with the selected
workflow job node.

The resulting data structure contains:

    {
        "count": 99,
        "next": null,
        "previous": null,
        "results": [
            ...
        ]
    }

The `count` field indicates the total number of workflow job nodes
found for the given query.  The `next` and `previous` fields provides links to
additional results if there are more than will fit on a single page.  The
`results` list contains zero or more workflow job node records.  

## Results

Each workflow job node data structure includes the following fields:

* `id`: Database ID for this workflow job node. (integer)
* `type`: Data type for this workflow job node. (choice)
* `url`: URL for this workflow job node. (string)
* `related`: Data structure with URLs of related resources. (object)
* `summary_fields`: Data structure with name/description for related resources.  The output for some objects may be limited for performance reasons. (object)
* `created`: Timestamp when this workflow job node was created. (datetime)
* `modified`: Timestamp when this workflow job node was last modified. (datetime)
* `extra_data`:  (json)
* `inventory`: Inventory applied as a prompt, assuming job template prompts for inventory (id)
* `scm_branch`:  (string)
* `job_type`:  (choice)
    - `None`: ---------
    - `""`: ---------
    - `run`: Run
    - `check`: Check
* `job_tags`:  (string)
* `skip_tags`:  (string)
* `limit`:  (string)
* `diff_mode`:  (boolean)
* `verbosity`:  (choice)
    - `None`: ---------
    - `0`: 0 (Normal)
    - `1`: 1 (Verbose)
    - `2`: 2 (More Verbose)
    - `3`: 3 (Debug)
    - `4`: 4 (Connection Debug)
    - `5`: 5 (WinRM Debug)
* `job`:  (id)
* `workflow_job`:  (id)
* `unified_job_template`:  (id)
* `success_nodes`:  (field)
* `failure_nodes`:  (field)
* `always_nodes`:  (field)
* `all_parents_must_converge`: If enabled then the node will only run if all of the parent nodes have met the criteria to reach this node (boolean)
* `do_not_run`: Indicates that a job will not be created when True. Workflow runtime semantics will mark this True if the node is in a path that will decidedly not be ran. A value of False means the node may not run. (boolean)
* `identifier`: An identifier coresponding to the workflow job template node that this node was created from. (string)



## Sorting

To specify that workflow job nodes are returned in a particular
order, use the `order_by` query string parameter on the GET request.

    ?order_by=name

Prefix the field name with a dash `-` to sort in reverse:

    ?order_by=-name

Multiple sorting fields may be specified by separating the field names with a
comma `,`:

    ?order_by=name,some_other_field

## Pagination

Use the `page_size` query string parameter to change the number of results
returned for each request.  Use the `page` query string parameter to retrieve
a particular page of results.

    ?page_size=100&page=2

The `previous` and `next` links returned with the results will set these query
string parameters automatically.

## Searching

Use the `search` query string parameter to perform a case-insensitive search
within all designated text fields of a model.

    ?search=findme

(_Added in Ansible Tower 3.1.0_) Search across related fields:

    ?related__search=findme
 * @param ctx _context.Context - for authentication, logging, cancellation, deadlines, tracing, etc. Passed from http.Request or context.Background().
 * @param id
 * @return ApiWorkflowJobNodesWorkflowJobNodesSuccessNodesListRequest
 */
func (a *WorkflowJobNodesApiService) WorkflowJobNodesWorkflowJobNodesSuccessNodesList(ctx _context.Context, id string) ApiWorkflowJobNodesWorkflowJobNodesSuccessNodesListRequest {
	return ApiWorkflowJobNodesWorkflowJobNodesSuccessNodesListRequest{
		ApiService: a,
		ctx: ctx,
		id: id,
	}
}

/*
 * Execute executes the request
 */
func (a *WorkflowJobNodesApiService) WorkflowJobNodesWorkflowJobNodesSuccessNodesListExecute(r ApiWorkflowJobNodesWorkflowJobNodesSuccessNodesListRequest) (*_nethttp.Response, error) {
	var (
		localVarHTTPMethod   = _nethttp.MethodGet
		localVarPostBody     interface{}
		localVarFormFileName string
		localVarFileName     string
		localVarFileBytes    []byte
	)

	localBasePath, err := a.client.cfg.ServerURLWithContext(r.ctx, "WorkflowJobNodesApiService.WorkflowJobNodesWorkflowJobNodesSuccessNodesList")
	if err != nil {
		return nil, GenericOpenAPIError{error: err.Error()}
	}

	localVarPath := localBasePath + "/api/v2/workflow_job_nodes/{id}/success_nodes/"
	localVarPath = strings.Replace(localVarPath, "{"+"id"+"}", _neturl.PathEscape(parameterToString(r.id, "")), -1)

	localVarHeaderParams := make(map[string]string)
	localVarQueryParams := _neturl.Values{}
	localVarFormParams := _neturl.Values{}

	if r.page != nil {
		localVarQueryParams.Add("page", parameterToString(*r.page, ""))
	}
	if r.pageSize != nil {
		localVarQueryParams.Add("page_size", parameterToString(*r.pageSize, ""))
	}
	if r.search != nil {
		localVarQueryParams.Add("search", parameterToString(*r.search, ""))
	}
	// to determine the Content-Type header
	localVarHTTPContentTypes := []string{}

	// set Content-Type header
	localVarHTTPContentType := selectHeaderContentType(localVarHTTPContentTypes)
	if localVarHTTPContentType != "" {
		localVarHeaderParams["Content-Type"] = localVarHTTPContentType
	}

	// to determine the Accept header
	localVarHTTPHeaderAccepts := []string{}

	// set Accept header
	localVarHTTPHeaderAccept := selectHeaderAccept(localVarHTTPHeaderAccepts)
	if localVarHTTPHeaderAccept != "" {
		localVarHeaderParams["Accept"] = localVarHTTPHeaderAccept
	}
	req, err := a.client.prepareRequest(r.ctx, localVarPath, localVarHTTPMethod, localVarPostBody, localVarHeaderParams, localVarQueryParams, localVarFormParams, localVarFormFileName, localVarFileName, localVarFileBytes)
	if err != nil {
		return nil, err
	}

	localVarHTTPResponse, err := a.client.callAPI(req)
	if err != nil || localVarHTTPResponse == nil {
		return localVarHTTPResponse, err
	}

	localVarBody, err := _ioutil.ReadAll(localVarHTTPResponse.Body)
	localVarHTTPResponse.Body.Close()
	if err != nil {
		return localVarHTTPResponse, err
	}

	if localVarHTTPResponse.StatusCode >= 300 {
		newErr := GenericOpenAPIError{
			body:  localVarBody,
			error: localVarHTTPResponse.Status,
		}
		return localVarHTTPResponse, newErr
	}

	return localVarHTTPResponse, nil
}
