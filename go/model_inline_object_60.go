/*
 * Ansible Tower API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// InlineObject60 struct for InlineObject60
type InlineObject60 struct {
	// Enable capturing activity for the activity stream.
	ACTIVITY_STREAM_ENABLED bool `json:"ACTIVITY_STREAM_ENABLED"`
	// Enable capturing activity for the activity stream when running inventory sync.
	ACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC bool `json:"ACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC"`
	// List of modules allowed to be used by ad-hoc jobs.
	AD_HOC_COMMANDS *[]string `json:"AD_HOC_COMMANDS,omitempty"`
	// Ansible allows variable substitution via the Jinja2 templating language for --extra-vars. This poses a potential security risk where Tower users with the ability to specify extra vars at job launch time can use Jinja2 templates to run arbitrary Python.  It is recommended that this value be set to \"template\" or \"never\".
	ALLOW_JINJA_IN_EXTRA_VARS string `json:"ALLOW_JINJA_IN_EXTRA_VARS"`
	// For security reasons, users from external auth providers (LDAP, SAML, SSO, Radius, and others) are not allowed to create OAuth2 tokens. To change this behavior, enable this setting. Existing tokens will not be deleted when this setting is toggled off.
	ALLOWOAUTH2FOREXTERNALUSERS *bool `json:"ALLOW_OAUTH2_FOR_EXTERNAL_USERS,omitempty"`
	// Maximum time, in seconds, that stored Ansible facts are considered valid since the last time they were modified. Only valid, non-stale, facts will be accessible by a playbook. Note, this does not influence the deletion of ansible_facts from the database. Use a value of 0 to indicate that no timeout should be imposed.
	ANSIBLE_FACT_CACHE_TIMEOUT *int32 `json:"ANSIBLE_FACT_CACHE_TIMEOUT,omitempty"`
	// Enable HTTP Basic Auth for the API Browser.
	AUTH_BASIC_ENABLED bool `json:"AUTH_BASIC_ENABLED"`
	// DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the Ansible Tower documentation for example syntax.
	AUTHLDAP1BINDDN *string `json:"AUTH_LDAP_1_BIND_DN,omitempty"`
	// Password used to bind LDAP user account.
	AUTHLDAP1BINDPASSWORD *string `json:"AUTH_LDAP_1_BIND_PASSWORD,omitempty"`
	// Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. \"OPT_REFERRALS\"). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set.
	AUTHLDAP1CONNECTIONOPTIONS *map[string]interface{} `json:"AUTH_LDAP_1_CONNECTION_OPTIONS,omitempty"`
	// Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported.
	AUTHLDAP1DENYGROUP *string `json:"AUTH_LDAP_1_DENY_GROUP,omitempty"`
	// Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion.
	AUTHLDAP1GROUPSEARCH *[]string `json:"AUTH_LDAP_1_GROUP_SEARCH,omitempty"`
	// The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups
	AUTHLDAP1GROUPTYPE *string `json:"AUTH_LDAP_1_GROUP_TYPE,omitempty"`
	// Key value parameters to send the chosen group type init method.
	AUTHLDAP1GROUPTYPEPARAMS *map[string]interface{} `json:"AUTH_LDAP_1_GROUP_TYPE_PARAMS,omitempty"`
	// Mapping between organization admins/users and LDAP groups. This controls which users are placed into which Tower organizations relative to their LDAP group memberships. Configuration details are available in the Ansible Tower documentation.
	AUTHLDAP1ORGANIZATIONMAP *map[string]interface{} `json:"AUTH_LDAP_1_ORGANIZATION_MAP,omitempty"`
	// Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login via Tower. Only one require group is supported.
	AUTHLDAP1REQUIREGROUP *string `json:"AUTH_LDAP_1_REQUIRE_GROUP,omitempty"`
	// URI to connect to LDAP server, such as \"ldap://ldap.example.com:389\" (non-SSL) or \"ldaps://ldap.example.com:636\" (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty.
	AUTHLDAP1SERVERURI *string `json:"AUTH_LDAP_1_SERVER_URI,omitempty"`
	// Whether to enable TLS when the LDAP connection is not using SSL.
	AUTHLDAP1STARTTLS *bool `json:"AUTH_LDAP_1_START_TLS,omitempty"`
	// Mapping between team members (users) and LDAP groups. Configuration details are available in the Ansible Tower documentation.
	AUTHLDAP1TEAMMAP *map[string]interface{} `json:"AUTH_LDAP_1_TEAM_MAP,omitempty"`
	// Mapping of LDAP user schema to Tower API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the Ansible Tower documentation for additional details.
	AUTHLDAP1USERATTRMAP *map[string]interface{} `json:"AUTH_LDAP_1_USER_ATTR_MAP,omitempty"`
	// Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH.
	AUTHLDAP1USERDNTEMPLATE *string `json:"AUTH_LDAP_1_USER_DN_TEMPLATE,omitempty"`
	// Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the Ansible Tower documentation for more detail.
	AUTHLDAP1USERFLAGSBYGROUP *map[string]interface{} `json:"AUTH_LDAP_1_USER_FLAGS_BY_GROUP,omitempty"`
	// LDAP search query to find users.  Any user that matches the given pattern will be able to login to Tower.  The user should also be mapped into a Tower organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of \"LDAPUnion\" is possible. See Tower documentation for details.
	AUTHLDAP1USERSEARCH *[]string `json:"AUTH_LDAP_1_USER_SEARCH,omitempty"`
	// DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the Ansible Tower documentation for example syntax.
	AUTHLDAP2BINDDN *string `json:"AUTH_LDAP_2_BIND_DN,omitempty"`
	// Password used to bind LDAP user account.
	AUTHLDAP2BINDPASSWORD *string `json:"AUTH_LDAP_2_BIND_PASSWORD,omitempty"`
	// Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. \"OPT_REFERRALS\"). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set.
	AUTHLDAP2CONNECTIONOPTIONS *map[string]interface{} `json:"AUTH_LDAP_2_CONNECTION_OPTIONS,omitempty"`
	// Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported.
	AUTHLDAP2DENYGROUP *string `json:"AUTH_LDAP_2_DENY_GROUP,omitempty"`
	// Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion.
	AUTHLDAP2GROUPSEARCH *[]string `json:"AUTH_LDAP_2_GROUP_SEARCH,omitempty"`
	// The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups
	AUTHLDAP2GROUPTYPE *string `json:"AUTH_LDAP_2_GROUP_TYPE,omitempty"`
	// Key value parameters to send the chosen group type init method.
	AUTHLDAP2GROUPTYPEPARAMS *map[string]interface{} `json:"AUTH_LDAP_2_GROUP_TYPE_PARAMS,omitempty"`
	// Mapping between organization admins/users and LDAP groups. This controls which users are placed into which Tower organizations relative to their LDAP group memberships. Configuration details are available in the Ansible Tower documentation.
	AUTHLDAP2ORGANIZATIONMAP *map[string]interface{} `json:"AUTH_LDAP_2_ORGANIZATION_MAP,omitempty"`
	// Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login via Tower. Only one require group is supported.
	AUTHLDAP2REQUIREGROUP *string `json:"AUTH_LDAP_2_REQUIRE_GROUP,omitempty"`
	// URI to connect to LDAP server, such as \"ldap://ldap.example.com:389\" (non-SSL) or \"ldaps://ldap.example.com:636\" (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty.
	AUTHLDAP2SERVERURI *string `json:"AUTH_LDAP_2_SERVER_URI,omitempty"`
	// Whether to enable TLS when the LDAP connection is not using SSL.
	AUTHLDAP2STARTTLS *bool `json:"AUTH_LDAP_2_START_TLS,omitempty"`
	// Mapping between team members (users) and LDAP groups. Configuration details are available in the Ansible Tower documentation.
	AUTHLDAP2TEAMMAP *map[string]interface{} `json:"AUTH_LDAP_2_TEAM_MAP,omitempty"`
	// Mapping of LDAP user schema to Tower API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the Ansible Tower documentation for additional details.
	AUTHLDAP2USERATTRMAP *map[string]interface{} `json:"AUTH_LDAP_2_USER_ATTR_MAP,omitempty"`
	// Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH.
	AUTHLDAP2USERDNTEMPLATE *string `json:"AUTH_LDAP_2_USER_DN_TEMPLATE,omitempty"`
	// Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the Ansible Tower documentation for more detail.
	AUTHLDAP2USERFLAGSBYGROUP *map[string]interface{} `json:"AUTH_LDAP_2_USER_FLAGS_BY_GROUP,omitempty"`
	// LDAP search query to find users.  Any user that matches the given pattern will be able to login to Tower.  The user should also be mapped into a Tower organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of \"LDAPUnion\" is possible. See Tower documentation for details.
	AUTHLDAP2USERSEARCH *[]string `json:"AUTH_LDAP_2_USER_SEARCH,omitempty"`
	// DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the Ansible Tower documentation for example syntax.
	AUTHLDAP3BINDDN *string `json:"AUTH_LDAP_3_BIND_DN,omitempty"`
	// Password used to bind LDAP user account.
	AUTHLDAP3BINDPASSWORD *string `json:"AUTH_LDAP_3_BIND_PASSWORD,omitempty"`
	// Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. \"OPT_REFERRALS\"). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set.
	AUTHLDAP3CONNECTIONOPTIONS *map[string]interface{} `json:"AUTH_LDAP_3_CONNECTION_OPTIONS,omitempty"`
	// Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported.
	AUTHLDAP3DENYGROUP *string `json:"AUTH_LDAP_3_DENY_GROUP,omitempty"`
	// Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion.
	AUTHLDAP3GROUPSEARCH *[]string `json:"AUTH_LDAP_3_GROUP_SEARCH,omitempty"`
	// The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups
	AUTHLDAP3GROUPTYPE *string `json:"AUTH_LDAP_3_GROUP_TYPE,omitempty"`
	// Key value parameters to send the chosen group type init method.
	AUTHLDAP3GROUPTYPEPARAMS *map[string]interface{} `json:"AUTH_LDAP_3_GROUP_TYPE_PARAMS,omitempty"`
	// Mapping between organization admins/users and LDAP groups. This controls which users are placed into which Tower organizations relative to their LDAP group memberships. Configuration details are available in the Ansible Tower documentation.
	AUTHLDAP3ORGANIZATIONMAP *map[string]interface{} `json:"AUTH_LDAP_3_ORGANIZATION_MAP,omitempty"`
	// Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login via Tower. Only one require group is supported.
	AUTHLDAP3REQUIREGROUP *string `json:"AUTH_LDAP_3_REQUIRE_GROUP,omitempty"`
	// URI to connect to LDAP server, such as \"ldap://ldap.example.com:389\" (non-SSL) or \"ldaps://ldap.example.com:636\" (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty.
	AUTHLDAP3SERVERURI *string `json:"AUTH_LDAP_3_SERVER_URI,omitempty"`
	// Whether to enable TLS when the LDAP connection is not using SSL.
	AUTHLDAP3STARTTLS *bool `json:"AUTH_LDAP_3_START_TLS,omitempty"`
	// Mapping between team members (users) and LDAP groups. Configuration details are available in the Ansible Tower documentation.
	AUTHLDAP3TEAMMAP *map[string]interface{} `json:"AUTH_LDAP_3_TEAM_MAP,omitempty"`
	// Mapping of LDAP user schema to Tower API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the Ansible Tower documentation for additional details.
	AUTHLDAP3USERATTRMAP *map[string]interface{} `json:"AUTH_LDAP_3_USER_ATTR_MAP,omitempty"`
	// Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH.
	AUTHLDAP3USERDNTEMPLATE *string `json:"AUTH_LDAP_3_USER_DN_TEMPLATE,omitempty"`
	// Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the Ansible Tower documentation for more detail.
	AUTHLDAP3USERFLAGSBYGROUP *map[string]interface{} `json:"AUTH_LDAP_3_USER_FLAGS_BY_GROUP,omitempty"`
	// LDAP search query to find users.  Any user that matches the given pattern will be able to login to Tower.  The user should also be mapped into a Tower organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of \"LDAPUnion\" is possible. See Tower documentation for details.
	AUTHLDAP3USERSEARCH *[]string `json:"AUTH_LDAP_3_USER_SEARCH,omitempty"`
	// DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the Ansible Tower documentation for example syntax.
	AUTHLDAP4BINDDN *string `json:"AUTH_LDAP_4_BIND_DN,omitempty"`
	// Password used to bind LDAP user account.
	AUTHLDAP4BINDPASSWORD *string `json:"AUTH_LDAP_4_BIND_PASSWORD,omitempty"`
	// Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. \"OPT_REFERRALS\"). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set.
	AUTHLDAP4CONNECTIONOPTIONS *map[string]interface{} `json:"AUTH_LDAP_4_CONNECTION_OPTIONS,omitempty"`
	// Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported.
	AUTHLDAP4DENYGROUP *string `json:"AUTH_LDAP_4_DENY_GROUP,omitempty"`
	// Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion.
	AUTHLDAP4GROUPSEARCH *[]string `json:"AUTH_LDAP_4_GROUP_SEARCH,omitempty"`
	// The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups
	AUTHLDAP4GROUPTYPE *string `json:"AUTH_LDAP_4_GROUP_TYPE,omitempty"`
	// Key value parameters to send the chosen group type init method.
	AUTHLDAP4GROUPTYPEPARAMS *map[string]interface{} `json:"AUTH_LDAP_4_GROUP_TYPE_PARAMS,omitempty"`
	// Mapping between organization admins/users and LDAP groups. This controls which users are placed into which Tower organizations relative to their LDAP group memberships. Configuration details are available in the Ansible Tower documentation.
	AUTHLDAP4ORGANIZATIONMAP *map[string]interface{} `json:"AUTH_LDAP_4_ORGANIZATION_MAP,omitempty"`
	// Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login via Tower. Only one require group is supported.
	AUTHLDAP4REQUIREGROUP *string `json:"AUTH_LDAP_4_REQUIRE_GROUP,omitempty"`
	// URI to connect to LDAP server, such as \"ldap://ldap.example.com:389\" (non-SSL) or \"ldaps://ldap.example.com:636\" (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty.
	AUTHLDAP4SERVERURI *string `json:"AUTH_LDAP_4_SERVER_URI,omitempty"`
	// Whether to enable TLS when the LDAP connection is not using SSL.
	AUTHLDAP4STARTTLS *bool `json:"AUTH_LDAP_4_START_TLS,omitempty"`
	// Mapping between team members (users) and LDAP groups. Configuration details are available in the Ansible Tower documentation.
	AUTHLDAP4TEAMMAP *map[string]interface{} `json:"AUTH_LDAP_4_TEAM_MAP,omitempty"`
	// Mapping of LDAP user schema to Tower API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the Ansible Tower documentation for additional details.
	AUTHLDAP4USERATTRMAP *map[string]interface{} `json:"AUTH_LDAP_4_USER_ATTR_MAP,omitempty"`
	// Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH.
	AUTHLDAP4USERDNTEMPLATE *string `json:"AUTH_LDAP_4_USER_DN_TEMPLATE,omitempty"`
	// Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the Ansible Tower documentation for more detail.
	AUTHLDAP4USERFLAGSBYGROUP *map[string]interface{} `json:"AUTH_LDAP_4_USER_FLAGS_BY_GROUP,omitempty"`
	// LDAP search query to find users.  Any user that matches the given pattern will be able to login to Tower.  The user should also be mapped into a Tower organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of \"LDAPUnion\" is possible. See Tower documentation for details.
	AUTHLDAP4USERSEARCH *[]string `json:"AUTH_LDAP_4_USER_SEARCH,omitempty"`
	// DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the Ansible Tower documentation for example syntax.
	AUTHLDAP5BINDDN *string `json:"AUTH_LDAP_5_BIND_DN,omitempty"`
	// Password used to bind LDAP user account.
	AUTHLDAP5BINDPASSWORD *string `json:"AUTH_LDAP_5_BIND_PASSWORD,omitempty"`
	// Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. \"OPT_REFERRALS\"). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set.
	AUTHLDAP5CONNECTIONOPTIONS *map[string]interface{} `json:"AUTH_LDAP_5_CONNECTION_OPTIONS,omitempty"`
	// Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported.
	AUTHLDAP5DENYGROUP *string `json:"AUTH_LDAP_5_DENY_GROUP,omitempty"`
	// Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion.
	AUTHLDAP5GROUPSEARCH *[]string `json:"AUTH_LDAP_5_GROUP_SEARCH,omitempty"`
	// The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups
	AUTHLDAP5GROUPTYPE *string `json:"AUTH_LDAP_5_GROUP_TYPE,omitempty"`
	// Key value parameters to send the chosen group type init method.
	AUTHLDAP5GROUPTYPEPARAMS *map[string]interface{} `json:"AUTH_LDAP_5_GROUP_TYPE_PARAMS,omitempty"`
	// Mapping between organization admins/users and LDAP groups. This controls which users are placed into which Tower organizations relative to their LDAP group memberships. Configuration details are available in the Ansible Tower documentation.
	AUTHLDAP5ORGANIZATIONMAP *map[string]interface{} `json:"AUTH_LDAP_5_ORGANIZATION_MAP,omitempty"`
	// Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login via Tower. Only one require group is supported.
	AUTHLDAP5REQUIREGROUP *string `json:"AUTH_LDAP_5_REQUIRE_GROUP,omitempty"`
	// URI to connect to LDAP server, such as \"ldap://ldap.example.com:389\" (non-SSL) or \"ldaps://ldap.example.com:636\" (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty.
	AUTHLDAP5SERVERURI *string `json:"AUTH_LDAP_5_SERVER_URI,omitempty"`
	// Whether to enable TLS when the LDAP connection is not using SSL.
	AUTHLDAP5STARTTLS *bool `json:"AUTH_LDAP_5_START_TLS,omitempty"`
	// Mapping between team members (users) and LDAP groups. Configuration details are available in the Ansible Tower documentation.
	AUTHLDAP5TEAMMAP *map[string]interface{} `json:"AUTH_LDAP_5_TEAM_MAP,omitempty"`
	// Mapping of LDAP user schema to Tower API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the Ansible Tower documentation for additional details.
	AUTHLDAP5USERATTRMAP *map[string]interface{} `json:"AUTH_LDAP_5_USER_ATTR_MAP,omitempty"`
	// Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH.
	AUTHLDAP5USERDNTEMPLATE *string `json:"AUTH_LDAP_5_USER_DN_TEMPLATE,omitempty"`
	// Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the Ansible Tower documentation for more detail.
	AUTHLDAP5USERFLAGSBYGROUP *map[string]interface{} `json:"AUTH_LDAP_5_USER_FLAGS_BY_GROUP,omitempty"`
	// LDAP search query to find users.  Any user that matches the given pattern will be able to login to Tower.  The user should also be mapped into a Tower organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of \"LDAPUnion\" is possible. See Tower documentation for details.
	AUTHLDAP5USERSEARCH *[]string `json:"AUTH_LDAP_5_USER_SEARCH,omitempty"`
	// DN (Distinguished Name) of user to bind for all search queries. This is the system user account we will use to login to query LDAP for other user information. Refer to the Ansible Tower documentation for example syntax.
	AUTH_LDAP_BIND_DN *string `json:"AUTH_LDAP_BIND_DN,omitempty"`
	// Password used to bind LDAP user account.
	AUTH_LDAP_BIND_PASSWORD *string `json:"AUTH_LDAP_BIND_PASSWORD,omitempty"`
	// Additional options to set for the LDAP connection.  LDAP referrals are disabled by default (to prevent certain LDAP queries from hanging with AD). Option names should be strings (e.g. \"OPT_REFERRALS\"). Refer to https://www.python-ldap.org/doc/html/ldap.html#options for possible options and values that can be set.
	AUTH_LDAP_CONNECTION_OPTIONS *map[string]interface{} `json:"AUTH_LDAP_CONNECTION_OPTIONS,omitempty"`
	// Group DN denied from login. If specified, user will not be allowed to login if a member of this group.  Only one deny group is supported.
	AUTH_LDAP_DENY_GROUP *string `json:"AUTH_LDAP_DENY_GROUP,omitempty"`
	// Users are mapped to organizations based on their membership in LDAP groups. This setting defines the LDAP search query to find groups. Unlike the user search, group search does not support LDAPSearchUnion.
	AUTH_LDAP_GROUP_SEARCH *[]string `json:"AUTH_LDAP_GROUP_SEARCH,omitempty"`
	// The group type may need to be changed based on the type of the LDAP server.  Values are listed at: https://django-auth-ldap.readthedocs.io/en/stable/groups.html#types-of-groups
	AUTH_LDAP_GROUP_TYPE *string `json:"AUTH_LDAP_GROUP_TYPE,omitempty"`
	// Key value parameters to send the chosen group type init method.
	AUTH_LDAP_GROUP_TYPE_PARAMS *map[string]interface{} `json:"AUTH_LDAP_GROUP_TYPE_PARAMS,omitempty"`
	// Mapping between organization admins/users and LDAP groups. This controls which users are placed into which Tower organizations relative to their LDAP group memberships. Configuration details are available in the Ansible Tower documentation.
	AUTH_LDAP_ORGANIZATION_MAP *map[string]interface{} `json:"AUTH_LDAP_ORGANIZATION_MAP,omitempty"`
	// Group DN required to login. If specified, user must be a member of this group to login via LDAP. If not set, everyone in LDAP that matches the user search will be able to login via Tower. Only one require group is supported.
	AUTH_LDAP_REQUIRE_GROUP *string `json:"AUTH_LDAP_REQUIRE_GROUP,omitempty"`
	// URI to connect to LDAP server, such as \"ldap://ldap.example.com:389\" (non-SSL) or \"ldaps://ldap.example.com:636\" (SSL). Multiple LDAP servers may be specified by separating with spaces or commas. LDAP authentication is disabled if this parameter is empty.
	AUTH_LDAP_SERVER_URI *string `json:"AUTH_LDAP_SERVER_URI,omitempty"`
	// Whether to enable TLS when the LDAP connection is not using SSL.
	AUTH_LDAP_START_TLS *bool `json:"AUTH_LDAP_START_TLS,omitempty"`
	// Mapping between team members (users) and LDAP groups. Configuration details are available in the Ansible Tower documentation.
	AUTH_LDAP_TEAM_MAP *map[string]interface{} `json:"AUTH_LDAP_TEAM_MAP,omitempty"`
	// Mapping of LDAP user schema to Tower API user attributes. The default setting is valid for ActiveDirectory but users with other LDAP configurations may need to change the values. Refer to the Ansible Tower documentation for additional details.
	AUTH_LDAP_USER_ATTR_MAP *map[string]interface{} `json:"AUTH_LDAP_USER_ATTR_MAP,omitempty"`
	// Alternative to user search, if user DNs are all of the same format. This approach is more efficient for user lookups than searching if it is usable in your organizational environment. If this setting has a value it will be used instead of AUTH_LDAP_USER_SEARCH.
	AUTH_LDAP_USER_DN_TEMPLATE *string `json:"AUTH_LDAP_USER_DN_TEMPLATE,omitempty"`
	// Retrieve users from a given group. At this time, superuser and system auditors are the only groups supported. Refer to the Ansible Tower documentation for more detail.
	AUTH_LDAP_USER_FLAGS_BY_GROUP *map[string]interface{} `json:"AUTH_LDAP_USER_FLAGS_BY_GROUP,omitempty"`
	// LDAP search query to find users.  Any user that matches the given pattern will be able to login to Tower.  The user should also be mapped into a Tower organization (as defined in the AUTH_LDAP_ORGANIZATION_MAP setting).  If multiple search queries need to be supported use of \"LDAPUnion\" is possible. See Tower documentation for details.
	AUTH_LDAP_USER_SEARCH *[]string `json:"AUTH_LDAP_USER_SEARCH,omitempty"`
	// Interval (in seconds) between data gathering.
	AUTOMATION_ANALYTICS_GATHER_INTERVAL *int32 `json:"AUTOMATION_ANALYTICS_GATHER_INTERVAL,omitempty"`
	// 
	AUTOMATION_ANALYTICS_LAST_GATHER string `json:"AUTOMATION_ANALYTICS_LAST_GATHER"`
	// This setting is used to to configure data collection for the Automation Analytics dashboard
	AUTOMATION_ANALYTICS_URL *string `json:"AUTOMATION_ANALYTICS_URL,omitempty"`
	// List of paths to search for extra callback plugins to be used when running jobs. Enter one path per line.
	AWX_ANSIBLE_CALLBACK_PLUGINS *[]string `json:"AWX_ANSIBLE_CALLBACK_PLUGINS,omitempty"`
	// Allows collections to be dynamically downloaded from a requirements.yml file for SCM projects.
	AWX_COLLECTIONS_ENABLED *bool `json:"AWX_COLLECTIONS_ENABLED,omitempty"`
	// The number of seconds to sleep between status checks for jobs running on isolated instances.
	AWX_ISOLATED_CHECK_INTERVAL int32 `json:"AWX_ISOLATED_CHECK_INTERVAL"`
	// Ansible SSH connection timeout (in seconds) to use when communicating with isolated instances. Value should be substantially greater than expected network latency.
	AWX_ISOLATED_CONNECTION_TIMEOUT *int32 `json:"AWX_ISOLATED_CONNECTION_TIMEOUT,omitempty"`
	// When set to True, AWX will enforce strict host key checking for communication with isolated nodes.
	AWX_ISOLATED_HOST_KEY_CHECKING *bool `json:"AWX_ISOLATED_HOST_KEY_CHECKING,omitempty"`
	// The timeout (in seconds) for launching jobs on isolated instances.  This includes the time needed to copy source control files (playbooks) to the isolated instance.
	AWX_ISOLATED_LAUNCH_TIMEOUT int32 `json:"AWX_ISOLATED_LAUNCH_TIMEOUT"`
	// The directory in which Tower will create new temporary directories for job execution and isolation (such as credential files and custom inventory scripts).
	AWX_PROOT_BASE_PATH string `json:"AWX_PROOT_BASE_PATH"`
	// Isolates an Ansible job from protected parts of the system to prevent exposing sensitive information.
	AWX_PROOT_ENABLED bool `json:"AWX_PROOT_ENABLED"`
	// Additional paths to hide from isolated processes. Enter one path per line.
	AWX_PROOT_HIDE_PATHS *[]string `json:"AWX_PROOT_HIDE_PATHS,omitempty"`
	// List of paths that would otherwise be hidden to expose to isolated jobs. Enter one path per line.
	AWX_PROOT_SHOW_PATHS *[]string `json:"AWX_PROOT_SHOW_PATHS,omitempty"`
	// Interval (in seconds) between polls for cpu usage. Setting this lower than the default will affect playbook performance.
	AWX_RESOURCE_PROFILING_CPU_POLL_INTERVAL *float32 `json:"AWX_RESOURCE_PROFILING_CPU_POLL_INTERVAL,omitempty"`
	// If set, detailed resource profiling data will be collected on all jobs. This data can be gathered with `sosreport`.
	AWX_RESOURCE_PROFILING_ENABLED *bool `json:"AWX_RESOURCE_PROFILING_ENABLED,omitempty"`
	// Interval (in seconds) between polls for memory usage. Setting this lower than the default will affect playbook performance.
	AWX_RESOURCE_PROFILING_MEMORY_POLL_INTERVAL *float32 `json:"AWX_RESOURCE_PROFILING_MEMORY_POLL_INTERVAL,omitempty"`
	// Interval (in seconds) between polls for PID count. Setting this lower than the default will affect playbook performance.
	AWX_RESOURCE_PROFILING_PID_POLL_INTERVAL *float32 `json:"AWX_RESOURCE_PROFILING_PID_POLL_INTERVAL,omitempty"`
	// Allows roles to be dynamically downloaded from a requirements.yml file for SCM projects.
	AWX_ROLES_ENABLED *bool `json:"AWX_ROLES_ENABLED,omitempty"`
	// Follow symbolic links when scanning for playbooks. Be aware that setting this to True can lead to infinite recursion if a link points to a parent directory of itself.
	AWX_SHOW_PLAYBOOK_LINKS *bool `json:"AWX_SHOW_PLAYBOOK_LINKS,omitempty"`
	// Additional environment variables set for playbook runs, inventory updates, project updates, and notification sending.
	AWX_TASK_ENV *map[string]interface{} `json:"AWX_TASK_ENV,omitempty"`
	// If needed, you can add specific information (such as a legal notice or a disclaimer) to a text box in the login modal using this setting. Any content added must be in plain text or an HTML fragment, as other markup languages are not supported.
	CUSTOM_LOGIN_INFO *string `json:"CUSTOM_LOGIN_INFO,omitempty"`
	// To set up a custom logo, provide a file that you create. For the custom logo to look its best, use a .png file with a transparent background. GIF, PNG and JPEG formats are supported.
	CUSTOM_LOGO *string `json:"CUSTOM_LOGO,omitempty"`
	// Paths where Tower will look for custom virtual environments (in addition to /var/lib/awx/venv/). Enter one path per line.
	CUSTOM_VENV_PATHS *[]string `json:"CUSTOM_VENV_PATHS,omitempty"`
	// Maximum time in seconds to allow inventory updates to run. Use value of 0 to indicate that no timeout should be imposed. A timeout set on an individual inventory source will override this.
	DEFAULT_INVENTORY_UPDATE_TIMEOUT *int32 `json:"DEFAULT_INVENTORY_UPDATE_TIMEOUT,omitempty"`
	// Maximum time in seconds to allow jobs to run. Use value of 0 to indicate that no timeout should be imposed. A timeout set on an individual job template will override this.
	DEFAULT_JOB_TIMEOUT *int32 `json:"DEFAULT_JOB_TIMEOUT,omitempty"`
	// Maximum time in seconds to allow project updates to run. Use value of 0 to indicate that no timeout should be imposed. A timeout set on an individual project will override this.
	DEFAULT_PROJECT_UPDATE_TIMEOUT *int32 `json:"DEFAULT_PROJECT_UPDATE_TIMEOUT,omitempty"`
	// Maximum Size of Standard Output in bytes to display for a single job or ad hoc command event. `stdout` will end with `…` when truncated.
	EVENT_STDOUT_MAX_BYTES_DISPLAY int32 `json:"EVENT_STDOUT_MAX_BYTES_DISPLAY"`
	// If set to true, certificate validation will not be done when installing content from any Galaxy server.
	GALAXY_IGNORE_CERTS *bool `json:"GALAXY_IGNORE_CERTS,omitempty"`
	// Enables Tower to gather data on automation and send it to Red Hat.
	INSIGHTS_TRACKING_STATE *bool `json:"INSIGHTS_TRACKING_STATE,omitempty"`
	// URL to which unauthorized users will be redirected to log in. If blank, users will be sent to the Tower login page.
	LOGIN_REDIRECT_OVERRIDE *string `json:"LOGIN_REDIRECT_OVERRIDE,omitempty"`
	// Enable sending logs to external log aggregator.
	LOG_AGGREGATOR_ENABLED *bool `json:"LOG_AGGREGATOR_ENABLED,omitempty"`
	// Hostname/IP where external logs will be sent to.
	LOG_AGGREGATOR_HOST *string `json:"LOG_AGGREGATOR_HOST,omitempty"`
	// If set, system tracking facts will be sent for each package, service, or other item found in a scan, allowing for greater search query granularity. If unset, facts will be sent as a single dictionary, allowing for greater efficiency in fact processing.
	LOG_AGGREGATOR_INDIVIDUAL_FACTS *bool `json:"LOG_AGGREGATOR_INDIVIDUAL_FACTS,omitempty"`
	// Level threshold used by log handler. Severities from lowest to highest are DEBUG, INFO, WARNING, ERROR, CRITICAL. Messages less severe than the threshold will be ignored by log handler. (messages under category awx.anlytics ignore this setting)
	LOG_AGGREGATOR_LEVEL *string `json:"LOG_AGGREGATOR_LEVEL,omitempty"`
	// List of loggers that will send HTTP logs to the collector, these can include any or all of:  awx - service logs activity_stream - activity stream records job_events - callback data from Ansible job events system_tracking - facts gathered from scan jobs.
	LOG_AGGREGATOR_LOGGERS *[]string `json:"LOG_AGGREGATOR_LOGGERS,omitempty"`
	// Amount of data to store (in gigabytes) during an outage of the external log aggregator (defaults to 1). Equivalent to the rsyslogd queue.maxdiskspace setting.
	LOG_AGGREGATOR_MAX_DISK_USAGE_GB *int32 `json:"LOG_AGGREGATOR_MAX_DISK_USAGE_GB,omitempty"`
	// Location to persist logs that should be retried after an outage of the external log aggregator (defaults to /var/lib/awx). Equivalent to the rsyslogd queue.spoolDirectory setting.
	LOG_AGGREGATOR_MAX_DISK_USAGE_PATH *string `json:"LOG_AGGREGATOR_MAX_DISK_USAGE_PATH,omitempty"`
	// Password or authentication token for external log aggregator (if required; HTTP/s only).
	LOG_AGGREGATOR_PASSWORD *string `json:"LOG_AGGREGATOR_PASSWORD,omitempty"`
	// Port on Logging Aggregator to send logs to (if required and not provided in Logging Aggregator).
	LOG_AGGREGATOR_PORT *int32 `json:"LOG_AGGREGATOR_PORT,omitempty"`
	// Protocol used to communicate with log aggregator.  HTTPS/HTTP assumes HTTPS unless http:// is explicitly used in the Logging Aggregator hostname.
	LOG_AGGREGATOR_PROTOCOL *string `json:"LOG_AGGREGATOR_PROTOCOL,omitempty"`
	// Enabled high verbosity debugging for rsyslogd.  Useful for debugging connection issues for external log aggregation.
	LOG_AGGREGATOR_RSYSLOGD_DEBUG *bool `json:"LOG_AGGREGATOR_RSYSLOGD_DEBUG,omitempty"`
	// Number of seconds for a TCP connection to external log aggregator to timeout. Applies to HTTPS and TCP log aggregator protocols.
	LOG_AGGREGATOR_TCP_TIMEOUT *int32 `json:"LOG_AGGREGATOR_TCP_TIMEOUT,omitempty"`
	// Useful to uniquely identify Tower instances.
	LOG_AGGREGATOR_TOWER_UUID *string `json:"LOG_AGGREGATOR_TOWER_UUID,omitempty"`
	// Format messages for the chosen log aggregator.
	LOG_AGGREGATOR_TYPE *string `json:"LOG_AGGREGATOR_TYPE,omitempty"`
	// Username for external log aggregator (if required; HTTP/s only).
	LOG_AGGREGATOR_USERNAME *string `json:"LOG_AGGREGATOR_USERNAME,omitempty"`
	// Flag to control enable/disable of certificate verification when LOG_AGGREGATOR_PROTOCOL is \"https\". If enabled, Tower's log handler will verify certificate sent by external log aggregator before establishing connection.
	LOG_AGGREGATOR_VERIFY_CERT *bool `json:"LOG_AGGREGATOR_VERIFY_CERT,omitempty"`
	// Controls whether any Organization Admin has the privileges to create and manage users and teams. You may want to disable this ability if you are using an LDAP or SAML integration.
	MANAGE_ORGANIZATION_AUTH bool `json:"MANAGE_ORGANIZATION_AUTH"`
	// Saving a Job Template with more than this number of forks will result in an error. When set to 0, no limit is applied.
	MAX_FORKS *int32 `json:"MAX_FORKS,omitempty"`
	// Maximum number of job events for the UI to retrieve within a single request.
	MAX_UI_JOB_EVENTS int32 `json:"MAX_UI_JOB_EVENTS"`
	// Dictionary for customizing OAuth 2 timeouts, available items are `ACCESS_TOKEN_EXPIRE_SECONDS`, the duration of access tokens in the number of seconds, `AUTHORIZATION_CODE_EXPIRE_SECONDS`, the duration of authorization codes in the number of seconds, and `REFRESH_TOKEN_EXPIRE_SECONDS`, the duration of refresh tokens, after expired access tokens, in the number of seconds.
	OAUTH2PROVIDER *map[string]interface{} `json:"OAUTH2_PROVIDER,omitempty"`
	// Controls whether any Organization Admin can view all users and teams, even those not associated with their Organization.
	ORG_ADMINS_CAN_SEE_ALL_USERS bool `json:"ORG_ADMINS_CAN_SEE_ALL_USERS"`
	// Adds the CLI -vvv flag to ansible-playbook runs of project_update.yml used for project updates.
	PROJECT_UPDATE_VVV bool `json:"PROJECT_UPDATE_VVV"`
	// If Tower is behind a reverse proxy/load balancer, use this setting to configure the proxy IP addresses from which Tower should trust custom REMOTE_HOST_HEADERS header values. If this setting is an empty list (the default), the headers specified by REMOTE_HOST_HEADERS will be trusted unconditionally')
	PROXY_IP_ALLOWED_LIST []string `json:"PROXY_IP_ALLOWED_LIST"`
	// Port of RADIUS server.
	RADIUS_PORT *int32 `json:"RADIUS_PORT,omitempty"`
	// Shared secret for authenticating to RADIUS server.
	RADIUS_SECRET *string `json:"RADIUS_SECRET,omitempty"`
	// Hostname/IP of RADIUS server. RADIUS authentication is disabled if this setting is empty.
	RADIUS_SERVER *string `json:"RADIUS_SERVER,omitempty"`
	// This password is used to retrieve license information and to send Automation Analytics
	REDHAT_PASSWORD *string `json:"REDHAT_PASSWORD,omitempty"`
	// This username is used to retrieve license information and to send Automation Analytics
	REDHAT_USERNAME *string `json:"REDHAT_USERNAME,omitempty"`
	// HTTP headers and meta keys to search to determine remote host name or IP. Add additional items to this list, such as \"HTTP_X_FORWARDED_FOR\", if behind a reverse proxy. See the \"Proxy Support\" section of the Adminstrator guide for more details.
	REMOTE_HOST_HEADERS []string `json:"REMOTE_HOST_HEADERS"`
	// When enabled (the default), mapped Organizations and Teams will be created automatically on successful SAML login.
	SAML_AUTO_CREATE_OBJECTS *bool `json:"SAML_AUTO_CREATE_OBJECTS,omitempty"`
	// Maximum number of the same job template that can be waiting to run when launching from a schedule before no more are created.
	SCHEDULE_MAX_JOBS int32 `json:"SCHEDULE_MAX_JOBS"`
	// Maximum number of simultaneous logged in sessions a user may have. To disable enter -1.
	SESSIONS_PER_USER int32 `json:"SESSIONS_PER_USER"`
	// Number of seconds that a user is inactive before they will need to login again.
	SESSION_COOKIE_AGE int32 `json:"SESSION_COOKIE_AGE"`
	// The OAuth2 key (Client ID) from your Azure AD application.
	SOCIALAUTHAZUREADOAUTH2KEY *string `json:"SOCIAL_AUTH_AZUREAD_OAUTH2_KEY,omitempty"`
	// Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which Tower organizations based on their username and email address. Configuration details are available in the Ansible Tower documentation.
	SOCIALAUTHAZUREADOAUTH2ORGANIZATIONMAP *map[string]interface{} `json:"SOCIAL_AUTH_AZUREAD_OAUTH2_ORGANIZATION_MAP,omitempty"`
	// The OAuth2 secret (Client Secret) from your Azure AD application.
	SOCIALAUTHAZUREADOAUTH2SECRET *string `json:"SOCIAL_AUTH_AZUREAD_OAUTH2_SECRET,omitempty"`
	// Mapping of team members (users) from social auth accounts. Configuration details are available in Tower documentation.
	SOCIALAUTHAZUREADOAUTH2TEAMMAP *map[string]interface{} `json:"SOCIAL_AUTH_AZUREAD_OAUTH2_TEAM_MAP,omitempty"`
	// The OAuth2 key (Client ID) from your GitHub developer application.
	SOCIAL_AUTH_GITHUB_KEY *string `json:"SOCIAL_AUTH_GITHUB_KEY,omitempty"`
	// Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which Tower organizations based on their username and email address. Configuration details are available in the Ansible Tower documentation.
	SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP *map[string]interface{} `json:"SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP,omitempty"`
	// The OAuth2 key (Client ID) from your GitHub organization application.
	SOCIAL_AUTH_GITHUB_ORG_KEY *string `json:"SOCIAL_AUTH_GITHUB_ORG_KEY,omitempty"`
	// The name of your GitHub organization, as used in your organization's URL: https://github.com/<yourorg>/.
	SOCIAL_AUTH_GITHUB_ORG_NAME *string `json:"SOCIAL_AUTH_GITHUB_ORG_NAME,omitempty"`
	// Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which Tower organizations based on their username and email address. Configuration details are available in the Ansible Tower documentation.
	SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP *map[string]interface{} `json:"SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP,omitempty"`
	// The OAuth2 secret (Client Secret) from your GitHub organization application.
	SOCIAL_AUTH_GITHUB_ORG_SECRET *string `json:"SOCIAL_AUTH_GITHUB_ORG_SECRET,omitempty"`
	// Mapping of team members (users) from social auth accounts. Configuration details are available in Tower documentation.
	SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP *map[string]interface{} `json:"SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP,omitempty"`
	// The OAuth2 secret (Client Secret) from your GitHub developer application.
	SOCIAL_AUTH_GITHUB_SECRET *string `json:"SOCIAL_AUTH_GITHUB_SECRET,omitempty"`
	// Find the numeric team ID using the Github API: http://fabian-kostadinov.github.io/2015/01/16/how-to-find-a-github-team-id/.
	SOCIAL_AUTH_GITHUB_TEAM_ID *string `json:"SOCIAL_AUTH_GITHUB_TEAM_ID,omitempty"`
	// The OAuth2 key (Client ID) from your GitHub organization application.
	SOCIAL_AUTH_GITHUB_TEAM_KEY *string `json:"SOCIAL_AUTH_GITHUB_TEAM_KEY,omitempty"`
	// Mapping of team members (users) from social auth accounts. Configuration details are available in Tower documentation.
	SOCIAL_AUTH_GITHUB_TEAM_MAP *map[string]interface{} `json:"SOCIAL_AUTH_GITHUB_TEAM_MAP,omitempty"`
	// Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which Tower organizations based on their username and email address. Configuration details are available in the Ansible Tower documentation.
	SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP *map[string]interface{} `json:"SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP,omitempty"`
	// The OAuth2 secret (Client Secret) from your GitHub organization application.
	SOCIAL_AUTH_GITHUB_TEAM_SECRET *string `json:"SOCIAL_AUTH_GITHUB_TEAM_SECRET,omitempty"`
	// Mapping of team members (users) from social auth accounts. Configuration details are available in Tower documentation.
	SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP *map[string]interface{} `json:"SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP,omitempty"`
	// Extra arguments for Google OAuth2 login. You can restrict it to only allow a single domain to authenticate, even if the user is logged in with multple Google accounts. Refer to the Ansible Tower documentation for more detail.
	SOCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTS *map[string]interface{} `json:"SOCIAL_AUTH_GOOGLE_OAUTH2_AUTH_EXTRA_ARGUMENTS,omitempty"`
	// The OAuth2 key from your web application.
	SOCIALAUTHGOOGLEOAUTH2KEY *string `json:"SOCIAL_AUTH_GOOGLE_OAUTH2_KEY,omitempty"`
	// Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which Tower organizations based on their username and email address. Configuration details are available in the Ansible Tower documentation.
	SOCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAP *map[string]interface{} `json:"SOCIAL_AUTH_GOOGLE_OAUTH2_ORGANIZATION_MAP,omitempty"`
	// The OAuth2 secret from your web application.
	SOCIALAUTHGOOGLEOAUTH2SECRET *string `json:"SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET,omitempty"`
	// Mapping of team members (users) from social auth accounts. Configuration details are available in Tower documentation.
	SOCIALAUTHGOOGLEOAUTH2TEAMMAP *map[string]interface{} `json:"SOCIAL_AUTH_GOOGLE_OAUTH2_TEAM_MAP,omitempty"`
	// Update this setting to restrict the domains who are allowed to login using Google OAuth2.
	SOCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINS *[]string `json:"SOCIAL_AUTH_GOOGLE_OAUTH2_WHITELISTED_DOMAINS,omitempty"`
	// Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which Tower organizations based on their username and email address. Configuration details are available in the Ansible Tower documentation.
	SOCIAL_AUTH_ORGANIZATION_MAP *map[string]interface{} `json:"SOCIAL_AUTH_ORGANIZATION_MAP,omitempty"`
	// Configure the Entity ID, SSO URL and certificate for each identity provider (IdP) in use. Multiple SAML IdPs are supported. Some IdPs may provide user data using attribute names that differ from the default OIDs. Attribute names may be overridden for each IdP. Refer to the Ansible documentation for additional details and syntax.
	SOCIAL_AUTH_SAML_ENABLED_IDPS *map[string]interface{} `json:"SOCIAL_AUTH_SAML_ENABLED_IDPS,omitempty"`
	// A list of tuples that maps IDP attributes to extra_attributes. Each attribute will be a list of values, even if only 1 value.
	SOCIAL_AUTH_SAML_EXTRA_DATA *[]string `json:"SOCIAL_AUTH_SAML_EXTRA_DATA,omitempty"`
	// Used to translate user organization membership into Tower.
	SOCIAL_AUTH_SAML_ORGANIZATION_ATTR *map[string]interface{} `json:"SOCIAL_AUTH_SAML_ORGANIZATION_ATTR,omitempty"`
	// Mapping to organization admins/users from social auth accounts. This setting controls which users are placed into which Tower organizations based on their username and email address. Configuration details are available in the Ansible Tower documentation.
	SOCIAL_AUTH_SAML_ORGANIZATION_MAP *map[string]interface{} `json:"SOCIAL_AUTH_SAML_ORGANIZATION_MAP,omitempty"`
	// Provide the URL, display name, and the name of your app. Refer to the Ansible Tower documentation for example syntax.
	SOCIAL_AUTH_SAML_ORG_INFO map[string]interface{} `json:"SOCIAL_AUTH_SAML_ORG_INFO"`
	// A dict of key value pairs that are passed to the underlying python-saml security setting https://github.com/onelogin/python-saml#settings
	SOCIAL_AUTH_SAML_SECURITY_CONFIG *map[string]interface{} `json:"SOCIAL_AUTH_SAML_SECURITY_CONFIG,omitempty"`
	// The application-defined unique identifier used as the audience of the SAML service provider (SP) configuration. This is usually the URL for Tower.
	SOCIAL_AUTH_SAML_SP_ENTITY_ID *string `json:"SOCIAL_AUTH_SAML_SP_ENTITY_ID,omitempty"`
	// A dict of key value pairs to be passed to the underlying python-saml Service Provider configuration setting.
	SOCIAL_AUTH_SAML_SP_EXTRA *map[string]interface{} `json:"SOCIAL_AUTH_SAML_SP_EXTRA,omitempty"`
	// Create a keypair for Tower to use as a service provider (SP) and include the private key content here.
	SOCIAL_AUTH_SAML_SP_PRIVATE_KEY string `json:"SOCIAL_AUTH_SAML_SP_PRIVATE_KEY"`
	// Create a keypair for Tower to use as a service provider (SP) and include the certificate content here.
	SOCIAL_AUTH_SAML_SP_PUBLIC_CERT string `json:"SOCIAL_AUTH_SAML_SP_PUBLIC_CERT"`
	// Provide the name and email address of the support contact for your service provider. Refer to the Ansible Tower documentation for example syntax.
	SOCIAL_AUTH_SAML_SUPPORT_CONTACT map[string]interface{} `json:"SOCIAL_AUTH_SAML_SUPPORT_CONTACT"`
	// Used to translate user team membership into Tower.
	SOCIAL_AUTH_SAML_TEAM_ATTR *map[string]interface{} `json:"SOCIAL_AUTH_SAML_TEAM_ATTR,omitempty"`
	// Mapping of team members (users) from social auth accounts. Configuration details are available in Tower documentation.
	SOCIAL_AUTH_SAML_TEAM_MAP *map[string]interface{} `json:"SOCIAL_AUTH_SAML_TEAM_MAP,omitempty"`
	// Provide the name and email address of the technical contact for your service provider. Refer to the Ansible Tower documentation for example syntax.
	SOCIAL_AUTH_SAML_TECHNICAL_CONTACT map[string]interface{} `json:"SOCIAL_AUTH_SAML_TECHNICAL_CONTACT"`
	// Mapping of team members (users) from social auth accounts. Configuration details are available in Tower documentation.
	SOCIAL_AUTH_TEAM_MAP *map[string]interface{} `json:"SOCIAL_AUTH_TEAM_MAP,omitempty"`
	// When set to an empty list `[]`, this setting prevents new user accounts from being created. Only users who have previously logged in using social auth or have a user account with a matching email address will be able to login.
	SOCIAL_AUTH_USER_FIELDS *[]string `json:"SOCIAL_AUTH_USER_FIELDS,omitempty"`
	// Maximum Size of Standard Output in bytes to display before requiring the output be downloaded.
	STDOUT_MAX_BYTES_DISPLAY int32 `json:"STDOUT_MAX_BYTES_DISPLAY"`
	// Choose the authentication protocol used by TACACS+ client.
	TACACSPLUS_AUTH_PROTOCOL *string `json:"TACACSPLUS_AUTH_PROTOCOL,omitempty"`
	// Hostname of TACACS+ server.
	TACACSPLUS_HOST *string `json:"TACACSPLUS_HOST,omitempty"`
	// Port number of TACACS+ server.
	TACACSPLUS_PORT *int32 `json:"TACACSPLUS_PORT,omitempty"`
	// Shared secret for authenticating to TACACS+ server.
	TACACSPLUS_SECRET *string `json:"TACACSPLUS_SECRET,omitempty"`
	// TACACS+ session timeout value in seconds, 0 disables timeout.
	TACACSPLUS_SESSION_TIMEOUT *int32 `json:"TACACSPLUS_SESSION_TIMEOUT,omitempty"`
	// This setting is used by services like notifications to render a valid url to the Tower host.
	TOWER_URL_BASE string `json:"TOWER_URL_BASE"`
	// If disabled, the page will not refresh when events are received. Reloading the page will be required to get the latest details.
	UI_LIVE_UPDATES_ENABLED bool `json:"UI_LIVE_UPDATES_ENABLED"`
}

// NewInlineObject60 instantiates a new InlineObject60 object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInlineObject60(aCTIVITYSTREAMENABLED bool, aCTIVITYSTREAMENABLEDFORINVENTORYSYNC bool, aLLOWJINJAINEXTRAVARS string, aUTHBASICENABLED bool, aUTOMATIONANALYTICSLASTGATHER string, aWXISOLATEDCHECKINTERVAL int32, aWXISOLATEDLAUNCHTIMEOUT int32, aWXPROOTBASEPATH string, aWXPROOTENABLED bool, eVENTSTDOUTMAXBYTESDISPLAY int32, mANAGEORGANIZATIONAUTH bool, mAXUIJOBEVENTS int32, oRGADMINSCANSEEALLUSERS bool, pROJECTUPDATEVVV bool, pROXYIPALLOWEDLIST []string, rEMOTEHOSTHEADERS []string, sCHEDULEMAXJOBS int32, sESSIONSPERUSER int32, sESSIONCOOKIEAGE int32, sOCIALAUTHSAMLORGINFO map[string]interface{}, sOCIALAUTHSAMLSPPRIVATEKEY string, sOCIALAUTHSAMLSPPUBLICCERT string, sOCIALAUTHSAMLSUPPORTCONTACT map[string]interface{}, sOCIALAUTHSAMLTECHNICALCONTACT map[string]interface{}, sTDOUTMAXBYTESDISPLAY int32, tOWERURLBASE string, uILIVEUPDATESENABLED bool, ) *InlineObject60 {
	this := InlineObject60{}
	this.ACTIVITY_STREAM_ENABLED = aCTIVITYSTREAMENABLED
	this.ACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC = aCTIVITYSTREAMENABLEDFORINVENTORYSYNC
	this.ALLOW_JINJA_IN_EXTRA_VARS = aLLOWJINJAINEXTRAVARS
	this.AUTH_BASIC_ENABLED = aUTHBASICENABLED
	this.AUTOMATION_ANALYTICS_LAST_GATHER = aUTOMATIONANALYTICSLASTGATHER
	this.AWX_ISOLATED_CHECK_INTERVAL = aWXISOLATEDCHECKINTERVAL
	this.AWX_ISOLATED_LAUNCH_TIMEOUT = aWXISOLATEDLAUNCHTIMEOUT
	this.AWX_PROOT_BASE_PATH = aWXPROOTBASEPATH
	this.AWX_PROOT_ENABLED = aWXPROOTENABLED
	this.EVENT_STDOUT_MAX_BYTES_DISPLAY = eVENTSTDOUTMAXBYTESDISPLAY
	this.MANAGE_ORGANIZATION_AUTH = mANAGEORGANIZATIONAUTH
	this.MAX_UI_JOB_EVENTS = mAXUIJOBEVENTS
	this.ORG_ADMINS_CAN_SEE_ALL_USERS = oRGADMINSCANSEEALLUSERS
	this.PROJECT_UPDATE_VVV = pROJECTUPDATEVVV
	this.PROXY_IP_ALLOWED_LIST = pROXYIPALLOWEDLIST
	this.REMOTE_HOST_HEADERS = rEMOTEHOSTHEADERS
	this.SCHEDULE_MAX_JOBS = sCHEDULEMAXJOBS
	this.SESSIONS_PER_USER = sESSIONSPERUSER
	this.SESSION_COOKIE_AGE = sESSIONCOOKIEAGE
	this.SOCIAL_AUTH_SAML_ORG_INFO = sOCIALAUTHSAMLORGINFO
	this.SOCIAL_AUTH_SAML_SP_PRIVATE_KEY = sOCIALAUTHSAMLSPPRIVATEKEY
	this.SOCIAL_AUTH_SAML_SP_PUBLIC_CERT = sOCIALAUTHSAMLSPPUBLICCERT
	this.SOCIAL_AUTH_SAML_SUPPORT_CONTACT = sOCIALAUTHSAMLSUPPORTCONTACT
	this.SOCIAL_AUTH_SAML_TECHNICAL_CONTACT = sOCIALAUTHSAMLTECHNICALCONTACT
	this.STDOUT_MAX_BYTES_DISPLAY = sTDOUTMAXBYTESDISPLAY
	this.TOWER_URL_BASE = tOWERURLBASE
	this.UI_LIVE_UPDATES_ENABLED = uILIVEUPDATESENABLED
	return &this
}

// NewInlineObject60WithDefaults instantiates a new InlineObject60 object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInlineObject60WithDefaults() *InlineObject60 {
	this := InlineObject60{}
	return &this
}

// GetACTIVITY_STREAM_ENABLED returns the ACTIVITY_STREAM_ENABLED field value
func (o *InlineObject60) GetACTIVITY_STREAM_ENABLED() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.ACTIVITY_STREAM_ENABLED
}

// GetACTIVITY_STREAM_ENABLEDOk returns a tuple with the ACTIVITY_STREAM_ENABLED field value
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetACTIVITY_STREAM_ENABLEDOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ACTIVITY_STREAM_ENABLED, true
}

// SetACTIVITY_STREAM_ENABLED sets field value
func (o *InlineObject60) SetACTIVITY_STREAM_ENABLED(v bool) {
	o.ACTIVITY_STREAM_ENABLED = v
}

// GetACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC returns the ACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC field value
func (o *InlineObject60) GetACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.ACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC
}

// GetACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNCOk returns a tuple with the ACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC field value
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNCOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC, true
}

// SetACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC sets field value
func (o *InlineObject60) SetACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC(v bool) {
	o.ACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC = v
}

// GetAD_HOC_COMMANDS returns the AD_HOC_COMMANDS field value if set, zero value otherwise.
func (o *InlineObject60) GetAD_HOC_COMMANDS() []string {
	if o == nil || o.AD_HOC_COMMANDS == nil {
		var ret []string
		return ret
	}
	return *o.AD_HOC_COMMANDS
}

// GetAD_HOC_COMMANDSOk returns a tuple with the AD_HOC_COMMANDS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAD_HOC_COMMANDSOk() (*[]string, bool) {
	if o == nil || o.AD_HOC_COMMANDS == nil {
		return nil, false
	}
	return o.AD_HOC_COMMANDS, true
}

// HasAD_HOC_COMMANDS returns a boolean if a field has been set.
func (o *InlineObject60) HasAD_HOC_COMMANDS() bool {
	if o != nil && o.AD_HOC_COMMANDS != nil {
		return true
	}

	return false
}

// SetAD_HOC_COMMANDS gets a reference to the given []string and assigns it to the AD_HOC_COMMANDS field.
func (o *InlineObject60) SetAD_HOC_COMMANDS(v []string) {
	o.AD_HOC_COMMANDS = &v
}

// GetALLOW_JINJA_IN_EXTRA_VARS returns the ALLOW_JINJA_IN_EXTRA_VARS field value
func (o *InlineObject60) GetALLOW_JINJA_IN_EXTRA_VARS() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.ALLOW_JINJA_IN_EXTRA_VARS
}

// GetALLOW_JINJA_IN_EXTRA_VARSOk returns a tuple with the ALLOW_JINJA_IN_EXTRA_VARS field value
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetALLOW_JINJA_IN_EXTRA_VARSOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ALLOW_JINJA_IN_EXTRA_VARS, true
}

// SetALLOW_JINJA_IN_EXTRA_VARS sets field value
func (o *InlineObject60) SetALLOW_JINJA_IN_EXTRA_VARS(v string) {
	o.ALLOW_JINJA_IN_EXTRA_VARS = v
}

// GetALLOWOAUTH2FOREXTERNALUSERS returns the ALLOWOAUTH2FOREXTERNALUSERS field value if set, zero value otherwise.
func (o *InlineObject60) GetALLOWOAUTH2FOREXTERNALUSERS() bool {
	if o == nil || o.ALLOWOAUTH2FOREXTERNALUSERS == nil {
		var ret bool
		return ret
	}
	return *o.ALLOWOAUTH2FOREXTERNALUSERS
}

// GetALLOWOAUTH2FOREXTERNALUSERSOk returns a tuple with the ALLOWOAUTH2FOREXTERNALUSERS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetALLOWOAUTH2FOREXTERNALUSERSOk() (*bool, bool) {
	if o == nil || o.ALLOWOAUTH2FOREXTERNALUSERS == nil {
		return nil, false
	}
	return o.ALLOWOAUTH2FOREXTERNALUSERS, true
}

// HasALLOWOAUTH2FOREXTERNALUSERS returns a boolean if a field has been set.
func (o *InlineObject60) HasALLOWOAUTH2FOREXTERNALUSERS() bool {
	if o != nil && o.ALLOWOAUTH2FOREXTERNALUSERS != nil {
		return true
	}

	return false
}

// SetALLOWOAUTH2FOREXTERNALUSERS gets a reference to the given bool and assigns it to the ALLOWOAUTH2FOREXTERNALUSERS field.
func (o *InlineObject60) SetALLOWOAUTH2FOREXTERNALUSERS(v bool) {
	o.ALLOWOAUTH2FOREXTERNALUSERS = &v
}

// GetANSIBLE_FACT_CACHE_TIMEOUT returns the ANSIBLE_FACT_CACHE_TIMEOUT field value if set, zero value otherwise.
func (o *InlineObject60) GetANSIBLE_FACT_CACHE_TIMEOUT() int32 {
	if o == nil || o.ANSIBLE_FACT_CACHE_TIMEOUT == nil {
		var ret int32
		return ret
	}
	return *o.ANSIBLE_FACT_CACHE_TIMEOUT
}

// GetANSIBLE_FACT_CACHE_TIMEOUTOk returns a tuple with the ANSIBLE_FACT_CACHE_TIMEOUT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetANSIBLE_FACT_CACHE_TIMEOUTOk() (*int32, bool) {
	if o == nil || o.ANSIBLE_FACT_CACHE_TIMEOUT == nil {
		return nil, false
	}
	return o.ANSIBLE_FACT_CACHE_TIMEOUT, true
}

// HasANSIBLE_FACT_CACHE_TIMEOUT returns a boolean if a field has been set.
func (o *InlineObject60) HasANSIBLE_FACT_CACHE_TIMEOUT() bool {
	if o != nil && o.ANSIBLE_FACT_CACHE_TIMEOUT != nil {
		return true
	}

	return false
}

// SetANSIBLE_FACT_CACHE_TIMEOUT gets a reference to the given int32 and assigns it to the ANSIBLE_FACT_CACHE_TIMEOUT field.
func (o *InlineObject60) SetANSIBLE_FACT_CACHE_TIMEOUT(v int32) {
	o.ANSIBLE_FACT_CACHE_TIMEOUT = &v
}

// GetAUTH_BASIC_ENABLED returns the AUTH_BASIC_ENABLED field value
func (o *InlineObject60) GetAUTH_BASIC_ENABLED() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.AUTH_BASIC_ENABLED
}

// GetAUTH_BASIC_ENABLEDOk returns a tuple with the AUTH_BASIC_ENABLED field value
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTH_BASIC_ENABLEDOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AUTH_BASIC_ENABLED, true
}

// SetAUTH_BASIC_ENABLED sets field value
func (o *InlineObject60) SetAUTH_BASIC_ENABLED(v bool) {
	o.AUTH_BASIC_ENABLED = v
}

// GetAUTHLDAP1BINDDN returns the AUTHLDAP1BINDDN field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP1BINDDN() string {
	if o == nil || o.AUTHLDAP1BINDDN == nil {
		var ret string
		return ret
	}
	return *o.AUTHLDAP1BINDDN
}

// GetAUTHLDAP1BINDDNOk returns a tuple with the AUTHLDAP1BINDDN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP1BINDDNOk() (*string, bool) {
	if o == nil || o.AUTHLDAP1BINDDN == nil {
		return nil, false
	}
	return o.AUTHLDAP1BINDDN, true
}

// HasAUTHLDAP1BINDDN returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP1BINDDN() bool {
	if o != nil && o.AUTHLDAP1BINDDN != nil {
		return true
	}

	return false
}

// SetAUTHLDAP1BINDDN gets a reference to the given string and assigns it to the AUTHLDAP1BINDDN field.
func (o *InlineObject60) SetAUTHLDAP1BINDDN(v string) {
	o.AUTHLDAP1BINDDN = &v
}

// GetAUTHLDAP1BINDPASSWORD returns the AUTHLDAP1BINDPASSWORD field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP1BINDPASSWORD() string {
	if o == nil || o.AUTHLDAP1BINDPASSWORD == nil {
		var ret string
		return ret
	}
	return *o.AUTHLDAP1BINDPASSWORD
}

// GetAUTHLDAP1BINDPASSWORDOk returns a tuple with the AUTHLDAP1BINDPASSWORD field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP1BINDPASSWORDOk() (*string, bool) {
	if o == nil || o.AUTHLDAP1BINDPASSWORD == nil {
		return nil, false
	}
	return o.AUTHLDAP1BINDPASSWORD, true
}

// HasAUTHLDAP1BINDPASSWORD returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP1BINDPASSWORD() bool {
	if o != nil && o.AUTHLDAP1BINDPASSWORD != nil {
		return true
	}

	return false
}

// SetAUTHLDAP1BINDPASSWORD gets a reference to the given string and assigns it to the AUTHLDAP1BINDPASSWORD field.
func (o *InlineObject60) SetAUTHLDAP1BINDPASSWORD(v string) {
	o.AUTHLDAP1BINDPASSWORD = &v
}

// GetAUTHLDAP1CONNECTIONOPTIONS returns the AUTHLDAP1CONNECTIONOPTIONS field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP1CONNECTIONOPTIONS() map[string]interface{} {
	if o == nil || o.AUTHLDAP1CONNECTIONOPTIONS == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AUTHLDAP1CONNECTIONOPTIONS
}

// GetAUTHLDAP1CONNECTIONOPTIONSOk returns a tuple with the AUTHLDAP1CONNECTIONOPTIONS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP1CONNECTIONOPTIONSOk() (*map[string]interface{}, bool) {
	if o == nil || o.AUTHLDAP1CONNECTIONOPTIONS == nil {
		return nil, false
	}
	return o.AUTHLDAP1CONNECTIONOPTIONS, true
}

// HasAUTHLDAP1CONNECTIONOPTIONS returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP1CONNECTIONOPTIONS() bool {
	if o != nil && o.AUTHLDAP1CONNECTIONOPTIONS != nil {
		return true
	}

	return false
}

// SetAUTHLDAP1CONNECTIONOPTIONS gets a reference to the given map[string]interface{} and assigns it to the AUTHLDAP1CONNECTIONOPTIONS field.
func (o *InlineObject60) SetAUTHLDAP1CONNECTIONOPTIONS(v map[string]interface{}) {
	o.AUTHLDAP1CONNECTIONOPTIONS = &v
}

// GetAUTHLDAP1DENYGROUP returns the AUTHLDAP1DENYGROUP field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP1DENYGROUP() string {
	if o == nil || o.AUTHLDAP1DENYGROUP == nil {
		var ret string
		return ret
	}
	return *o.AUTHLDAP1DENYGROUP
}

// GetAUTHLDAP1DENYGROUPOk returns a tuple with the AUTHLDAP1DENYGROUP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP1DENYGROUPOk() (*string, bool) {
	if o == nil || o.AUTHLDAP1DENYGROUP == nil {
		return nil, false
	}
	return o.AUTHLDAP1DENYGROUP, true
}

// HasAUTHLDAP1DENYGROUP returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP1DENYGROUP() bool {
	if o != nil && o.AUTHLDAP1DENYGROUP != nil {
		return true
	}

	return false
}

// SetAUTHLDAP1DENYGROUP gets a reference to the given string and assigns it to the AUTHLDAP1DENYGROUP field.
func (o *InlineObject60) SetAUTHLDAP1DENYGROUP(v string) {
	o.AUTHLDAP1DENYGROUP = &v
}

// GetAUTHLDAP1GROUPSEARCH returns the AUTHLDAP1GROUPSEARCH field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP1GROUPSEARCH() []string {
	if o == nil || o.AUTHLDAP1GROUPSEARCH == nil {
		var ret []string
		return ret
	}
	return *o.AUTHLDAP1GROUPSEARCH
}

// GetAUTHLDAP1GROUPSEARCHOk returns a tuple with the AUTHLDAP1GROUPSEARCH field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP1GROUPSEARCHOk() (*[]string, bool) {
	if o == nil || o.AUTHLDAP1GROUPSEARCH == nil {
		return nil, false
	}
	return o.AUTHLDAP1GROUPSEARCH, true
}

// HasAUTHLDAP1GROUPSEARCH returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP1GROUPSEARCH() bool {
	if o != nil && o.AUTHLDAP1GROUPSEARCH != nil {
		return true
	}

	return false
}

// SetAUTHLDAP1GROUPSEARCH gets a reference to the given []string and assigns it to the AUTHLDAP1GROUPSEARCH field.
func (o *InlineObject60) SetAUTHLDAP1GROUPSEARCH(v []string) {
	o.AUTHLDAP1GROUPSEARCH = &v
}

// GetAUTHLDAP1GROUPTYPE returns the AUTHLDAP1GROUPTYPE field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP1GROUPTYPE() string {
	if o == nil || o.AUTHLDAP1GROUPTYPE == nil {
		var ret string
		return ret
	}
	return *o.AUTHLDAP1GROUPTYPE
}

// GetAUTHLDAP1GROUPTYPEOk returns a tuple with the AUTHLDAP1GROUPTYPE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP1GROUPTYPEOk() (*string, bool) {
	if o == nil || o.AUTHLDAP1GROUPTYPE == nil {
		return nil, false
	}
	return o.AUTHLDAP1GROUPTYPE, true
}

// HasAUTHLDAP1GROUPTYPE returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP1GROUPTYPE() bool {
	if o != nil && o.AUTHLDAP1GROUPTYPE != nil {
		return true
	}

	return false
}

// SetAUTHLDAP1GROUPTYPE gets a reference to the given string and assigns it to the AUTHLDAP1GROUPTYPE field.
func (o *InlineObject60) SetAUTHLDAP1GROUPTYPE(v string) {
	o.AUTHLDAP1GROUPTYPE = &v
}

// GetAUTHLDAP1GROUPTYPEPARAMS returns the AUTHLDAP1GROUPTYPEPARAMS field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP1GROUPTYPEPARAMS() map[string]interface{} {
	if o == nil || o.AUTHLDAP1GROUPTYPEPARAMS == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AUTHLDAP1GROUPTYPEPARAMS
}

// GetAUTHLDAP1GROUPTYPEPARAMSOk returns a tuple with the AUTHLDAP1GROUPTYPEPARAMS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP1GROUPTYPEPARAMSOk() (*map[string]interface{}, bool) {
	if o == nil || o.AUTHLDAP1GROUPTYPEPARAMS == nil {
		return nil, false
	}
	return o.AUTHLDAP1GROUPTYPEPARAMS, true
}

// HasAUTHLDAP1GROUPTYPEPARAMS returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP1GROUPTYPEPARAMS() bool {
	if o != nil && o.AUTHLDAP1GROUPTYPEPARAMS != nil {
		return true
	}

	return false
}

// SetAUTHLDAP1GROUPTYPEPARAMS gets a reference to the given map[string]interface{} and assigns it to the AUTHLDAP1GROUPTYPEPARAMS field.
func (o *InlineObject60) SetAUTHLDAP1GROUPTYPEPARAMS(v map[string]interface{}) {
	o.AUTHLDAP1GROUPTYPEPARAMS = &v
}

// GetAUTHLDAP1ORGANIZATIONMAP returns the AUTHLDAP1ORGANIZATIONMAP field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP1ORGANIZATIONMAP() map[string]interface{} {
	if o == nil || o.AUTHLDAP1ORGANIZATIONMAP == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AUTHLDAP1ORGANIZATIONMAP
}

// GetAUTHLDAP1ORGANIZATIONMAPOk returns a tuple with the AUTHLDAP1ORGANIZATIONMAP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP1ORGANIZATIONMAPOk() (*map[string]interface{}, bool) {
	if o == nil || o.AUTHLDAP1ORGANIZATIONMAP == nil {
		return nil, false
	}
	return o.AUTHLDAP1ORGANIZATIONMAP, true
}

// HasAUTHLDAP1ORGANIZATIONMAP returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP1ORGANIZATIONMAP() bool {
	if o != nil && o.AUTHLDAP1ORGANIZATIONMAP != nil {
		return true
	}

	return false
}

// SetAUTHLDAP1ORGANIZATIONMAP gets a reference to the given map[string]interface{} and assigns it to the AUTHLDAP1ORGANIZATIONMAP field.
func (o *InlineObject60) SetAUTHLDAP1ORGANIZATIONMAP(v map[string]interface{}) {
	o.AUTHLDAP1ORGANIZATIONMAP = &v
}

// GetAUTHLDAP1REQUIREGROUP returns the AUTHLDAP1REQUIREGROUP field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP1REQUIREGROUP() string {
	if o == nil || o.AUTHLDAP1REQUIREGROUP == nil {
		var ret string
		return ret
	}
	return *o.AUTHLDAP1REQUIREGROUP
}

// GetAUTHLDAP1REQUIREGROUPOk returns a tuple with the AUTHLDAP1REQUIREGROUP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP1REQUIREGROUPOk() (*string, bool) {
	if o == nil || o.AUTHLDAP1REQUIREGROUP == nil {
		return nil, false
	}
	return o.AUTHLDAP1REQUIREGROUP, true
}

// HasAUTHLDAP1REQUIREGROUP returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP1REQUIREGROUP() bool {
	if o != nil && o.AUTHLDAP1REQUIREGROUP != nil {
		return true
	}

	return false
}

// SetAUTHLDAP1REQUIREGROUP gets a reference to the given string and assigns it to the AUTHLDAP1REQUIREGROUP field.
func (o *InlineObject60) SetAUTHLDAP1REQUIREGROUP(v string) {
	o.AUTHLDAP1REQUIREGROUP = &v
}

// GetAUTHLDAP1SERVERURI returns the AUTHLDAP1SERVERURI field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP1SERVERURI() string {
	if o == nil || o.AUTHLDAP1SERVERURI == nil {
		var ret string
		return ret
	}
	return *o.AUTHLDAP1SERVERURI
}

// GetAUTHLDAP1SERVERURIOk returns a tuple with the AUTHLDAP1SERVERURI field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP1SERVERURIOk() (*string, bool) {
	if o == nil || o.AUTHLDAP1SERVERURI == nil {
		return nil, false
	}
	return o.AUTHLDAP1SERVERURI, true
}

// HasAUTHLDAP1SERVERURI returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP1SERVERURI() bool {
	if o != nil && o.AUTHLDAP1SERVERURI != nil {
		return true
	}

	return false
}

// SetAUTHLDAP1SERVERURI gets a reference to the given string and assigns it to the AUTHLDAP1SERVERURI field.
func (o *InlineObject60) SetAUTHLDAP1SERVERURI(v string) {
	o.AUTHLDAP1SERVERURI = &v
}

// GetAUTHLDAP1STARTTLS returns the AUTHLDAP1STARTTLS field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP1STARTTLS() bool {
	if o == nil || o.AUTHLDAP1STARTTLS == nil {
		var ret bool
		return ret
	}
	return *o.AUTHLDAP1STARTTLS
}

// GetAUTHLDAP1STARTTLSOk returns a tuple with the AUTHLDAP1STARTTLS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP1STARTTLSOk() (*bool, bool) {
	if o == nil || o.AUTHLDAP1STARTTLS == nil {
		return nil, false
	}
	return o.AUTHLDAP1STARTTLS, true
}

// HasAUTHLDAP1STARTTLS returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP1STARTTLS() bool {
	if o != nil && o.AUTHLDAP1STARTTLS != nil {
		return true
	}

	return false
}

// SetAUTHLDAP1STARTTLS gets a reference to the given bool and assigns it to the AUTHLDAP1STARTTLS field.
func (o *InlineObject60) SetAUTHLDAP1STARTTLS(v bool) {
	o.AUTHLDAP1STARTTLS = &v
}

// GetAUTHLDAP1TEAMMAP returns the AUTHLDAP1TEAMMAP field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP1TEAMMAP() map[string]interface{} {
	if o == nil || o.AUTHLDAP1TEAMMAP == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AUTHLDAP1TEAMMAP
}

// GetAUTHLDAP1TEAMMAPOk returns a tuple with the AUTHLDAP1TEAMMAP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP1TEAMMAPOk() (*map[string]interface{}, bool) {
	if o == nil || o.AUTHLDAP1TEAMMAP == nil {
		return nil, false
	}
	return o.AUTHLDAP1TEAMMAP, true
}

// HasAUTHLDAP1TEAMMAP returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP1TEAMMAP() bool {
	if o != nil && o.AUTHLDAP1TEAMMAP != nil {
		return true
	}

	return false
}

// SetAUTHLDAP1TEAMMAP gets a reference to the given map[string]interface{} and assigns it to the AUTHLDAP1TEAMMAP field.
func (o *InlineObject60) SetAUTHLDAP1TEAMMAP(v map[string]interface{}) {
	o.AUTHLDAP1TEAMMAP = &v
}

// GetAUTHLDAP1USERATTRMAP returns the AUTHLDAP1USERATTRMAP field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP1USERATTRMAP() map[string]interface{} {
	if o == nil || o.AUTHLDAP1USERATTRMAP == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AUTHLDAP1USERATTRMAP
}

// GetAUTHLDAP1USERATTRMAPOk returns a tuple with the AUTHLDAP1USERATTRMAP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP1USERATTRMAPOk() (*map[string]interface{}, bool) {
	if o == nil || o.AUTHLDAP1USERATTRMAP == nil {
		return nil, false
	}
	return o.AUTHLDAP1USERATTRMAP, true
}

// HasAUTHLDAP1USERATTRMAP returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP1USERATTRMAP() bool {
	if o != nil && o.AUTHLDAP1USERATTRMAP != nil {
		return true
	}

	return false
}

// SetAUTHLDAP1USERATTRMAP gets a reference to the given map[string]interface{} and assigns it to the AUTHLDAP1USERATTRMAP field.
func (o *InlineObject60) SetAUTHLDAP1USERATTRMAP(v map[string]interface{}) {
	o.AUTHLDAP1USERATTRMAP = &v
}

// GetAUTHLDAP1USERDNTEMPLATE returns the AUTHLDAP1USERDNTEMPLATE field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP1USERDNTEMPLATE() string {
	if o == nil || o.AUTHLDAP1USERDNTEMPLATE == nil {
		var ret string
		return ret
	}
	return *o.AUTHLDAP1USERDNTEMPLATE
}

// GetAUTHLDAP1USERDNTEMPLATEOk returns a tuple with the AUTHLDAP1USERDNTEMPLATE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP1USERDNTEMPLATEOk() (*string, bool) {
	if o == nil || o.AUTHLDAP1USERDNTEMPLATE == nil {
		return nil, false
	}
	return o.AUTHLDAP1USERDNTEMPLATE, true
}

// HasAUTHLDAP1USERDNTEMPLATE returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP1USERDNTEMPLATE() bool {
	if o != nil && o.AUTHLDAP1USERDNTEMPLATE != nil {
		return true
	}

	return false
}

// SetAUTHLDAP1USERDNTEMPLATE gets a reference to the given string and assigns it to the AUTHLDAP1USERDNTEMPLATE field.
func (o *InlineObject60) SetAUTHLDAP1USERDNTEMPLATE(v string) {
	o.AUTHLDAP1USERDNTEMPLATE = &v
}

// GetAUTHLDAP1USERFLAGSBYGROUP returns the AUTHLDAP1USERFLAGSBYGROUP field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP1USERFLAGSBYGROUP() map[string]interface{} {
	if o == nil || o.AUTHLDAP1USERFLAGSBYGROUP == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AUTHLDAP1USERFLAGSBYGROUP
}

// GetAUTHLDAP1USERFLAGSBYGROUPOk returns a tuple with the AUTHLDAP1USERFLAGSBYGROUP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP1USERFLAGSBYGROUPOk() (*map[string]interface{}, bool) {
	if o == nil || o.AUTHLDAP1USERFLAGSBYGROUP == nil {
		return nil, false
	}
	return o.AUTHLDAP1USERFLAGSBYGROUP, true
}

// HasAUTHLDAP1USERFLAGSBYGROUP returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP1USERFLAGSBYGROUP() bool {
	if o != nil && o.AUTHLDAP1USERFLAGSBYGROUP != nil {
		return true
	}

	return false
}

// SetAUTHLDAP1USERFLAGSBYGROUP gets a reference to the given map[string]interface{} and assigns it to the AUTHLDAP1USERFLAGSBYGROUP field.
func (o *InlineObject60) SetAUTHLDAP1USERFLAGSBYGROUP(v map[string]interface{}) {
	o.AUTHLDAP1USERFLAGSBYGROUP = &v
}

// GetAUTHLDAP1USERSEARCH returns the AUTHLDAP1USERSEARCH field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP1USERSEARCH() []string {
	if o == nil || o.AUTHLDAP1USERSEARCH == nil {
		var ret []string
		return ret
	}
	return *o.AUTHLDAP1USERSEARCH
}

// GetAUTHLDAP1USERSEARCHOk returns a tuple with the AUTHLDAP1USERSEARCH field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP1USERSEARCHOk() (*[]string, bool) {
	if o == nil || o.AUTHLDAP1USERSEARCH == nil {
		return nil, false
	}
	return o.AUTHLDAP1USERSEARCH, true
}

// HasAUTHLDAP1USERSEARCH returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP1USERSEARCH() bool {
	if o != nil && o.AUTHLDAP1USERSEARCH != nil {
		return true
	}

	return false
}

// SetAUTHLDAP1USERSEARCH gets a reference to the given []string and assigns it to the AUTHLDAP1USERSEARCH field.
func (o *InlineObject60) SetAUTHLDAP1USERSEARCH(v []string) {
	o.AUTHLDAP1USERSEARCH = &v
}

// GetAUTHLDAP2BINDDN returns the AUTHLDAP2BINDDN field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP2BINDDN() string {
	if o == nil || o.AUTHLDAP2BINDDN == nil {
		var ret string
		return ret
	}
	return *o.AUTHLDAP2BINDDN
}

// GetAUTHLDAP2BINDDNOk returns a tuple with the AUTHLDAP2BINDDN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP2BINDDNOk() (*string, bool) {
	if o == nil || o.AUTHLDAP2BINDDN == nil {
		return nil, false
	}
	return o.AUTHLDAP2BINDDN, true
}

// HasAUTHLDAP2BINDDN returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP2BINDDN() bool {
	if o != nil && o.AUTHLDAP2BINDDN != nil {
		return true
	}

	return false
}

// SetAUTHLDAP2BINDDN gets a reference to the given string and assigns it to the AUTHLDAP2BINDDN field.
func (o *InlineObject60) SetAUTHLDAP2BINDDN(v string) {
	o.AUTHLDAP2BINDDN = &v
}

// GetAUTHLDAP2BINDPASSWORD returns the AUTHLDAP2BINDPASSWORD field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP2BINDPASSWORD() string {
	if o == nil || o.AUTHLDAP2BINDPASSWORD == nil {
		var ret string
		return ret
	}
	return *o.AUTHLDAP2BINDPASSWORD
}

// GetAUTHLDAP2BINDPASSWORDOk returns a tuple with the AUTHLDAP2BINDPASSWORD field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP2BINDPASSWORDOk() (*string, bool) {
	if o == nil || o.AUTHLDAP2BINDPASSWORD == nil {
		return nil, false
	}
	return o.AUTHLDAP2BINDPASSWORD, true
}

// HasAUTHLDAP2BINDPASSWORD returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP2BINDPASSWORD() bool {
	if o != nil && o.AUTHLDAP2BINDPASSWORD != nil {
		return true
	}

	return false
}

// SetAUTHLDAP2BINDPASSWORD gets a reference to the given string and assigns it to the AUTHLDAP2BINDPASSWORD field.
func (o *InlineObject60) SetAUTHLDAP2BINDPASSWORD(v string) {
	o.AUTHLDAP2BINDPASSWORD = &v
}

// GetAUTHLDAP2CONNECTIONOPTIONS returns the AUTHLDAP2CONNECTIONOPTIONS field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP2CONNECTIONOPTIONS() map[string]interface{} {
	if o == nil || o.AUTHLDAP2CONNECTIONOPTIONS == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AUTHLDAP2CONNECTIONOPTIONS
}

// GetAUTHLDAP2CONNECTIONOPTIONSOk returns a tuple with the AUTHLDAP2CONNECTIONOPTIONS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP2CONNECTIONOPTIONSOk() (*map[string]interface{}, bool) {
	if o == nil || o.AUTHLDAP2CONNECTIONOPTIONS == nil {
		return nil, false
	}
	return o.AUTHLDAP2CONNECTIONOPTIONS, true
}

// HasAUTHLDAP2CONNECTIONOPTIONS returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP2CONNECTIONOPTIONS() bool {
	if o != nil && o.AUTHLDAP2CONNECTIONOPTIONS != nil {
		return true
	}

	return false
}

// SetAUTHLDAP2CONNECTIONOPTIONS gets a reference to the given map[string]interface{} and assigns it to the AUTHLDAP2CONNECTIONOPTIONS field.
func (o *InlineObject60) SetAUTHLDAP2CONNECTIONOPTIONS(v map[string]interface{}) {
	o.AUTHLDAP2CONNECTIONOPTIONS = &v
}

// GetAUTHLDAP2DENYGROUP returns the AUTHLDAP2DENYGROUP field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP2DENYGROUP() string {
	if o == nil || o.AUTHLDAP2DENYGROUP == nil {
		var ret string
		return ret
	}
	return *o.AUTHLDAP2DENYGROUP
}

// GetAUTHLDAP2DENYGROUPOk returns a tuple with the AUTHLDAP2DENYGROUP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP2DENYGROUPOk() (*string, bool) {
	if o == nil || o.AUTHLDAP2DENYGROUP == nil {
		return nil, false
	}
	return o.AUTHLDAP2DENYGROUP, true
}

// HasAUTHLDAP2DENYGROUP returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP2DENYGROUP() bool {
	if o != nil && o.AUTHLDAP2DENYGROUP != nil {
		return true
	}

	return false
}

// SetAUTHLDAP2DENYGROUP gets a reference to the given string and assigns it to the AUTHLDAP2DENYGROUP field.
func (o *InlineObject60) SetAUTHLDAP2DENYGROUP(v string) {
	o.AUTHLDAP2DENYGROUP = &v
}

// GetAUTHLDAP2GROUPSEARCH returns the AUTHLDAP2GROUPSEARCH field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP2GROUPSEARCH() []string {
	if o == nil || o.AUTHLDAP2GROUPSEARCH == nil {
		var ret []string
		return ret
	}
	return *o.AUTHLDAP2GROUPSEARCH
}

// GetAUTHLDAP2GROUPSEARCHOk returns a tuple with the AUTHLDAP2GROUPSEARCH field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP2GROUPSEARCHOk() (*[]string, bool) {
	if o == nil || o.AUTHLDAP2GROUPSEARCH == nil {
		return nil, false
	}
	return o.AUTHLDAP2GROUPSEARCH, true
}

// HasAUTHLDAP2GROUPSEARCH returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP2GROUPSEARCH() bool {
	if o != nil && o.AUTHLDAP2GROUPSEARCH != nil {
		return true
	}

	return false
}

// SetAUTHLDAP2GROUPSEARCH gets a reference to the given []string and assigns it to the AUTHLDAP2GROUPSEARCH field.
func (o *InlineObject60) SetAUTHLDAP2GROUPSEARCH(v []string) {
	o.AUTHLDAP2GROUPSEARCH = &v
}

// GetAUTHLDAP2GROUPTYPE returns the AUTHLDAP2GROUPTYPE field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP2GROUPTYPE() string {
	if o == nil || o.AUTHLDAP2GROUPTYPE == nil {
		var ret string
		return ret
	}
	return *o.AUTHLDAP2GROUPTYPE
}

// GetAUTHLDAP2GROUPTYPEOk returns a tuple with the AUTHLDAP2GROUPTYPE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP2GROUPTYPEOk() (*string, bool) {
	if o == nil || o.AUTHLDAP2GROUPTYPE == nil {
		return nil, false
	}
	return o.AUTHLDAP2GROUPTYPE, true
}

// HasAUTHLDAP2GROUPTYPE returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP2GROUPTYPE() bool {
	if o != nil && o.AUTHLDAP2GROUPTYPE != nil {
		return true
	}

	return false
}

// SetAUTHLDAP2GROUPTYPE gets a reference to the given string and assigns it to the AUTHLDAP2GROUPTYPE field.
func (o *InlineObject60) SetAUTHLDAP2GROUPTYPE(v string) {
	o.AUTHLDAP2GROUPTYPE = &v
}

// GetAUTHLDAP2GROUPTYPEPARAMS returns the AUTHLDAP2GROUPTYPEPARAMS field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP2GROUPTYPEPARAMS() map[string]interface{} {
	if o == nil || o.AUTHLDAP2GROUPTYPEPARAMS == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AUTHLDAP2GROUPTYPEPARAMS
}

// GetAUTHLDAP2GROUPTYPEPARAMSOk returns a tuple with the AUTHLDAP2GROUPTYPEPARAMS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP2GROUPTYPEPARAMSOk() (*map[string]interface{}, bool) {
	if o == nil || o.AUTHLDAP2GROUPTYPEPARAMS == nil {
		return nil, false
	}
	return o.AUTHLDAP2GROUPTYPEPARAMS, true
}

// HasAUTHLDAP2GROUPTYPEPARAMS returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP2GROUPTYPEPARAMS() bool {
	if o != nil && o.AUTHLDAP2GROUPTYPEPARAMS != nil {
		return true
	}

	return false
}

// SetAUTHLDAP2GROUPTYPEPARAMS gets a reference to the given map[string]interface{} and assigns it to the AUTHLDAP2GROUPTYPEPARAMS field.
func (o *InlineObject60) SetAUTHLDAP2GROUPTYPEPARAMS(v map[string]interface{}) {
	o.AUTHLDAP2GROUPTYPEPARAMS = &v
}

// GetAUTHLDAP2ORGANIZATIONMAP returns the AUTHLDAP2ORGANIZATIONMAP field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP2ORGANIZATIONMAP() map[string]interface{} {
	if o == nil || o.AUTHLDAP2ORGANIZATIONMAP == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AUTHLDAP2ORGANIZATIONMAP
}

// GetAUTHLDAP2ORGANIZATIONMAPOk returns a tuple with the AUTHLDAP2ORGANIZATIONMAP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP2ORGANIZATIONMAPOk() (*map[string]interface{}, bool) {
	if o == nil || o.AUTHLDAP2ORGANIZATIONMAP == nil {
		return nil, false
	}
	return o.AUTHLDAP2ORGANIZATIONMAP, true
}

// HasAUTHLDAP2ORGANIZATIONMAP returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP2ORGANIZATIONMAP() bool {
	if o != nil && o.AUTHLDAP2ORGANIZATIONMAP != nil {
		return true
	}

	return false
}

// SetAUTHLDAP2ORGANIZATIONMAP gets a reference to the given map[string]interface{} and assigns it to the AUTHLDAP2ORGANIZATIONMAP field.
func (o *InlineObject60) SetAUTHLDAP2ORGANIZATIONMAP(v map[string]interface{}) {
	o.AUTHLDAP2ORGANIZATIONMAP = &v
}

// GetAUTHLDAP2REQUIREGROUP returns the AUTHLDAP2REQUIREGROUP field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP2REQUIREGROUP() string {
	if o == nil || o.AUTHLDAP2REQUIREGROUP == nil {
		var ret string
		return ret
	}
	return *o.AUTHLDAP2REQUIREGROUP
}

// GetAUTHLDAP2REQUIREGROUPOk returns a tuple with the AUTHLDAP2REQUIREGROUP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP2REQUIREGROUPOk() (*string, bool) {
	if o == nil || o.AUTHLDAP2REQUIREGROUP == nil {
		return nil, false
	}
	return o.AUTHLDAP2REQUIREGROUP, true
}

// HasAUTHLDAP2REQUIREGROUP returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP2REQUIREGROUP() bool {
	if o != nil && o.AUTHLDAP2REQUIREGROUP != nil {
		return true
	}

	return false
}

// SetAUTHLDAP2REQUIREGROUP gets a reference to the given string and assigns it to the AUTHLDAP2REQUIREGROUP field.
func (o *InlineObject60) SetAUTHLDAP2REQUIREGROUP(v string) {
	o.AUTHLDAP2REQUIREGROUP = &v
}

// GetAUTHLDAP2SERVERURI returns the AUTHLDAP2SERVERURI field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP2SERVERURI() string {
	if o == nil || o.AUTHLDAP2SERVERURI == nil {
		var ret string
		return ret
	}
	return *o.AUTHLDAP2SERVERURI
}

// GetAUTHLDAP2SERVERURIOk returns a tuple with the AUTHLDAP2SERVERURI field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP2SERVERURIOk() (*string, bool) {
	if o == nil || o.AUTHLDAP2SERVERURI == nil {
		return nil, false
	}
	return o.AUTHLDAP2SERVERURI, true
}

// HasAUTHLDAP2SERVERURI returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP2SERVERURI() bool {
	if o != nil && o.AUTHLDAP2SERVERURI != nil {
		return true
	}

	return false
}

// SetAUTHLDAP2SERVERURI gets a reference to the given string and assigns it to the AUTHLDAP2SERVERURI field.
func (o *InlineObject60) SetAUTHLDAP2SERVERURI(v string) {
	o.AUTHLDAP2SERVERURI = &v
}

// GetAUTHLDAP2STARTTLS returns the AUTHLDAP2STARTTLS field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP2STARTTLS() bool {
	if o == nil || o.AUTHLDAP2STARTTLS == nil {
		var ret bool
		return ret
	}
	return *o.AUTHLDAP2STARTTLS
}

// GetAUTHLDAP2STARTTLSOk returns a tuple with the AUTHLDAP2STARTTLS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP2STARTTLSOk() (*bool, bool) {
	if o == nil || o.AUTHLDAP2STARTTLS == nil {
		return nil, false
	}
	return o.AUTHLDAP2STARTTLS, true
}

// HasAUTHLDAP2STARTTLS returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP2STARTTLS() bool {
	if o != nil && o.AUTHLDAP2STARTTLS != nil {
		return true
	}

	return false
}

// SetAUTHLDAP2STARTTLS gets a reference to the given bool and assigns it to the AUTHLDAP2STARTTLS field.
func (o *InlineObject60) SetAUTHLDAP2STARTTLS(v bool) {
	o.AUTHLDAP2STARTTLS = &v
}

// GetAUTHLDAP2TEAMMAP returns the AUTHLDAP2TEAMMAP field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP2TEAMMAP() map[string]interface{} {
	if o == nil || o.AUTHLDAP2TEAMMAP == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AUTHLDAP2TEAMMAP
}

// GetAUTHLDAP2TEAMMAPOk returns a tuple with the AUTHLDAP2TEAMMAP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP2TEAMMAPOk() (*map[string]interface{}, bool) {
	if o == nil || o.AUTHLDAP2TEAMMAP == nil {
		return nil, false
	}
	return o.AUTHLDAP2TEAMMAP, true
}

// HasAUTHLDAP2TEAMMAP returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP2TEAMMAP() bool {
	if o != nil && o.AUTHLDAP2TEAMMAP != nil {
		return true
	}

	return false
}

// SetAUTHLDAP2TEAMMAP gets a reference to the given map[string]interface{} and assigns it to the AUTHLDAP2TEAMMAP field.
func (o *InlineObject60) SetAUTHLDAP2TEAMMAP(v map[string]interface{}) {
	o.AUTHLDAP2TEAMMAP = &v
}

// GetAUTHLDAP2USERATTRMAP returns the AUTHLDAP2USERATTRMAP field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP2USERATTRMAP() map[string]interface{} {
	if o == nil || o.AUTHLDAP2USERATTRMAP == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AUTHLDAP2USERATTRMAP
}

// GetAUTHLDAP2USERATTRMAPOk returns a tuple with the AUTHLDAP2USERATTRMAP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP2USERATTRMAPOk() (*map[string]interface{}, bool) {
	if o == nil || o.AUTHLDAP2USERATTRMAP == nil {
		return nil, false
	}
	return o.AUTHLDAP2USERATTRMAP, true
}

// HasAUTHLDAP2USERATTRMAP returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP2USERATTRMAP() bool {
	if o != nil && o.AUTHLDAP2USERATTRMAP != nil {
		return true
	}

	return false
}

// SetAUTHLDAP2USERATTRMAP gets a reference to the given map[string]interface{} and assigns it to the AUTHLDAP2USERATTRMAP field.
func (o *InlineObject60) SetAUTHLDAP2USERATTRMAP(v map[string]interface{}) {
	o.AUTHLDAP2USERATTRMAP = &v
}

// GetAUTHLDAP2USERDNTEMPLATE returns the AUTHLDAP2USERDNTEMPLATE field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP2USERDNTEMPLATE() string {
	if o == nil || o.AUTHLDAP2USERDNTEMPLATE == nil {
		var ret string
		return ret
	}
	return *o.AUTHLDAP2USERDNTEMPLATE
}

// GetAUTHLDAP2USERDNTEMPLATEOk returns a tuple with the AUTHLDAP2USERDNTEMPLATE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP2USERDNTEMPLATEOk() (*string, bool) {
	if o == nil || o.AUTHLDAP2USERDNTEMPLATE == nil {
		return nil, false
	}
	return o.AUTHLDAP2USERDNTEMPLATE, true
}

// HasAUTHLDAP2USERDNTEMPLATE returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP2USERDNTEMPLATE() bool {
	if o != nil && o.AUTHLDAP2USERDNTEMPLATE != nil {
		return true
	}

	return false
}

// SetAUTHLDAP2USERDNTEMPLATE gets a reference to the given string and assigns it to the AUTHLDAP2USERDNTEMPLATE field.
func (o *InlineObject60) SetAUTHLDAP2USERDNTEMPLATE(v string) {
	o.AUTHLDAP2USERDNTEMPLATE = &v
}

// GetAUTHLDAP2USERFLAGSBYGROUP returns the AUTHLDAP2USERFLAGSBYGROUP field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP2USERFLAGSBYGROUP() map[string]interface{} {
	if o == nil || o.AUTHLDAP2USERFLAGSBYGROUP == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AUTHLDAP2USERFLAGSBYGROUP
}

// GetAUTHLDAP2USERFLAGSBYGROUPOk returns a tuple with the AUTHLDAP2USERFLAGSBYGROUP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP2USERFLAGSBYGROUPOk() (*map[string]interface{}, bool) {
	if o == nil || o.AUTHLDAP2USERFLAGSBYGROUP == nil {
		return nil, false
	}
	return o.AUTHLDAP2USERFLAGSBYGROUP, true
}

// HasAUTHLDAP2USERFLAGSBYGROUP returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP2USERFLAGSBYGROUP() bool {
	if o != nil && o.AUTHLDAP2USERFLAGSBYGROUP != nil {
		return true
	}

	return false
}

// SetAUTHLDAP2USERFLAGSBYGROUP gets a reference to the given map[string]interface{} and assigns it to the AUTHLDAP2USERFLAGSBYGROUP field.
func (o *InlineObject60) SetAUTHLDAP2USERFLAGSBYGROUP(v map[string]interface{}) {
	o.AUTHLDAP2USERFLAGSBYGROUP = &v
}

// GetAUTHLDAP2USERSEARCH returns the AUTHLDAP2USERSEARCH field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP2USERSEARCH() []string {
	if o == nil || o.AUTHLDAP2USERSEARCH == nil {
		var ret []string
		return ret
	}
	return *o.AUTHLDAP2USERSEARCH
}

// GetAUTHLDAP2USERSEARCHOk returns a tuple with the AUTHLDAP2USERSEARCH field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP2USERSEARCHOk() (*[]string, bool) {
	if o == nil || o.AUTHLDAP2USERSEARCH == nil {
		return nil, false
	}
	return o.AUTHLDAP2USERSEARCH, true
}

// HasAUTHLDAP2USERSEARCH returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP2USERSEARCH() bool {
	if o != nil && o.AUTHLDAP2USERSEARCH != nil {
		return true
	}

	return false
}

// SetAUTHLDAP2USERSEARCH gets a reference to the given []string and assigns it to the AUTHLDAP2USERSEARCH field.
func (o *InlineObject60) SetAUTHLDAP2USERSEARCH(v []string) {
	o.AUTHLDAP2USERSEARCH = &v
}

// GetAUTHLDAP3BINDDN returns the AUTHLDAP3BINDDN field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP3BINDDN() string {
	if o == nil || o.AUTHLDAP3BINDDN == nil {
		var ret string
		return ret
	}
	return *o.AUTHLDAP3BINDDN
}

// GetAUTHLDAP3BINDDNOk returns a tuple with the AUTHLDAP3BINDDN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP3BINDDNOk() (*string, bool) {
	if o == nil || o.AUTHLDAP3BINDDN == nil {
		return nil, false
	}
	return o.AUTHLDAP3BINDDN, true
}

// HasAUTHLDAP3BINDDN returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP3BINDDN() bool {
	if o != nil && o.AUTHLDAP3BINDDN != nil {
		return true
	}

	return false
}

// SetAUTHLDAP3BINDDN gets a reference to the given string and assigns it to the AUTHLDAP3BINDDN field.
func (o *InlineObject60) SetAUTHLDAP3BINDDN(v string) {
	o.AUTHLDAP3BINDDN = &v
}

// GetAUTHLDAP3BINDPASSWORD returns the AUTHLDAP3BINDPASSWORD field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP3BINDPASSWORD() string {
	if o == nil || o.AUTHLDAP3BINDPASSWORD == nil {
		var ret string
		return ret
	}
	return *o.AUTHLDAP3BINDPASSWORD
}

// GetAUTHLDAP3BINDPASSWORDOk returns a tuple with the AUTHLDAP3BINDPASSWORD field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP3BINDPASSWORDOk() (*string, bool) {
	if o == nil || o.AUTHLDAP3BINDPASSWORD == nil {
		return nil, false
	}
	return o.AUTHLDAP3BINDPASSWORD, true
}

// HasAUTHLDAP3BINDPASSWORD returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP3BINDPASSWORD() bool {
	if o != nil && o.AUTHLDAP3BINDPASSWORD != nil {
		return true
	}

	return false
}

// SetAUTHLDAP3BINDPASSWORD gets a reference to the given string and assigns it to the AUTHLDAP3BINDPASSWORD field.
func (o *InlineObject60) SetAUTHLDAP3BINDPASSWORD(v string) {
	o.AUTHLDAP3BINDPASSWORD = &v
}

// GetAUTHLDAP3CONNECTIONOPTIONS returns the AUTHLDAP3CONNECTIONOPTIONS field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP3CONNECTIONOPTIONS() map[string]interface{} {
	if o == nil || o.AUTHLDAP3CONNECTIONOPTIONS == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AUTHLDAP3CONNECTIONOPTIONS
}

// GetAUTHLDAP3CONNECTIONOPTIONSOk returns a tuple with the AUTHLDAP3CONNECTIONOPTIONS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP3CONNECTIONOPTIONSOk() (*map[string]interface{}, bool) {
	if o == nil || o.AUTHLDAP3CONNECTIONOPTIONS == nil {
		return nil, false
	}
	return o.AUTHLDAP3CONNECTIONOPTIONS, true
}

// HasAUTHLDAP3CONNECTIONOPTIONS returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP3CONNECTIONOPTIONS() bool {
	if o != nil && o.AUTHLDAP3CONNECTIONOPTIONS != nil {
		return true
	}

	return false
}

// SetAUTHLDAP3CONNECTIONOPTIONS gets a reference to the given map[string]interface{} and assigns it to the AUTHLDAP3CONNECTIONOPTIONS field.
func (o *InlineObject60) SetAUTHLDAP3CONNECTIONOPTIONS(v map[string]interface{}) {
	o.AUTHLDAP3CONNECTIONOPTIONS = &v
}

// GetAUTHLDAP3DENYGROUP returns the AUTHLDAP3DENYGROUP field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP3DENYGROUP() string {
	if o == nil || o.AUTHLDAP3DENYGROUP == nil {
		var ret string
		return ret
	}
	return *o.AUTHLDAP3DENYGROUP
}

// GetAUTHLDAP3DENYGROUPOk returns a tuple with the AUTHLDAP3DENYGROUP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP3DENYGROUPOk() (*string, bool) {
	if o == nil || o.AUTHLDAP3DENYGROUP == nil {
		return nil, false
	}
	return o.AUTHLDAP3DENYGROUP, true
}

// HasAUTHLDAP3DENYGROUP returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP3DENYGROUP() bool {
	if o != nil && o.AUTHLDAP3DENYGROUP != nil {
		return true
	}

	return false
}

// SetAUTHLDAP3DENYGROUP gets a reference to the given string and assigns it to the AUTHLDAP3DENYGROUP field.
func (o *InlineObject60) SetAUTHLDAP3DENYGROUP(v string) {
	o.AUTHLDAP3DENYGROUP = &v
}

// GetAUTHLDAP3GROUPSEARCH returns the AUTHLDAP3GROUPSEARCH field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP3GROUPSEARCH() []string {
	if o == nil || o.AUTHLDAP3GROUPSEARCH == nil {
		var ret []string
		return ret
	}
	return *o.AUTHLDAP3GROUPSEARCH
}

// GetAUTHLDAP3GROUPSEARCHOk returns a tuple with the AUTHLDAP3GROUPSEARCH field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP3GROUPSEARCHOk() (*[]string, bool) {
	if o == nil || o.AUTHLDAP3GROUPSEARCH == nil {
		return nil, false
	}
	return o.AUTHLDAP3GROUPSEARCH, true
}

// HasAUTHLDAP3GROUPSEARCH returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP3GROUPSEARCH() bool {
	if o != nil && o.AUTHLDAP3GROUPSEARCH != nil {
		return true
	}

	return false
}

// SetAUTHLDAP3GROUPSEARCH gets a reference to the given []string and assigns it to the AUTHLDAP3GROUPSEARCH field.
func (o *InlineObject60) SetAUTHLDAP3GROUPSEARCH(v []string) {
	o.AUTHLDAP3GROUPSEARCH = &v
}

// GetAUTHLDAP3GROUPTYPE returns the AUTHLDAP3GROUPTYPE field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP3GROUPTYPE() string {
	if o == nil || o.AUTHLDAP3GROUPTYPE == nil {
		var ret string
		return ret
	}
	return *o.AUTHLDAP3GROUPTYPE
}

// GetAUTHLDAP3GROUPTYPEOk returns a tuple with the AUTHLDAP3GROUPTYPE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP3GROUPTYPEOk() (*string, bool) {
	if o == nil || o.AUTHLDAP3GROUPTYPE == nil {
		return nil, false
	}
	return o.AUTHLDAP3GROUPTYPE, true
}

// HasAUTHLDAP3GROUPTYPE returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP3GROUPTYPE() bool {
	if o != nil && o.AUTHLDAP3GROUPTYPE != nil {
		return true
	}

	return false
}

// SetAUTHLDAP3GROUPTYPE gets a reference to the given string and assigns it to the AUTHLDAP3GROUPTYPE field.
func (o *InlineObject60) SetAUTHLDAP3GROUPTYPE(v string) {
	o.AUTHLDAP3GROUPTYPE = &v
}

// GetAUTHLDAP3GROUPTYPEPARAMS returns the AUTHLDAP3GROUPTYPEPARAMS field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP3GROUPTYPEPARAMS() map[string]interface{} {
	if o == nil || o.AUTHLDAP3GROUPTYPEPARAMS == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AUTHLDAP3GROUPTYPEPARAMS
}

// GetAUTHLDAP3GROUPTYPEPARAMSOk returns a tuple with the AUTHLDAP3GROUPTYPEPARAMS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP3GROUPTYPEPARAMSOk() (*map[string]interface{}, bool) {
	if o == nil || o.AUTHLDAP3GROUPTYPEPARAMS == nil {
		return nil, false
	}
	return o.AUTHLDAP3GROUPTYPEPARAMS, true
}

// HasAUTHLDAP3GROUPTYPEPARAMS returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP3GROUPTYPEPARAMS() bool {
	if o != nil && o.AUTHLDAP3GROUPTYPEPARAMS != nil {
		return true
	}

	return false
}

// SetAUTHLDAP3GROUPTYPEPARAMS gets a reference to the given map[string]interface{} and assigns it to the AUTHLDAP3GROUPTYPEPARAMS field.
func (o *InlineObject60) SetAUTHLDAP3GROUPTYPEPARAMS(v map[string]interface{}) {
	o.AUTHLDAP3GROUPTYPEPARAMS = &v
}

// GetAUTHLDAP3ORGANIZATIONMAP returns the AUTHLDAP3ORGANIZATIONMAP field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP3ORGANIZATIONMAP() map[string]interface{} {
	if o == nil || o.AUTHLDAP3ORGANIZATIONMAP == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AUTHLDAP3ORGANIZATIONMAP
}

// GetAUTHLDAP3ORGANIZATIONMAPOk returns a tuple with the AUTHLDAP3ORGANIZATIONMAP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP3ORGANIZATIONMAPOk() (*map[string]interface{}, bool) {
	if o == nil || o.AUTHLDAP3ORGANIZATIONMAP == nil {
		return nil, false
	}
	return o.AUTHLDAP3ORGANIZATIONMAP, true
}

// HasAUTHLDAP3ORGANIZATIONMAP returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP3ORGANIZATIONMAP() bool {
	if o != nil && o.AUTHLDAP3ORGANIZATIONMAP != nil {
		return true
	}

	return false
}

// SetAUTHLDAP3ORGANIZATIONMAP gets a reference to the given map[string]interface{} and assigns it to the AUTHLDAP3ORGANIZATIONMAP field.
func (o *InlineObject60) SetAUTHLDAP3ORGANIZATIONMAP(v map[string]interface{}) {
	o.AUTHLDAP3ORGANIZATIONMAP = &v
}

// GetAUTHLDAP3REQUIREGROUP returns the AUTHLDAP3REQUIREGROUP field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP3REQUIREGROUP() string {
	if o == nil || o.AUTHLDAP3REQUIREGROUP == nil {
		var ret string
		return ret
	}
	return *o.AUTHLDAP3REQUIREGROUP
}

// GetAUTHLDAP3REQUIREGROUPOk returns a tuple with the AUTHLDAP3REQUIREGROUP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP3REQUIREGROUPOk() (*string, bool) {
	if o == nil || o.AUTHLDAP3REQUIREGROUP == nil {
		return nil, false
	}
	return o.AUTHLDAP3REQUIREGROUP, true
}

// HasAUTHLDAP3REQUIREGROUP returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP3REQUIREGROUP() bool {
	if o != nil && o.AUTHLDAP3REQUIREGROUP != nil {
		return true
	}

	return false
}

// SetAUTHLDAP3REQUIREGROUP gets a reference to the given string and assigns it to the AUTHLDAP3REQUIREGROUP field.
func (o *InlineObject60) SetAUTHLDAP3REQUIREGROUP(v string) {
	o.AUTHLDAP3REQUIREGROUP = &v
}

// GetAUTHLDAP3SERVERURI returns the AUTHLDAP3SERVERURI field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP3SERVERURI() string {
	if o == nil || o.AUTHLDAP3SERVERURI == nil {
		var ret string
		return ret
	}
	return *o.AUTHLDAP3SERVERURI
}

// GetAUTHLDAP3SERVERURIOk returns a tuple with the AUTHLDAP3SERVERURI field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP3SERVERURIOk() (*string, bool) {
	if o == nil || o.AUTHLDAP3SERVERURI == nil {
		return nil, false
	}
	return o.AUTHLDAP3SERVERURI, true
}

// HasAUTHLDAP3SERVERURI returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP3SERVERURI() bool {
	if o != nil && o.AUTHLDAP3SERVERURI != nil {
		return true
	}

	return false
}

// SetAUTHLDAP3SERVERURI gets a reference to the given string and assigns it to the AUTHLDAP3SERVERURI field.
func (o *InlineObject60) SetAUTHLDAP3SERVERURI(v string) {
	o.AUTHLDAP3SERVERURI = &v
}

// GetAUTHLDAP3STARTTLS returns the AUTHLDAP3STARTTLS field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP3STARTTLS() bool {
	if o == nil || o.AUTHLDAP3STARTTLS == nil {
		var ret bool
		return ret
	}
	return *o.AUTHLDAP3STARTTLS
}

// GetAUTHLDAP3STARTTLSOk returns a tuple with the AUTHLDAP3STARTTLS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP3STARTTLSOk() (*bool, bool) {
	if o == nil || o.AUTHLDAP3STARTTLS == nil {
		return nil, false
	}
	return o.AUTHLDAP3STARTTLS, true
}

// HasAUTHLDAP3STARTTLS returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP3STARTTLS() bool {
	if o != nil && o.AUTHLDAP3STARTTLS != nil {
		return true
	}

	return false
}

// SetAUTHLDAP3STARTTLS gets a reference to the given bool and assigns it to the AUTHLDAP3STARTTLS field.
func (o *InlineObject60) SetAUTHLDAP3STARTTLS(v bool) {
	o.AUTHLDAP3STARTTLS = &v
}

// GetAUTHLDAP3TEAMMAP returns the AUTHLDAP3TEAMMAP field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP3TEAMMAP() map[string]interface{} {
	if o == nil || o.AUTHLDAP3TEAMMAP == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AUTHLDAP3TEAMMAP
}

// GetAUTHLDAP3TEAMMAPOk returns a tuple with the AUTHLDAP3TEAMMAP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP3TEAMMAPOk() (*map[string]interface{}, bool) {
	if o == nil || o.AUTHLDAP3TEAMMAP == nil {
		return nil, false
	}
	return o.AUTHLDAP3TEAMMAP, true
}

// HasAUTHLDAP3TEAMMAP returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP3TEAMMAP() bool {
	if o != nil && o.AUTHLDAP3TEAMMAP != nil {
		return true
	}

	return false
}

// SetAUTHLDAP3TEAMMAP gets a reference to the given map[string]interface{} and assigns it to the AUTHLDAP3TEAMMAP field.
func (o *InlineObject60) SetAUTHLDAP3TEAMMAP(v map[string]interface{}) {
	o.AUTHLDAP3TEAMMAP = &v
}

// GetAUTHLDAP3USERATTRMAP returns the AUTHLDAP3USERATTRMAP field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP3USERATTRMAP() map[string]interface{} {
	if o == nil || o.AUTHLDAP3USERATTRMAP == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AUTHLDAP3USERATTRMAP
}

// GetAUTHLDAP3USERATTRMAPOk returns a tuple with the AUTHLDAP3USERATTRMAP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP3USERATTRMAPOk() (*map[string]interface{}, bool) {
	if o == nil || o.AUTHLDAP3USERATTRMAP == nil {
		return nil, false
	}
	return o.AUTHLDAP3USERATTRMAP, true
}

// HasAUTHLDAP3USERATTRMAP returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP3USERATTRMAP() bool {
	if o != nil && o.AUTHLDAP3USERATTRMAP != nil {
		return true
	}

	return false
}

// SetAUTHLDAP3USERATTRMAP gets a reference to the given map[string]interface{} and assigns it to the AUTHLDAP3USERATTRMAP field.
func (o *InlineObject60) SetAUTHLDAP3USERATTRMAP(v map[string]interface{}) {
	o.AUTHLDAP3USERATTRMAP = &v
}

// GetAUTHLDAP3USERDNTEMPLATE returns the AUTHLDAP3USERDNTEMPLATE field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP3USERDNTEMPLATE() string {
	if o == nil || o.AUTHLDAP3USERDNTEMPLATE == nil {
		var ret string
		return ret
	}
	return *o.AUTHLDAP3USERDNTEMPLATE
}

// GetAUTHLDAP3USERDNTEMPLATEOk returns a tuple with the AUTHLDAP3USERDNTEMPLATE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP3USERDNTEMPLATEOk() (*string, bool) {
	if o == nil || o.AUTHLDAP3USERDNTEMPLATE == nil {
		return nil, false
	}
	return o.AUTHLDAP3USERDNTEMPLATE, true
}

// HasAUTHLDAP3USERDNTEMPLATE returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP3USERDNTEMPLATE() bool {
	if o != nil && o.AUTHLDAP3USERDNTEMPLATE != nil {
		return true
	}

	return false
}

// SetAUTHLDAP3USERDNTEMPLATE gets a reference to the given string and assigns it to the AUTHLDAP3USERDNTEMPLATE field.
func (o *InlineObject60) SetAUTHLDAP3USERDNTEMPLATE(v string) {
	o.AUTHLDAP3USERDNTEMPLATE = &v
}

// GetAUTHLDAP3USERFLAGSBYGROUP returns the AUTHLDAP3USERFLAGSBYGROUP field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP3USERFLAGSBYGROUP() map[string]interface{} {
	if o == nil || o.AUTHLDAP3USERFLAGSBYGROUP == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AUTHLDAP3USERFLAGSBYGROUP
}

// GetAUTHLDAP3USERFLAGSBYGROUPOk returns a tuple with the AUTHLDAP3USERFLAGSBYGROUP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP3USERFLAGSBYGROUPOk() (*map[string]interface{}, bool) {
	if o == nil || o.AUTHLDAP3USERFLAGSBYGROUP == nil {
		return nil, false
	}
	return o.AUTHLDAP3USERFLAGSBYGROUP, true
}

// HasAUTHLDAP3USERFLAGSBYGROUP returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP3USERFLAGSBYGROUP() bool {
	if o != nil && o.AUTHLDAP3USERFLAGSBYGROUP != nil {
		return true
	}

	return false
}

// SetAUTHLDAP3USERFLAGSBYGROUP gets a reference to the given map[string]interface{} and assigns it to the AUTHLDAP3USERFLAGSBYGROUP field.
func (o *InlineObject60) SetAUTHLDAP3USERFLAGSBYGROUP(v map[string]interface{}) {
	o.AUTHLDAP3USERFLAGSBYGROUP = &v
}

// GetAUTHLDAP3USERSEARCH returns the AUTHLDAP3USERSEARCH field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP3USERSEARCH() []string {
	if o == nil || o.AUTHLDAP3USERSEARCH == nil {
		var ret []string
		return ret
	}
	return *o.AUTHLDAP3USERSEARCH
}

// GetAUTHLDAP3USERSEARCHOk returns a tuple with the AUTHLDAP3USERSEARCH field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP3USERSEARCHOk() (*[]string, bool) {
	if o == nil || o.AUTHLDAP3USERSEARCH == nil {
		return nil, false
	}
	return o.AUTHLDAP3USERSEARCH, true
}

// HasAUTHLDAP3USERSEARCH returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP3USERSEARCH() bool {
	if o != nil && o.AUTHLDAP3USERSEARCH != nil {
		return true
	}

	return false
}

// SetAUTHLDAP3USERSEARCH gets a reference to the given []string and assigns it to the AUTHLDAP3USERSEARCH field.
func (o *InlineObject60) SetAUTHLDAP3USERSEARCH(v []string) {
	o.AUTHLDAP3USERSEARCH = &v
}

// GetAUTHLDAP4BINDDN returns the AUTHLDAP4BINDDN field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP4BINDDN() string {
	if o == nil || o.AUTHLDAP4BINDDN == nil {
		var ret string
		return ret
	}
	return *o.AUTHLDAP4BINDDN
}

// GetAUTHLDAP4BINDDNOk returns a tuple with the AUTHLDAP4BINDDN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP4BINDDNOk() (*string, bool) {
	if o == nil || o.AUTHLDAP4BINDDN == nil {
		return nil, false
	}
	return o.AUTHLDAP4BINDDN, true
}

// HasAUTHLDAP4BINDDN returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP4BINDDN() bool {
	if o != nil && o.AUTHLDAP4BINDDN != nil {
		return true
	}

	return false
}

// SetAUTHLDAP4BINDDN gets a reference to the given string and assigns it to the AUTHLDAP4BINDDN field.
func (o *InlineObject60) SetAUTHLDAP4BINDDN(v string) {
	o.AUTHLDAP4BINDDN = &v
}

// GetAUTHLDAP4BINDPASSWORD returns the AUTHLDAP4BINDPASSWORD field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP4BINDPASSWORD() string {
	if o == nil || o.AUTHLDAP4BINDPASSWORD == nil {
		var ret string
		return ret
	}
	return *o.AUTHLDAP4BINDPASSWORD
}

// GetAUTHLDAP4BINDPASSWORDOk returns a tuple with the AUTHLDAP4BINDPASSWORD field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP4BINDPASSWORDOk() (*string, bool) {
	if o == nil || o.AUTHLDAP4BINDPASSWORD == nil {
		return nil, false
	}
	return o.AUTHLDAP4BINDPASSWORD, true
}

// HasAUTHLDAP4BINDPASSWORD returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP4BINDPASSWORD() bool {
	if o != nil && o.AUTHLDAP4BINDPASSWORD != nil {
		return true
	}

	return false
}

// SetAUTHLDAP4BINDPASSWORD gets a reference to the given string and assigns it to the AUTHLDAP4BINDPASSWORD field.
func (o *InlineObject60) SetAUTHLDAP4BINDPASSWORD(v string) {
	o.AUTHLDAP4BINDPASSWORD = &v
}

// GetAUTHLDAP4CONNECTIONOPTIONS returns the AUTHLDAP4CONNECTIONOPTIONS field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP4CONNECTIONOPTIONS() map[string]interface{} {
	if o == nil || o.AUTHLDAP4CONNECTIONOPTIONS == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AUTHLDAP4CONNECTIONOPTIONS
}

// GetAUTHLDAP4CONNECTIONOPTIONSOk returns a tuple with the AUTHLDAP4CONNECTIONOPTIONS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP4CONNECTIONOPTIONSOk() (*map[string]interface{}, bool) {
	if o == nil || o.AUTHLDAP4CONNECTIONOPTIONS == nil {
		return nil, false
	}
	return o.AUTHLDAP4CONNECTIONOPTIONS, true
}

// HasAUTHLDAP4CONNECTIONOPTIONS returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP4CONNECTIONOPTIONS() bool {
	if o != nil && o.AUTHLDAP4CONNECTIONOPTIONS != nil {
		return true
	}

	return false
}

// SetAUTHLDAP4CONNECTIONOPTIONS gets a reference to the given map[string]interface{} and assigns it to the AUTHLDAP4CONNECTIONOPTIONS field.
func (o *InlineObject60) SetAUTHLDAP4CONNECTIONOPTIONS(v map[string]interface{}) {
	o.AUTHLDAP4CONNECTIONOPTIONS = &v
}

// GetAUTHLDAP4DENYGROUP returns the AUTHLDAP4DENYGROUP field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP4DENYGROUP() string {
	if o == nil || o.AUTHLDAP4DENYGROUP == nil {
		var ret string
		return ret
	}
	return *o.AUTHLDAP4DENYGROUP
}

// GetAUTHLDAP4DENYGROUPOk returns a tuple with the AUTHLDAP4DENYGROUP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP4DENYGROUPOk() (*string, bool) {
	if o == nil || o.AUTHLDAP4DENYGROUP == nil {
		return nil, false
	}
	return o.AUTHLDAP4DENYGROUP, true
}

// HasAUTHLDAP4DENYGROUP returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP4DENYGROUP() bool {
	if o != nil && o.AUTHLDAP4DENYGROUP != nil {
		return true
	}

	return false
}

// SetAUTHLDAP4DENYGROUP gets a reference to the given string and assigns it to the AUTHLDAP4DENYGROUP field.
func (o *InlineObject60) SetAUTHLDAP4DENYGROUP(v string) {
	o.AUTHLDAP4DENYGROUP = &v
}

// GetAUTHLDAP4GROUPSEARCH returns the AUTHLDAP4GROUPSEARCH field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP4GROUPSEARCH() []string {
	if o == nil || o.AUTHLDAP4GROUPSEARCH == nil {
		var ret []string
		return ret
	}
	return *o.AUTHLDAP4GROUPSEARCH
}

// GetAUTHLDAP4GROUPSEARCHOk returns a tuple with the AUTHLDAP4GROUPSEARCH field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP4GROUPSEARCHOk() (*[]string, bool) {
	if o == nil || o.AUTHLDAP4GROUPSEARCH == nil {
		return nil, false
	}
	return o.AUTHLDAP4GROUPSEARCH, true
}

// HasAUTHLDAP4GROUPSEARCH returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP4GROUPSEARCH() bool {
	if o != nil && o.AUTHLDAP4GROUPSEARCH != nil {
		return true
	}

	return false
}

// SetAUTHLDAP4GROUPSEARCH gets a reference to the given []string and assigns it to the AUTHLDAP4GROUPSEARCH field.
func (o *InlineObject60) SetAUTHLDAP4GROUPSEARCH(v []string) {
	o.AUTHLDAP4GROUPSEARCH = &v
}

// GetAUTHLDAP4GROUPTYPE returns the AUTHLDAP4GROUPTYPE field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP4GROUPTYPE() string {
	if o == nil || o.AUTHLDAP4GROUPTYPE == nil {
		var ret string
		return ret
	}
	return *o.AUTHLDAP4GROUPTYPE
}

// GetAUTHLDAP4GROUPTYPEOk returns a tuple with the AUTHLDAP4GROUPTYPE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP4GROUPTYPEOk() (*string, bool) {
	if o == nil || o.AUTHLDAP4GROUPTYPE == nil {
		return nil, false
	}
	return o.AUTHLDAP4GROUPTYPE, true
}

// HasAUTHLDAP4GROUPTYPE returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP4GROUPTYPE() bool {
	if o != nil && o.AUTHLDAP4GROUPTYPE != nil {
		return true
	}

	return false
}

// SetAUTHLDAP4GROUPTYPE gets a reference to the given string and assigns it to the AUTHLDAP4GROUPTYPE field.
func (o *InlineObject60) SetAUTHLDAP4GROUPTYPE(v string) {
	o.AUTHLDAP4GROUPTYPE = &v
}

// GetAUTHLDAP4GROUPTYPEPARAMS returns the AUTHLDAP4GROUPTYPEPARAMS field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP4GROUPTYPEPARAMS() map[string]interface{} {
	if o == nil || o.AUTHLDAP4GROUPTYPEPARAMS == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AUTHLDAP4GROUPTYPEPARAMS
}

// GetAUTHLDAP4GROUPTYPEPARAMSOk returns a tuple with the AUTHLDAP4GROUPTYPEPARAMS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP4GROUPTYPEPARAMSOk() (*map[string]interface{}, bool) {
	if o == nil || o.AUTHLDAP4GROUPTYPEPARAMS == nil {
		return nil, false
	}
	return o.AUTHLDAP4GROUPTYPEPARAMS, true
}

// HasAUTHLDAP4GROUPTYPEPARAMS returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP4GROUPTYPEPARAMS() bool {
	if o != nil && o.AUTHLDAP4GROUPTYPEPARAMS != nil {
		return true
	}

	return false
}

// SetAUTHLDAP4GROUPTYPEPARAMS gets a reference to the given map[string]interface{} and assigns it to the AUTHLDAP4GROUPTYPEPARAMS field.
func (o *InlineObject60) SetAUTHLDAP4GROUPTYPEPARAMS(v map[string]interface{}) {
	o.AUTHLDAP4GROUPTYPEPARAMS = &v
}

// GetAUTHLDAP4ORGANIZATIONMAP returns the AUTHLDAP4ORGANIZATIONMAP field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP4ORGANIZATIONMAP() map[string]interface{} {
	if o == nil || o.AUTHLDAP4ORGANIZATIONMAP == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AUTHLDAP4ORGANIZATIONMAP
}

// GetAUTHLDAP4ORGANIZATIONMAPOk returns a tuple with the AUTHLDAP4ORGANIZATIONMAP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP4ORGANIZATIONMAPOk() (*map[string]interface{}, bool) {
	if o == nil || o.AUTHLDAP4ORGANIZATIONMAP == nil {
		return nil, false
	}
	return o.AUTHLDAP4ORGANIZATIONMAP, true
}

// HasAUTHLDAP4ORGANIZATIONMAP returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP4ORGANIZATIONMAP() bool {
	if o != nil && o.AUTHLDAP4ORGANIZATIONMAP != nil {
		return true
	}

	return false
}

// SetAUTHLDAP4ORGANIZATIONMAP gets a reference to the given map[string]interface{} and assigns it to the AUTHLDAP4ORGANIZATIONMAP field.
func (o *InlineObject60) SetAUTHLDAP4ORGANIZATIONMAP(v map[string]interface{}) {
	o.AUTHLDAP4ORGANIZATIONMAP = &v
}

// GetAUTHLDAP4REQUIREGROUP returns the AUTHLDAP4REQUIREGROUP field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP4REQUIREGROUP() string {
	if o == nil || o.AUTHLDAP4REQUIREGROUP == nil {
		var ret string
		return ret
	}
	return *o.AUTHLDAP4REQUIREGROUP
}

// GetAUTHLDAP4REQUIREGROUPOk returns a tuple with the AUTHLDAP4REQUIREGROUP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP4REQUIREGROUPOk() (*string, bool) {
	if o == nil || o.AUTHLDAP4REQUIREGROUP == nil {
		return nil, false
	}
	return o.AUTHLDAP4REQUIREGROUP, true
}

// HasAUTHLDAP4REQUIREGROUP returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP4REQUIREGROUP() bool {
	if o != nil && o.AUTHLDAP4REQUIREGROUP != nil {
		return true
	}

	return false
}

// SetAUTHLDAP4REQUIREGROUP gets a reference to the given string and assigns it to the AUTHLDAP4REQUIREGROUP field.
func (o *InlineObject60) SetAUTHLDAP4REQUIREGROUP(v string) {
	o.AUTHLDAP4REQUIREGROUP = &v
}

// GetAUTHLDAP4SERVERURI returns the AUTHLDAP4SERVERURI field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP4SERVERURI() string {
	if o == nil || o.AUTHLDAP4SERVERURI == nil {
		var ret string
		return ret
	}
	return *o.AUTHLDAP4SERVERURI
}

// GetAUTHLDAP4SERVERURIOk returns a tuple with the AUTHLDAP4SERVERURI field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP4SERVERURIOk() (*string, bool) {
	if o == nil || o.AUTHLDAP4SERVERURI == nil {
		return nil, false
	}
	return o.AUTHLDAP4SERVERURI, true
}

// HasAUTHLDAP4SERVERURI returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP4SERVERURI() bool {
	if o != nil && o.AUTHLDAP4SERVERURI != nil {
		return true
	}

	return false
}

// SetAUTHLDAP4SERVERURI gets a reference to the given string and assigns it to the AUTHLDAP4SERVERURI field.
func (o *InlineObject60) SetAUTHLDAP4SERVERURI(v string) {
	o.AUTHLDAP4SERVERURI = &v
}

// GetAUTHLDAP4STARTTLS returns the AUTHLDAP4STARTTLS field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP4STARTTLS() bool {
	if o == nil || o.AUTHLDAP4STARTTLS == nil {
		var ret bool
		return ret
	}
	return *o.AUTHLDAP4STARTTLS
}

// GetAUTHLDAP4STARTTLSOk returns a tuple with the AUTHLDAP4STARTTLS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP4STARTTLSOk() (*bool, bool) {
	if o == nil || o.AUTHLDAP4STARTTLS == nil {
		return nil, false
	}
	return o.AUTHLDAP4STARTTLS, true
}

// HasAUTHLDAP4STARTTLS returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP4STARTTLS() bool {
	if o != nil && o.AUTHLDAP4STARTTLS != nil {
		return true
	}

	return false
}

// SetAUTHLDAP4STARTTLS gets a reference to the given bool and assigns it to the AUTHLDAP4STARTTLS field.
func (o *InlineObject60) SetAUTHLDAP4STARTTLS(v bool) {
	o.AUTHLDAP4STARTTLS = &v
}

// GetAUTHLDAP4TEAMMAP returns the AUTHLDAP4TEAMMAP field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP4TEAMMAP() map[string]interface{} {
	if o == nil || o.AUTHLDAP4TEAMMAP == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AUTHLDAP4TEAMMAP
}

// GetAUTHLDAP4TEAMMAPOk returns a tuple with the AUTHLDAP4TEAMMAP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP4TEAMMAPOk() (*map[string]interface{}, bool) {
	if o == nil || o.AUTHLDAP4TEAMMAP == nil {
		return nil, false
	}
	return o.AUTHLDAP4TEAMMAP, true
}

// HasAUTHLDAP4TEAMMAP returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP4TEAMMAP() bool {
	if o != nil && o.AUTHLDAP4TEAMMAP != nil {
		return true
	}

	return false
}

// SetAUTHLDAP4TEAMMAP gets a reference to the given map[string]interface{} and assigns it to the AUTHLDAP4TEAMMAP field.
func (o *InlineObject60) SetAUTHLDAP4TEAMMAP(v map[string]interface{}) {
	o.AUTHLDAP4TEAMMAP = &v
}

// GetAUTHLDAP4USERATTRMAP returns the AUTHLDAP4USERATTRMAP field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP4USERATTRMAP() map[string]interface{} {
	if o == nil || o.AUTHLDAP4USERATTRMAP == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AUTHLDAP4USERATTRMAP
}

// GetAUTHLDAP4USERATTRMAPOk returns a tuple with the AUTHLDAP4USERATTRMAP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP4USERATTRMAPOk() (*map[string]interface{}, bool) {
	if o == nil || o.AUTHLDAP4USERATTRMAP == nil {
		return nil, false
	}
	return o.AUTHLDAP4USERATTRMAP, true
}

// HasAUTHLDAP4USERATTRMAP returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP4USERATTRMAP() bool {
	if o != nil && o.AUTHLDAP4USERATTRMAP != nil {
		return true
	}

	return false
}

// SetAUTHLDAP4USERATTRMAP gets a reference to the given map[string]interface{} and assigns it to the AUTHLDAP4USERATTRMAP field.
func (o *InlineObject60) SetAUTHLDAP4USERATTRMAP(v map[string]interface{}) {
	o.AUTHLDAP4USERATTRMAP = &v
}

// GetAUTHLDAP4USERDNTEMPLATE returns the AUTHLDAP4USERDNTEMPLATE field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP4USERDNTEMPLATE() string {
	if o == nil || o.AUTHLDAP4USERDNTEMPLATE == nil {
		var ret string
		return ret
	}
	return *o.AUTHLDAP4USERDNTEMPLATE
}

// GetAUTHLDAP4USERDNTEMPLATEOk returns a tuple with the AUTHLDAP4USERDNTEMPLATE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP4USERDNTEMPLATEOk() (*string, bool) {
	if o == nil || o.AUTHLDAP4USERDNTEMPLATE == nil {
		return nil, false
	}
	return o.AUTHLDAP4USERDNTEMPLATE, true
}

// HasAUTHLDAP4USERDNTEMPLATE returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP4USERDNTEMPLATE() bool {
	if o != nil && o.AUTHLDAP4USERDNTEMPLATE != nil {
		return true
	}

	return false
}

// SetAUTHLDAP4USERDNTEMPLATE gets a reference to the given string and assigns it to the AUTHLDAP4USERDNTEMPLATE field.
func (o *InlineObject60) SetAUTHLDAP4USERDNTEMPLATE(v string) {
	o.AUTHLDAP4USERDNTEMPLATE = &v
}

// GetAUTHLDAP4USERFLAGSBYGROUP returns the AUTHLDAP4USERFLAGSBYGROUP field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP4USERFLAGSBYGROUP() map[string]interface{} {
	if o == nil || o.AUTHLDAP4USERFLAGSBYGROUP == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AUTHLDAP4USERFLAGSBYGROUP
}

// GetAUTHLDAP4USERFLAGSBYGROUPOk returns a tuple with the AUTHLDAP4USERFLAGSBYGROUP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP4USERFLAGSBYGROUPOk() (*map[string]interface{}, bool) {
	if o == nil || o.AUTHLDAP4USERFLAGSBYGROUP == nil {
		return nil, false
	}
	return o.AUTHLDAP4USERFLAGSBYGROUP, true
}

// HasAUTHLDAP4USERFLAGSBYGROUP returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP4USERFLAGSBYGROUP() bool {
	if o != nil && o.AUTHLDAP4USERFLAGSBYGROUP != nil {
		return true
	}

	return false
}

// SetAUTHLDAP4USERFLAGSBYGROUP gets a reference to the given map[string]interface{} and assigns it to the AUTHLDAP4USERFLAGSBYGROUP field.
func (o *InlineObject60) SetAUTHLDAP4USERFLAGSBYGROUP(v map[string]interface{}) {
	o.AUTHLDAP4USERFLAGSBYGROUP = &v
}

// GetAUTHLDAP4USERSEARCH returns the AUTHLDAP4USERSEARCH field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP4USERSEARCH() []string {
	if o == nil || o.AUTHLDAP4USERSEARCH == nil {
		var ret []string
		return ret
	}
	return *o.AUTHLDAP4USERSEARCH
}

// GetAUTHLDAP4USERSEARCHOk returns a tuple with the AUTHLDAP4USERSEARCH field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP4USERSEARCHOk() (*[]string, bool) {
	if o == nil || o.AUTHLDAP4USERSEARCH == nil {
		return nil, false
	}
	return o.AUTHLDAP4USERSEARCH, true
}

// HasAUTHLDAP4USERSEARCH returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP4USERSEARCH() bool {
	if o != nil && o.AUTHLDAP4USERSEARCH != nil {
		return true
	}

	return false
}

// SetAUTHLDAP4USERSEARCH gets a reference to the given []string and assigns it to the AUTHLDAP4USERSEARCH field.
func (o *InlineObject60) SetAUTHLDAP4USERSEARCH(v []string) {
	o.AUTHLDAP4USERSEARCH = &v
}

// GetAUTHLDAP5BINDDN returns the AUTHLDAP5BINDDN field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP5BINDDN() string {
	if o == nil || o.AUTHLDAP5BINDDN == nil {
		var ret string
		return ret
	}
	return *o.AUTHLDAP5BINDDN
}

// GetAUTHLDAP5BINDDNOk returns a tuple with the AUTHLDAP5BINDDN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP5BINDDNOk() (*string, bool) {
	if o == nil || o.AUTHLDAP5BINDDN == nil {
		return nil, false
	}
	return o.AUTHLDAP5BINDDN, true
}

// HasAUTHLDAP5BINDDN returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP5BINDDN() bool {
	if o != nil && o.AUTHLDAP5BINDDN != nil {
		return true
	}

	return false
}

// SetAUTHLDAP5BINDDN gets a reference to the given string and assigns it to the AUTHLDAP5BINDDN field.
func (o *InlineObject60) SetAUTHLDAP5BINDDN(v string) {
	o.AUTHLDAP5BINDDN = &v
}

// GetAUTHLDAP5BINDPASSWORD returns the AUTHLDAP5BINDPASSWORD field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP5BINDPASSWORD() string {
	if o == nil || o.AUTHLDAP5BINDPASSWORD == nil {
		var ret string
		return ret
	}
	return *o.AUTHLDAP5BINDPASSWORD
}

// GetAUTHLDAP5BINDPASSWORDOk returns a tuple with the AUTHLDAP5BINDPASSWORD field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP5BINDPASSWORDOk() (*string, bool) {
	if o == nil || o.AUTHLDAP5BINDPASSWORD == nil {
		return nil, false
	}
	return o.AUTHLDAP5BINDPASSWORD, true
}

// HasAUTHLDAP5BINDPASSWORD returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP5BINDPASSWORD() bool {
	if o != nil && o.AUTHLDAP5BINDPASSWORD != nil {
		return true
	}

	return false
}

// SetAUTHLDAP5BINDPASSWORD gets a reference to the given string and assigns it to the AUTHLDAP5BINDPASSWORD field.
func (o *InlineObject60) SetAUTHLDAP5BINDPASSWORD(v string) {
	o.AUTHLDAP5BINDPASSWORD = &v
}

// GetAUTHLDAP5CONNECTIONOPTIONS returns the AUTHLDAP5CONNECTIONOPTIONS field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP5CONNECTIONOPTIONS() map[string]interface{} {
	if o == nil || o.AUTHLDAP5CONNECTIONOPTIONS == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AUTHLDAP5CONNECTIONOPTIONS
}

// GetAUTHLDAP5CONNECTIONOPTIONSOk returns a tuple with the AUTHLDAP5CONNECTIONOPTIONS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP5CONNECTIONOPTIONSOk() (*map[string]interface{}, bool) {
	if o == nil || o.AUTHLDAP5CONNECTIONOPTIONS == nil {
		return nil, false
	}
	return o.AUTHLDAP5CONNECTIONOPTIONS, true
}

// HasAUTHLDAP5CONNECTIONOPTIONS returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP5CONNECTIONOPTIONS() bool {
	if o != nil && o.AUTHLDAP5CONNECTIONOPTIONS != nil {
		return true
	}

	return false
}

// SetAUTHLDAP5CONNECTIONOPTIONS gets a reference to the given map[string]interface{} and assigns it to the AUTHLDAP5CONNECTIONOPTIONS field.
func (o *InlineObject60) SetAUTHLDAP5CONNECTIONOPTIONS(v map[string]interface{}) {
	o.AUTHLDAP5CONNECTIONOPTIONS = &v
}

// GetAUTHLDAP5DENYGROUP returns the AUTHLDAP5DENYGROUP field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP5DENYGROUP() string {
	if o == nil || o.AUTHLDAP5DENYGROUP == nil {
		var ret string
		return ret
	}
	return *o.AUTHLDAP5DENYGROUP
}

// GetAUTHLDAP5DENYGROUPOk returns a tuple with the AUTHLDAP5DENYGROUP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP5DENYGROUPOk() (*string, bool) {
	if o == nil || o.AUTHLDAP5DENYGROUP == nil {
		return nil, false
	}
	return o.AUTHLDAP5DENYGROUP, true
}

// HasAUTHLDAP5DENYGROUP returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP5DENYGROUP() bool {
	if o != nil && o.AUTHLDAP5DENYGROUP != nil {
		return true
	}

	return false
}

// SetAUTHLDAP5DENYGROUP gets a reference to the given string and assigns it to the AUTHLDAP5DENYGROUP field.
func (o *InlineObject60) SetAUTHLDAP5DENYGROUP(v string) {
	o.AUTHLDAP5DENYGROUP = &v
}

// GetAUTHLDAP5GROUPSEARCH returns the AUTHLDAP5GROUPSEARCH field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP5GROUPSEARCH() []string {
	if o == nil || o.AUTHLDAP5GROUPSEARCH == nil {
		var ret []string
		return ret
	}
	return *o.AUTHLDAP5GROUPSEARCH
}

// GetAUTHLDAP5GROUPSEARCHOk returns a tuple with the AUTHLDAP5GROUPSEARCH field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP5GROUPSEARCHOk() (*[]string, bool) {
	if o == nil || o.AUTHLDAP5GROUPSEARCH == nil {
		return nil, false
	}
	return o.AUTHLDAP5GROUPSEARCH, true
}

// HasAUTHLDAP5GROUPSEARCH returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP5GROUPSEARCH() bool {
	if o != nil && o.AUTHLDAP5GROUPSEARCH != nil {
		return true
	}

	return false
}

// SetAUTHLDAP5GROUPSEARCH gets a reference to the given []string and assigns it to the AUTHLDAP5GROUPSEARCH field.
func (o *InlineObject60) SetAUTHLDAP5GROUPSEARCH(v []string) {
	o.AUTHLDAP5GROUPSEARCH = &v
}

// GetAUTHLDAP5GROUPTYPE returns the AUTHLDAP5GROUPTYPE field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP5GROUPTYPE() string {
	if o == nil || o.AUTHLDAP5GROUPTYPE == nil {
		var ret string
		return ret
	}
	return *o.AUTHLDAP5GROUPTYPE
}

// GetAUTHLDAP5GROUPTYPEOk returns a tuple with the AUTHLDAP5GROUPTYPE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP5GROUPTYPEOk() (*string, bool) {
	if o == nil || o.AUTHLDAP5GROUPTYPE == nil {
		return nil, false
	}
	return o.AUTHLDAP5GROUPTYPE, true
}

// HasAUTHLDAP5GROUPTYPE returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP5GROUPTYPE() bool {
	if o != nil && o.AUTHLDAP5GROUPTYPE != nil {
		return true
	}

	return false
}

// SetAUTHLDAP5GROUPTYPE gets a reference to the given string and assigns it to the AUTHLDAP5GROUPTYPE field.
func (o *InlineObject60) SetAUTHLDAP5GROUPTYPE(v string) {
	o.AUTHLDAP5GROUPTYPE = &v
}

// GetAUTHLDAP5GROUPTYPEPARAMS returns the AUTHLDAP5GROUPTYPEPARAMS field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP5GROUPTYPEPARAMS() map[string]interface{} {
	if o == nil || o.AUTHLDAP5GROUPTYPEPARAMS == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AUTHLDAP5GROUPTYPEPARAMS
}

// GetAUTHLDAP5GROUPTYPEPARAMSOk returns a tuple with the AUTHLDAP5GROUPTYPEPARAMS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP5GROUPTYPEPARAMSOk() (*map[string]interface{}, bool) {
	if o == nil || o.AUTHLDAP5GROUPTYPEPARAMS == nil {
		return nil, false
	}
	return o.AUTHLDAP5GROUPTYPEPARAMS, true
}

// HasAUTHLDAP5GROUPTYPEPARAMS returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP5GROUPTYPEPARAMS() bool {
	if o != nil && o.AUTHLDAP5GROUPTYPEPARAMS != nil {
		return true
	}

	return false
}

// SetAUTHLDAP5GROUPTYPEPARAMS gets a reference to the given map[string]interface{} and assigns it to the AUTHLDAP5GROUPTYPEPARAMS field.
func (o *InlineObject60) SetAUTHLDAP5GROUPTYPEPARAMS(v map[string]interface{}) {
	o.AUTHLDAP5GROUPTYPEPARAMS = &v
}

// GetAUTHLDAP5ORGANIZATIONMAP returns the AUTHLDAP5ORGANIZATIONMAP field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP5ORGANIZATIONMAP() map[string]interface{} {
	if o == nil || o.AUTHLDAP5ORGANIZATIONMAP == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AUTHLDAP5ORGANIZATIONMAP
}

// GetAUTHLDAP5ORGANIZATIONMAPOk returns a tuple with the AUTHLDAP5ORGANIZATIONMAP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP5ORGANIZATIONMAPOk() (*map[string]interface{}, bool) {
	if o == nil || o.AUTHLDAP5ORGANIZATIONMAP == nil {
		return nil, false
	}
	return o.AUTHLDAP5ORGANIZATIONMAP, true
}

// HasAUTHLDAP5ORGANIZATIONMAP returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP5ORGANIZATIONMAP() bool {
	if o != nil && o.AUTHLDAP5ORGANIZATIONMAP != nil {
		return true
	}

	return false
}

// SetAUTHLDAP5ORGANIZATIONMAP gets a reference to the given map[string]interface{} and assigns it to the AUTHLDAP5ORGANIZATIONMAP field.
func (o *InlineObject60) SetAUTHLDAP5ORGANIZATIONMAP(v map[string]interface{}) {
	o.AUTHLDAP5ORGANIZATIONMAP = &v
}

// GetAUTHLDAP5REQUIREGROUP returns the AUTHLDAP5REQUIREGROUP field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP5REQUIREGROUP() string {
	if o == nil || o.AUTHLDAP5REQUIREGROUP == nil {
		var ret string
		return ret
	}
	return *o.AUTHLDAP5REQUIREGROUP
}

// GetAUTHLDAP5REQUIREGROUPOk returns a tuple with the AUTHLDAP5REQUIREGROUP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP5REQUIREGROUPOk() (*string, bool) {
	if o == nil || o.AUTHLDAP5REQUIREGROUP == nil {
		return nil, false
	}
	return o.AUTHLDAP5REQUIREGROUP, true
}

// HasAUTHLDAP5REQUIREGROUP returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP5REQUIREGROUP() bool {
	if o != nil && o.AUTHLDAP5REQUIREGROUP != nil {
		return true
	}

	return false
}

// SetAUTHLDAP5REQUIREGROUP gets a reference to the given string and assigns it to the AUTHLDAP5REQUIREGROUP field.
func (o *InlineObject60) SetAUTHLDAP5REQUIREGROUP(v string) {
	o.AUTHLDAP5REQUIREGROUP = &v
}

// GetAUTHLDAP5SERVERURI returns the AUTHLDAP5SERVERURI field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP5SERVERURI() string {
	if o == nil || o.AUTHLDAP5SERVERURI == nil {
		var ret string
		return ret
	}
	return *o.AUTHLDAP5SERVERURI
}

// GetAUTHLDAP5SERVERURIOk returns a tuple with the AUTHLDAP5SERVERURI field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP5SERVERURIOk() (*string, bool) {
	if o == nil || o.AUTHLDAP5SERVERURI == nil {
		return nil, false
	}
	return o.AUTHLDAP5SERVERURI, true
}

// HasAUTHLDAP5SERVERURI returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP5SERVERURI() bool {
	if o != nil && o.AUTHLDAP5SERVERURI != nil {
		return true
	}

	return false
}

// SetAUTHLDAP5SERVERURI gets a reference to the given string and assigns it to the AUTHLDAP5SERVERURI field.
func (o *InlineObject60) SetAUTHLDAP5SERVERURI(v string) {
	o.AUTHLDAP5SERVERURI = &v
}

// GetAUTHLDAP5STARTTLS returns the AUTHLDAP5STARTTLS field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP5STARTTLS() bool {
	if o == nil || o.AUTHLDAP5STARTTLS == nil {
		var ret bool
		return ret
	}
	return *o.AUTHLDAP5STARTTLS
}

// GetAUTHLDAP5STARTTLSOk returns a tuple with the AUTHLDAP5STARTTLS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP5STARTTLSOk() (*bool, bool) {
	if o == nil || o.AUTHLDAP5STARTTLS == nil {
		return nil, false
	}
	return o.AUTHLDAP5STARTTLS, true
}

// HasAUTHLDAP5STARTTLS returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP5STARTTLS() bool {
	if o != nil && o.AUTHLDAP5STARTTLS != nil {
		return true
	}

	return false
}

// SetAUTHLDAP5STARTTLS gets a reference to the given bool and assigns it to the AUTHLDAP5STARTTLS field.
func (o *InlineObject60) SetAUTHLDAP5STARTTLS(v bool) {
	o.AUTHLDAP5STARTTLS = &v
}

// GetAUTHLDAP5TEAMMAP returns the AUTHLDAP5TEAMMAP field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP5TEAMMAP() map[string]interface{} {
	if o == nil || o.AUTHLDAP5TEAMMAP == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AUTHLDAP5TEAMMAP
}

// GetAUTHLDAP5TEAMMAPOk returns a tuple with the AUTHLDAP5TEAMMAP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP5TEAMMAPOk() (*map[string]interface{}, bool) {
	if o == nil || o.AUTHLDAP5TEAMMAP == nil {
		return nil, false
	}
	return o.AUTHLDAP5TEAMMAP, true
}

// HasAUTHLDAP5TEAMMAP returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP5TEAMMAP() bool {
	if o != nil && o.AUTHLDAP5TEAMMAP != nil {
		return true
	}

	return false
}

// SetAUTHLDAP5TEAMMAP gets a reference to the given map[string]interface{} and assigns it to the AUTHLDAP5TEAMMAP field.
func (o *InlineObject60) SetAUTHLDAP5TEAMMAP(v map[string]interface{}) {
	o.AUTHLDAP5TEAMMAP = &v
}

// GetAUTHLDAP5USERATTRMAP returns the AUTHLDAP5USERATTRMAP field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP5USERATTRMAP() map[string]interface{} {
	if o == nil || o.AUTHLDAP5USERATTRMAP == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AUTHLDAP5USERATTRMAP
}

// GetAUTHLDAP5USERATTRMAPOk returns a tuple with the AUTHLDAP5USERATTRMAP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP5USERATTRMAPOk() (*map[string]interface{}, bool) {
	if o == nil || o.AUTHLDAP5USERATTRMAP == nil {
		return nil, false
	}
	return o.AUTHLDAP5USERATTRMAP, true
}

// HasAUTHLDAP5USERATTRMAP returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP5USERATTRMAP() bool {
	if o != nil && o.AUTHLDAP5USERATTRMAP != nil {
		return true
	}

	return false
}

// SetAUTHLDAP5USERATTRMAP gets a reference to the given map[string]interface{} and assigns it to the AUTHLDAP5USERATTRMAP field.
func (o *InlineObject60) SetAUTHLDAP5USERATTRMAP(v map[string]interface{}) {
	o.AUTHLDAP5USERATTRMAP = &v
}

// GetAUTHLDAP5USERDNTEMPLATE returns the AUTHLDAP5USERDNTEMPLATE field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP5USERDNTEMPLATE() string {
	if o == nil || o.AUTHLDAP5USERDNTEMPLATE == nil {
		var ret string
		return ret
	}
	return *o.AUTHLDAP5USERDNTEMPLATE
}

// GetAUTHLDAP5USERDNTEMPLATEOk returns a tuple with the AUTHLDAP5USERDNTEMPLATE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP5USERDNTEMPLATEOk() (*string, bool) {
	if o == nil || o.AUTHLDAP5USERDNTEMPLATE == nil {
		return nil, false
	}
	return o.AUTHLDAP5USERDNTEMPLATE, true
}

// HasAUTHLDAP5USERDNTEMPLATE returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP5USERDNTEMPLATE() bool {
	if o != nil && o.AUTHLDAP5USERDNTEMPLATE != nil {
		return true
	}

	return false
}

// SetAUTHLDAP5USERDNTEMPLATE gets a reference to the given string and assigns it to the AUTHLDAP5USERDNTEMPLATE field.
func (o *InlineObject60) SetAUTHLDAP5USERDNTEMPLATE(v string) {
	o.AUTHLDAP5USERDNTEMPLATE = &v
}

// GetAUTHLDAP5USERFLAGSBYGROUP returns the AUTHLDAP5USERFLAGSBYGROUP field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP5USERFLAGSBYGROUP() map[string]interface{} {
	if o == nil || o.AUTHLDAP5USERFLAGSBYGROUP == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AUTHLDAP5USERFLAGSBYGROUP
}

// GetAUTHLDAP5USERFLAGSBYGROUPOk returns a tuple with the AUTHLDAP5USERFLAGSBYGROUP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP5USERFLAGSBYGROUPOk() (*map[string]interface{}, bool) {
	if o == nil || o.AUTHLDAP5USERFLAGSBYGROUP == nil {
		return nil, false
	}
	return o.AUTHLDAP5USERFLAGSBYGROUP, true
}

// HasAUTHLDAP5USERFLAGSBYGROUP returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP5USERFLAGSBYGROUP() bool {
	if o != nil && o.AUTHLDAP5USERFLAGSBYGROUP != nil {
		return true
	}

	return false
}

// SetAUTHLDAP5USERFLAGSBYGROUP gets a reference to the given map[string]interface{} and assigns it to the AUTHLDAP5USERFLAGSBYGROUP field.
func (o *InlineObject60) SetAUTHLDAP5USERFLAGSBYGROUP(v map[string]interface{}) {
	o.AUTHLDAP5USERFLAGSBYGROUP = &v
}

// GetAUTHLDAP5USERSEARCH returns the AUTHLDAP5USERSEARCH field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTHLDAP5USERSEARCH() []string {
	if o == nil || o.AUTHLDAP5USERSEARCH == nil {
		var ret []string
		return ret
	}
	return *o.AUTHLDAP5USERSEARCH
}

// GetAUTHLDAP5USERSEARCHOk returns a tuple with the AUTHLDAP5USERSEARCH field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTHLDAP5USERSEARCHOk() (*[]string, bool) {
	if o == nil || o.AUTHLDAP5USERSEARCH == nil {
		return nil, false
	}
	return o.AUTHLDAP5USERSEARCH, true
}

// HasAUTHLDAP5USERSEARCH returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTHLDAP5USERSEARCH() bool {
	if o != nil && o.AUTHLDAP5USERSEARCH != nil {
		return true
	}

	return false
}

// SetAUTHLDAP5USERSEARCH gets a reference to the given []string and assigns it to the AUTHLDAP5USERSEARCH field.
func (o *InlineObject60) SetAUTHLDAP5USERSEARCH(v []string) {
	o.AUTHLDAP5USERSEARCH = &v
}

// GetAUTH_LDAP_BIND_DN returns the AUTH_LDAP_BIND_DN field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTH_LDAP_BIND_DN() string {
	if o == nil || o.AUTH_LDAP_BIND_DN == nil {
		var ret string
		return ret
	}
	return *o.AUTH_LDAP_BIND_DN
}

// GetAUTH_LDAP_BIND_DNOk returns a tuple with the AUTH_LDAP_BIND_DN field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTH_LDAP_BIND_DNOk() (*string, bool) {
	if o == nil || o.AUTH_LDAP_BIND_DN == nil {
		return nil, false
	}
	return o.AUTH_LDAP_BIND_DN, true
}

// HasAUTH_LDAP_BIND_DN returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTH_LDAP_BIND_DN() bool {
	if o != nil && o.AUTH_LDAP_BIND_DN != nil {
		return true
	}

	return false
}

// SetAUTH_LDAP_BIND_DN gets a reference to the given string and assigns it to the AUTH_LDAP_BIND_DN field.
func (o *InlineObject60) SetAUTH_LDAP_BIND_DN(v string) {
	o.AUTH_LDAP_BIND_DN = &v
}

// GetAUTH_LDAP_BIND_PASSWORD returns the AUTH_LDAP_BIND_PASSWORD field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTH_LDAP_BIND_PASSWORD() string {
	if o == nil || o.AUTH_LDAP_BIND_PASSWORD == nil {
		var ret string
		return ret
	}
	return *o.AUTH_LDAP_BIND_PASSWORD
}

// GetAUTH_LDAP_BIND_PASSWORDOk returns a tuple with the AUTH_LDAP_BIND_PASSWORD field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTH_LDAP_BIND_PASSWORDOk() (*string, bool) {
	if o == nil || o.AUTH_LDAP_BIND_PASSWORD == nil {
		return nil, false
	}
	return o.AUTH_LDAP_BIND_PASSWORD, true
}

// HasAUTH_LDAP_BIND_PASSWORD returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTH_LDAP_BIND_PASSWORD() bool {
	if o != nil && o.AUTH_LDAP_BIND_PASSWORD != nil {
		return true
	}

	return false
}

// SetAUTH_LDAP_BIND_PASSWORD gets a reference to the given string and assigns it to the AUTH_LDAP_BIND_PASSWORD field.
func (o *InlineObject60) SetAUTH_LDAP_BIND_PASSWORD(v string) {
	o.AUTH_LDAP_BIND_PASSWORD = &v
}

// GetAUTH_LDAP_CONNECTION_OPTIONS returns the AUTH_LDAP_CONNECTION_OPTIONS field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTH_LDAP_CONNECTION_OPTIONS() map[string]interface{} {
	if o == nil || o.AUTH_LDAP_CONNECTION_OPTIONS == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AUTH_LDAP_CONNECTION_OPTIONS
}

// GetAUTH_LDAP_CONNECTION_OPTIONSOk returns a tuple with the AUTH_LDAP_CONNECTION_OPTIONS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTH_LDAP_CONNECTION_OPTIONSOk() (*map[string]interface{}, bool) {
	if o == nil || o.AUTH_LDAP_CONNECTION_OPTIONS == nil {
		return nil, false
	}
	return o.AUTH_LDAP_CONNECTION_OPTIONS, true
}

// HasAUTH_LDAP_CONNECTION_OPTIONS returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTH_LDAP_CONNECTION_OPTIONS() bool {
	if o != nil && o.AUTH_LDAP_CONNECTION_OPTIONS != nil {
		return true
	}

	return false
}

// SetAUTH_LDAP_CONNECTION_OPTIONS gets a reference to the given map[string]interface{} and assigns it to the AUTH_LDAP_CONNECTION_OPTIONS field.
func (o *InlineObject60) SetAUTH_LDAP_CONNECTION_OPTIONS(v map[string]interface{}) {
	o.AUTH_LDAP_CONNECTION_OPTIONS = &v
}

// GetAUTH_LDAP_DENY_GROUP returns the AUTH_LDAP_DENY_GROUP field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTH_LDAP_DENY_GROUP() string {
	if o == nil || o.AUTH_LDAP_DENY_GROUP == nil {
		var ret string
		return ret
	}
	return *o.AUTH_LDAP_DENY_GROUP
}

// GetAUTH_LDAP_DENY_GROUPOk returns a tuple with the AUTH_LDAP_DENY_GROUP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTH_LDAP_DENY_GROUPOk() (*string, bool) {
	if o == nil || o.AUTH_LDAP_DENY_GROUP == nil {
		return nil, false
	}
	return o.AUTH_LDAP_DENY_GROUP, true
}

// HasAUTH_LDAP_DENY_GROUP returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTH_LDAP_DENY_GROUP() bool {
	if o != nil && o.AUTH_LDAP_DENY_GROUP != nil {
		return true
	}

	return false
}

// SetAUTH_LDAP_DENY_GROUP gets a reference to the given string and assigns it to the AUTH_LDAP_DENY_GROUP field.
func (o *InlineObject60) SetAUTH_LDAP_DENY_GROUP(v string) {
	o.AUTH_LDAP_DENY_GROUP = &v
}

// GetAUTH_LDAP_GROUP_SEARCH returns the AUTH_LDAP_GROUP_SEARCH field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTH_LDAP_GROUP_SEARCH() []string {
	if o == nil || o.AUTH_LDAP_GROUP_SEARCH == nil {
		var ret []string
		return ret
	}
	return *o.AUTH_LDAP_GROUP_SEARCH
}

// GetAUTH_LDAP_GROUP_SEARCHOk returns a tuple with the AUTH_LDAP_GROUP_SEARCH field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTH_LDAP_GROUP_SEARCHOk() (*[]string, bool) {
	if o == nil || o.AUTH_LDAP_GROUP_SEARCH == nil {
		return nil, false
	}
	return o.AUTH_LDAP_GROUP_SEARCH, true
}

// HasAUTH_LDAP_GROUP_SEARCH returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTH_LDAP_GROUP_SEARCH() bool {
	if o != nil && o.AUTH_LDAP_GROUP_SEARCH != nil {
		return true
	}

	return false
}

// SetAUTH_LDAP_GROUP_SEARCH gets a reference to the given []string and assigns it to the AUTH_LDAP_GROUP_SEARCH field.
func (o *InlineObject60) SetAUTH_LDAP_GROUP_SEARCH(v []string) {
	o.AUTH_LDAP_GROUP_SEARCH = &v
}

// GetAUTH_LDAP_GROUP_TYPE returns the AUTH_LDAP_GROUP_TYPE field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTH_LDAP_GROUP_TYPE() string {
	if o == nil || o.AUTH_LDAP_GROUP_TYPE == nil {
		var ret string
		return ret
	}
	return *o.AUTH_LDAP_GROUP_TYPE
}

// GetAUTH_LDAP_GROUP_TYPEOk returns a tuple with the AUTH_LDAP_GROUP_TYPE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTH_LDAP_GROUP_TYPEOk() (*string, bool) {
	if o == nil || o.AUTH_LDAP_GROUP_TYPE == nil {
		return nil, false
	}
	return o.AUTH_LDAP_GROUP_TYPE, true
}

// HasAUTH_LDAP_GROUP_TYPE returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTH_LDAP_GROUP_TYPE() bool {
	if o != nil && o.AUTH_LDAP_GROUP_TYPE != nil {
		return true
	}

	return false
}

// SetAUTH_LDAP_GROUP_TYPE gets a reference to the given string and assigns it to the AUTH_LDAP_GROUP_TYPE field.
func (o *InlineObject60) SetAUTH_LDAP_GROUP_TYPE(v string) {
	o.AUTH_LDAP_GROUP_TYPE = &v
}

// GetAUTH_LDAP_GROUP_TYPE_PARAMS returns the AUTH_LDAP_GROUP_TYPE_PARAMS field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTH_LDAP_GROUP_TYPE_PARAMS() map[string]interface{} {
	if o == nil || o.AUTH_LDAP_GROUP_TYPE_PARAMS == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AUTH_LDAP_GROUP_TYPE_PARAMS
}

// GetAUTH_LDAP_GROUP_TYPE_PARAMSOk returns a tuple with the AUTH_LDAP_GROUP_TYPE_PARAMS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTH_LDAP_GROUP_TYPE_PARAMSOk() (*map[string]interface{}, bool) {
	if o == nil || o.AUTH_LDAP_GROUP_TYPE_PARAMS == nil {
		return nil, false
	}
	return o.AUTH_LDAP_GROUP_TYPE_PARAMS, true
}

// HasAUTH_LDAP_GROUP_TYPE_PARAMS returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTH_LDAP_GROUP_TYPE_PARAMS() bool {
	if o != nil && o.AUTH_LDAP_GROUP_TYPE_PARAMS != nil {
		return true
	}

	return false
}

// SetAUTH_LDAP_GROUP_TYPE_PARAMS gets a reference to the given map[string]interface{} and assigns it to the AUTH_LDAP_GROUP_TYPE_PARAMS field.
func (o *InlineObject60) SetAUTH_LDAP_GROUP_TYPE_PARAMS(v map[string]interface{}) {
	o.AUTH_LDAP_GROUP_TYPE_PARAMS = &v
}

// GetAUTH_LDAP_ORGANIZATION_MAP returns the AUTH_LDAP_ORGANIZATION_MAP field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTH_LDAP_ORGANIZATION_MAP() map[string]interface{} {
	if o == nil || o.AUTH_LDAP_ORGANIZATION_MAP == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AUTH_LDAP_ORGANIZATION_MAP
}

// GetAUTH_LDAP_ORGANIZATION_MAPOk returns a tuple with the AUTH_LDAP_ORGANIZATION_MAP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTH_LDAP_ORGANIZATION_MAPOk() (*map[string]interface{}, bool) {
	if o == nil || o.AUTH_LDAP_ORGANIZATION_MAP == nil {
		return nil, false
	}
	return o.AUTH_LDAP_ORGANIZATION_MAP, true
}

// HasAUTH_LDAP_ORGANIZATION_MAP returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTH_LDAP_ORGANIZATION_MAP() bool {
	if o != nil && o.AUTH_LDAP_ORGANIZATION_MAP != nil {
		return true
	}

	return false
}

// SetAUTH_LDAP_ORGANIZATION_MAP gets a reference to the given map[string]interface{} and assigns it to the AUTH_LDAP_ORGANIZATION_MAP field.
func (o *InlineObject60) SetAUTH_LDAP_ORGANIZATION_MAP(v map[string]interface{}) {
	o.AUTH_LDAP_ORGANIZATION_MAP = &v
}

// GetAUTH_LDAP_REQUIRE_GROUP returns the AUTH_LDAP_REQUIRE_GROUP field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTH_LDAP_REQUIRE_GROUP() string {
	if o == nil || o.AUTH_LDAP_REQUIRE_GROUP == nil {
		var ret string
		return ret
	}
	return *o.AUTH_LDAP_REQUIRE_GROUP
}

// GetAUTH_LDAP_REQUIRE_GROUPOk returns a tuple with the AUTH_LDAP_REQUIRE_GROUP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTH_LDAP_REQUIRE_GROUPOk() (*string, bool) {
	if o == nil || o.AUTH_LDAP_REQUIRE_GROUP == nil {
		return nil, false
	}
	return o.AUTH_LDAP_REQUIRE_GROUP, true
}

// HasAUTH_LDAP_REQUIRE_GROUP returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTH_LDAP_REQUIRE_GROUP() bool {
	if o != nil && o.AUTH_LDAP_REQUIRE_GROUP != nil {
		return true
	}

	return false
}

// SetAUTH_LDAP_REQUIRE_GROUP gets a reference to the given string and assigns it to the AUTH_LDAP_REQUIRE_GROUP field.
func (o *InlineObject60) SetAUTH_LDAP_REQUIRE_GROUP(v string) {
	o.AUTH_LDAP_REQUIRE_GROUP = &v
}

// GetAUTH_LDAP_SERVER_URI returns the AUTH_LDAP_SERVER_URI field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTH_LDAP_SERVER_URI() string {
	if o == nil || o.AUTH_LDAP_SERVER_URI == nil {
		var ret string
		return ret
	}
	return *o.AUTH_LDAP_SERVER_URI
}

// GetAUTH_LDAP_SERVER_URIOk returns a tuple with the AUTH_LDAP_SERVER_URI field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTH_LDAP_SERVER_URIOk() (*string, bool) {
	if o == nil || o.AUTH_LDAP_SERVER_URI == nil {
		return nil, false
	}
	return o.AUTH_LDAP_SERVER_URI, true
}

// HasAUTH_LDAP_SERVER_URI returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTH_LDAP_SERVER_URI() bool {
	if o != nil && o.AUTH_LDAP_SERVER_URI != nil {
		return true
	}

	return false
}

// SetAUTH_LDAP_SERVER_URI gets a reference to the given string and assigns it to the AUTH_LDAP_SERVER_URI field.
func (o *InlineObject60) SetAUTH_LDAP_SERVER_URI(v string) {
	o.AUTH_LDAP_SERVER_URI = &v
}

// GetAUTH_LDAP_START_TLS returns the AUTH_LDAP_START_TLS field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTH_LDAP_START_TLS() bool {
	if o == nil || o.AUTH_LDAP_START_TLS == nil {
		var ret bool
		return ret
	}
	return *o.AUTH_LDAP_START_TLS
}

// GetAUTH_LDAP_START_TLSOk returns a tuple with the AUTH_LDAP_START_TLS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTH_LDAP_START_TLSOk() (*bool, bool) {
	if o == nil || o.AUTH_LDAP_START_TLS == nil {
		return nil, false
	}
	return o.AUTH_LDAP_START_TLS, true
}

// HasAUTH_LDAP_START_TLS returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTH_LDAP_START_TLS() bool {
	if o != nil && o.AUTH_LDAP_START_TLS != nil {
		return true
	}

	return false
}

// SetAUTH_LDAP_START_TLS gets a reference to the given bool and assigns it to the AUTH_LDAP_START_TLS field.
func (o *InlineObject60) SetAUTH_LDAP_START_TLS(v bool) {
	o.AUTH_LDAP_START_TLS = &v
}

// GetAUTH_LDAP_TEAM_MAP returns the AUTH_LDAP_TEAM_MAP field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTH_LDAP_TEAM_MAP() map[string]interface{} {
	if o == nil || o.AUTH_LDAP_TEAM_MAP == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AUTH_LDAP_TEAM_MAP
}

// GetAUTH_LDAP_TEAM_MAPOk returns a tuple with the AUTH_LDAP_TEAM_MAP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTH_LDAP_TEAM_MAPOk() (*map[string]interface{}, bool) {
	if o == nil || o.AUTH_LDAP_TEAM_MAP == nil {
		return nil, false
	}
	return o.AUTH_LDAP_TEAM_MAP, true
}

// HasAUTH_LDAP_TEAM_MAP returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTH_LDAP_TEAM_MAP() bool {
	if o != nil && o.AUTH_LDAP_TEAM_MAP != nil {
		return true
	}

	return false
}

// SetAUTH_LDAP_TEAM_MAP gets a reference to the given map[string]interface{} and assigns it to the AUTH_LDAP_TEAM_MAP field.
func (o *InlineObject60) SetAUTH_LDAP_TEAM_MAP(v map[string]interface{}) {
	o.AUTH_LDAP_TEAM_MAP = &v
}

// GetAUTH_LDAP_USER_ATTR_MAP returns the AUTH_LDAP_USER_ATTR_MAP field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTH_LDAP_USER_ATTR_MAP() map[string]interface{} {
	if o == nil || o.AUTH_LDAP_USER_ATTR_MAP == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AUTH_LDAP_USER_ATTR_MAP
}

// GetAUTH_LDAP_USER_ATTR_MAPOk returns a tuple with the AUTH_LDAP_USER_ATTR_MAP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTH_LDAP_USER_ATTR_MAPOk() (*map[string]interface{}, bool) {
	if o == nil || o.AUTH_LDAP_USER_ATTR_MAP == nil {
		return nil, false
	}
	return o.AUTH_LDAP_USER_ATTR_MAP, true
}

// HasAUTH_LDAP_USER_ATTR_MAP returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTH_LDAP_USER_ATTR_MAP() bool {
	if o != nil && o.AUTH_LDAP_USER_ATTR_MAP != nil {
		return true
	}

	return false
}

// SetAUTH_LDAP_USER_ATTR_MAP gets a reference to the given map[string]interface{} and assigns it to the AUTH_LDAP_USER_ATTR_MAP field.
func (o *InlineObject60) SetAUTH_LDAP_USER_ATTR_MAP(v map[string]interface{}) {
	o.AUTH_LDAP_USER_ATTR_MAP = &v
}

// GetAUTH_LDAP_USER_DN_TEMPLATE returns the AUTH_LDAP_USER_DN_TEMPLATE field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTH_LDAP_USER_DN_TEMPLATE() string {
	if o == nil || o.AUTH_LDAP_USER_DN_TEMPLATE == nil {
		var ret string
		return ret
	}
	return *o.AUTH_LDAP_USER_DN_TEMPLATE
}

// GetAUTH_LDAP_USER_DN_TEMPLATEOk returns a tuple with the AUTH_LDAP_USER_DN_TEMPLATE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTH_LDAP_USER_DN_TEMPLATEOk() (*string, bool) {
	if o == nil || o.AUTH_LDAP_USER_DN_TEMPLATE == nil {
		return nil, false
	}
	return o.AUTH_LDAP_USER_DN_TEMPLATE, true
}

// HasAUTH_LDAP_USER_DN_TEMPLATE returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTH_LDAP_USER_DN_TEMPLATE() bool {
	if o != nil && o.AUTH_LDAP_USER_DN_TEMPLATE != nil {
		return true
	}

	return false
}

// SetAUTH_LDAP_USER_DN_TEMPLATE gets a reference to the given string and assigns it to the AUTH_LDAP_USER_DN_TEMPLATE field.
func (o *InlineObject60) SetAUTH_LDAP_USER_DN_TEMPLATE(v string) {
	o.AUTH_LDAP_USER_DN_TEMPLATE = &v
}

// GetAUTH_LDAP_USER_FLAGS_BY_GROUP returns the AUTH_LDAP_USER_FLAGS_BY_GROUP field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTH_LDAP_USER_FLAGS_BY_GROUP() map[string]interface{} {
	if o == nil || o.AUTH_LDAP_USER_FLAGS_BY_GROUP == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AUTH_LDAP_USER_FLAGS_BY_GROUP
}

// GetAUTH_LDAP_USER_FLAGS_BY_GROUPOk returns a tuple with the AUTH_LDAP_USER_FLAGS_BY_GROUP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTH_LDAP_USER_FLAGS_BY_GROUPOk() (*map[string]interface{}, bool) {
	if o == nil || o.AUTH_LDAP_USER_FLAGS_BY_GROUP == nil {
		return nil, false
	}
	return o.AUTH_LDAP_USER_FLAGS_BY_GROUP, true
}

// HasAUTH_LDAP_USER_FLAGS_BY_GROUP returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTH_LDAP_USER_FLAGS_BY_GROUP() bool {
	if o != nil && o.AUTH_LDAP_USER_FLAGS_BY_GROUP != nil {
		return true
	}

	return false
}

// SetAUTH_LDAP_USER_FLAGS_BY_GROUP gets a reference to the given map[string]interface{} and assigns it to the AUTH_LDAP_USER_FLAGS_BY_GROUP field.
func (o *InlineObject60) SetAUTH_LDAP_USER_FLAGS_BY_GROUP(v map[string]interface{}) {
	o.AUTH_LDAP_USER_FLAGS_BY_GROUP = &v
}

// GetAUTH_LDAP_USER_SEARCH returns the AUTH_LDAP_USER_SEARCH field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTH_LDAP_USER_SEARCH() []string {
	if o == nil || o.AUTH_LDAP_USER_SEARCH == nil {
		var ret []string
		return ret
	}
	return *o.AUTH_LDAP_USER_SEARCH
}

// GetAUTH_LDAP_USER_SEARCHOk returns a tuple with the AUTH_LDAP_USER_SEARCH field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTH_LDAP_USER_SEARCHOk() (*[]string, bool) {
	if o == nil || o.AUTH_LDAP_USER_SEARCH == nil {
		return nil, false
	}
	return o.AUTH_LDAP_USER_SEARCH, true
}

// HasAUTH_LDAP_USER_SEARCH returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTH_LDAP_USER_SEARCH() bool {
	if o != nil && o.AUTH_LDAP_USER_SEARCH != nil {
		return true
	}

	return false
}

// SetAUTH_LDAP_USER_SEARCH gets a reference to the given []string and assigns it to the AUTH_LDAP_USER_SEARCH field.
func (o *InlineObject60) SetAUTH_LDAP_USER_SEARCH(v []string) {
	o.AUTH_LDAP_USER_SEARCH = &v
}

// GetAUTOMATION_ANALYTICS_GATHER_INTERVAL returns the AUTOMATION_ANALYTICS_GATHER_INTERVAL field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTOMATION_ANALYTICS_GATHER_INTERVAL() int32 {
	if o == nil || o.AUTOMATION_ANALYTICS_GATHER_INTERVAL == nil {
		var ret int32
		return ret
	}
	return *o.AUTOMATION_ANALYTICS_GATHER_INTERVAL
}

// GetAUTOMATION_ANALYTICS_GATHER_INTERVALOk returns a tuple with the AUTOMATION_ANALYTICS_GATHER_INTERVAL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTOMATION_ANALYTICS_GATHER_INTERVALOk() (*int32, bool) {
	if o == nil || o.AUTOMATION_ANALYTICS_GATHER_INTERVAL == nil {
		return nil, false
	}
	return o.AUTOMATION_ANALYTICS_GATHER_INTERVAL, true
}

// HasAUTOMATION_ANALYTICS_GATHER_INTERVAL returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTOMATION_ANALYTICS_GATHER_INTERVAL() bool {
	if o != nil && o.AUTOMATION_ANALYTICS_GATHER_INTERVAL != nil {
		return true
	}

	return false
}

// SetAUTOMATION_ANALYTICS_GATHER_INTERVAL gets a reference to the given int32 and assigns it to the AUTOMATION_ANALYTICS_GATHER_INTERVAL field.
func (o *InlineObject60) SetAUTOMATION_ANALYTICS_GATHER_INTERVAL(v int32) {
	o.AUTOMATION_ANALYTICS_GATHER_INTERVAL = &v
}

// GetAUTOMATION_ANALYTICS_LAST_GATHER returns the AUTOMATION_ANALYTICS_LAST_GATHER field value
func (o *InlineObject60) GetAUTOMATION_ANALYTICS_LAST_GATHER() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.AUTOMATION_ANALYTICS_LAST_GATHER
}

// GetAUTOMATION_ANALYTICS_LAST_GATHEROk returns a tuple with the AUTOMATION_ANALYTICS_LAST_GATHER field value
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTOMATION_ANALYTICS_LAST_GATHEROk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AUTOMATION_ANALYTICS_LAST_GATHER, true
}

// SetAUTOMATION_ANALYTICS_LAST_GATHER sets field value
func (o *InlineObject60) SetAUTOMATION_ANALYTICS_LAST_GATHER(v string) {
	o.AUTOMATION_ANALYTICS_LAST_GATHER = v
}

// GetAUTOMATION_ANALYTICS_URL returns the AUTOMATION_ANALYTICS_URL field value if set, zero value otherwise.
func (o *InlineObject60) GetAUTOMATION_ANALYTICS_URL() string {
	if o == nil || o.AUTOMATION_ANALYTICS_URL == nil {
		var ret string
		return ret
	}
	return *o.AUTOMATION_ANALYTICS_URL
}

// GetAUTOMATION_ANALYTICS_URLOk returns a tuple with the AUTOMATION_ANALYTICS_URL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAUTOMATION_ANALYTICS_URLOk() (*string, bool) {
	if o == nil || o.AUTOMATION_ANALYTICS_URL == nil {
		return nil, false
	}
	return o.AUTOMATION_ANALYTICS_URL, true
}

// HasAUTOMATION_ANALYTICS_URL returns a boolean if a field has been set.
func (o *InlineObject60) HasAUTOMATION_ANALYTICS_URL() bool {
	if o != nil && o.AUTOMATION_ANALYTICS_URL != nil {
		return true
	}

	return false
}

// SetAUTOMATION_ANALYTICS_URL gets a reference to the given string and assigns it to the AUTOMATION_ANALYTICS_URL field.
func (o *InlineObject60) SetAUTOMATION_ANALYTICS_URL(v string) {
	o.AUTOMATION_ANALYTICS_URL = &v
}

// GetAWX_ANSIBLE_CALLBACK_PLUGINS returns the AWX_ANSIBLE_CALLBACK_PLUGINS field value if set, zero value otherwise.
func (o *InlineObject60) GetAWX_ANSIBLE_CALLBACK_PLUGINS() []string {
	if o == nil || o.AWX_ANSIBLE_CALLBACK_PLUGINS == nil {
		var ret []string
		return ret
	}
	return *o.AWX_ANSIBLE_CALLBACK_PLUGINS
}

// GetAWX_ANSIBLE_CALLBACK_PLUGINSOk returns a tuple with the AWX_ANSIBLE_CALLBACK_PLUGINS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAWX_ANSIBLE_CALLBACK_PLUGINSOk() (*[]string, bool) {
	if o == nil || o.AWX_ANSIBLE_CALLBACK_PLUGINS == nil {
		return nil, false
	}
	return o.AWX_ANSIBLE_CALLBACK_PLUGINS, true
}

// HasAWX_ANSIBLE_CALLBACK_PLUGINS returns a boolean if a field has been set.
func (o *InlineObject60) HasAWX_ANSIBLE_CALLBACK_PLUGINS() bool {
	if o != nil && o.AWX_ANSIBLE_CALLBACK_PLUGINS != nil {
		return true
	}

	return false
}

// SetAWX_ANSIBLE_CALLBACK_PLUGINS gets a reference to the given []string and assigns it to the AWX_ANSIBLE_CALLBACK_PLUGINS field.
func (o *InlineObject60) SetAWX_ANSIBLE_CALLBACK_PLUGINS(v []string) {
	o.AWX_ANSIBLE_CALLBACK_PLUGINS = &v
}

// GetAWX_COLLECTIONS_ENABLED returns the AWX_COLLECTIONS_ENABLED field value if set, zero value otherwise.
func (o *InlineObject60) GetAWX_COLLECTIONS_ENABLED() bool {
	if o == nil || o.AWX_COLLECTIONS_ENABLED == nil {
		var ret bool
		return ret
	}
	return *o.AWX_COLLECTIONS_ENABLED
}

// GetAWX_COLLECTIONS_ENABLEDOk returns a tuple with the AWX_COLLECTIONS_ENABLED field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAWX_COLLECTIONS_ENABLEDOk() (*bool, bool) {
	if o == nil || o.AWX_COLLECTIONS_ENABLED == nil {
		return nil, false
	}
	return o.AWX_COLLECTIONS_ENABLED, true
}

// HasAWX_COLLECTIONS_ENABLED returns a boolean if a field has been set.
func (o *InlineObject60) HasAWX_COLLECTIONS_ENABLED() bool {
	if o != nil && o.AWX_COLLECTIONS_ENABLED != nil {
		return true
	}

	return false
}

// SetAWX_COLLECTIONS_ENABLED gets a reference to the given bool and assigns it to the AWX_COLLECTIONS_ENABLED field.
func (o *InlineObject60) SetAWX_COLLECTIONS_ENABLED(v bool) {
	o.AWX_COLLECTIONS_ENABLED = &v
}

// GetAWX_ISOLATED_CHECK_INTERVAL returns the AWX_ISOLATED_CHECK_INTERVAL field value
func (o *InlineObject60) GetAWX_ISOLATED_CHECK_INTERVAL() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.AWX_ISOLATED_CHECK_INTERVAL
}

// GetAWX_ISOLATED_CHECK_INTERVALOk returns a tuple with the AWX_ISOLATED_CHECK_INTERVAL field value
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAWX_ISOLATED_CHECK_INTERVALOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AWX_ISOLATED_CHECK_INTERVAL, true
}

// SetAWX_ISOLATED_CHECK_INTERVAL sets field value
func (o *InlineObject60) SetAWX_ISOLATED_CHECK_INTERVAL(v int32) {
	o.AWX_ISOLATED_CHECK_INTERVAL = v
}

// GetAWX_ISOLATED_CONNECTION_TIMEOUT returns the AWX_ISOLATED_CONNECTION_TIMEOUT field value if set, zero value otherwise.
func (o *InlineObject60) GetAWX_ISOLATED_CONNECTION_TIMEOUT() int32 {
	if o == nil || o.AWX_ISOLATED_CONNECTION_TIMEOUT == nil {
		var ret int32
		return ret
	}
	return *o.AWX_ISOLATED_CONNECTION_TIMEOUT
}

// GetAWX_ISOLATED_CONNECTION_TIMEOUTOk returns a tuple with the AWX_ISOLATED_CONNECTION_TIMEOUT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAWX_ISOLATED_CONNECTION_TIMEOUTOk() (*int32, bool) {
	if o == nil || o.AWX_ISOLATED_CONNECTION_TIMEOUT == nil {
		return nil, false
	}
	return o.AWX_ISOLATED_CONNECTION_TIMEOUT, true
}

// HasAWX_ISOLATED_CONNECTION_TIMEOUT returns a boolean if a field has been set.
func (o *InlineObject60) HasAWX_ISOLATED_CONNECTION_TIMEOUT() bool {
	if o != nil && o.AWX_ISOLATED_CONNECTION_TIMEOUT != nil {
		return true
	}

	return false
}

// SetAWX_ISOLATED_CONNECTION_TIMEOUT gets a reference to the given int32 and assigns it to the AWX_ISOLATED_CONNECTION_TIMEOUT field.
func (o *InlineObject60) SetAWX_ISOLATED_CONNECTION_TIMEOUT(v int32) {
	o.AWX_ISOLATED_CONNECTION_TIMEOUT = &v
}

// GetAWX_ISOLATED_HOST_KEY_CHECKING returns the AWX_ISOLATED_HOST_KEY_CHECKING field value if set, zero value otherwise.
func (o *InlineObject60) GetAWX_ISOLATED_HOST_KEY_CHECKING() bool {
	if o == nil || o.AWX_ISOLATED_HOST_KEY_CHECKING == nil {
		var ret bool
		return ret
	}
	return *o.AWX_ISOLATED_HOST_KEY_CHECKING
}

// GetAWX_ISOLATED_HOST_KEY_CHECKINGOk returns a tuple with the AWX_ISOLATED_HOST_KEY_CHECKING field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAWX_ISOLATED_HOST_KEY_CHECKINGOk() (*bool, bool) {
	if o == nil || o.AWX_ISOLATED_HOST_KEY_CHECKING == nil {
		return nil, false
	}
	return o.AWX_ISOLATED_HOST_KEY_CHECKING, true
}

// HasAWX_ISOLATED_HOST_KEY_CHECKING returns a boolean if a field has been set.
func (o *InlineObject60) HasAWX_ISOLATED_HOST_KEY_CHECKING() bool {
	if o != nil && o.AWX_ISOLATED_HOST_KEY_CHECKING != nil {
		return true
	}

	return false
}

// SetAWX_ISOLATED_HOST_KEY_CHECKING gets a reference to the given bool and assigns it to the AWX_ISOLATED_HOST_KEY_CHECKING field.
func (o *InlineObject60) SetAWX_ISOLATED_HOST_KEY_CHECKING(v bool) {
	o.AWX_ISOLATED_HOST_KEY_CHECKING = &v
}

// GetAWX_ISOLATED_LAUNCH_TIMEOUT returns the AWX_ISOLATED_LAUNCH_TIMEOUT field value
func (o *InlineObject60) GetAWX_ISOLATED_LAUNCH_TIMEOUT() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.AWX_ISOLATED_LAUNCH_TIMEOUT
}

// GetAWX_ISOLATED_LAUNCH_TIMEOUTOk returns a tuple with the AWX_ISOLATED_LAUNCH_TIMEOUT field value
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAWX_ISOLATED_LAUNCH_TIMEOUTOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AWX_ISOLATED_LAUNCH_TIMEOUT, true
}

// SetAWX_ISOLATED_LAUNCH_TIMEOUT sets field value
func (o *InlineObject60) SetAWX_ISOLATED_LAUNCH_TIMEOUT(v int32) {
	o.AWX_ISOLATED_LAUNCH_TIMEOUT = v
}

// GetAWX_PROOT_BASE_PATH returns the AWX_PROOT_BASE_PATH field value
func (o *InlineObject60) GetAWX_PROOT_BASE_PATH() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.AWX_PROOT_BASE_PATH
}

// GetAWX_PROOT_BASE_PATHOk returns a tuple with the AWX_PROOT_BASE_PATH field value
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAWX_PROOT_BASE_PATHOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AWX_PROOT_BASE_PATH, true
}

// SetAWX_PROOT_BASE_PATH sets field value
func (o *InlineObject60) SetAWX_PROOT_BASE_PATH(v string) {
	o.AWX_PROOT_BASE_PATH = v
}

// GetAWX_PROOT_ENABLED returns the AWX_PROOT_ENABLED field value
func (o *InlineObject60) GetAWX_PROOT_ENABLED() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.AWX_PROOT_ENABLED
}

// GetAWX_PROOT_ENABLEDOk returns a tuple with the AWX_PROOT_ENABLED field value
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAWX_PROOT_ENABLEDOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.AWX_PROOT_ENABLED, true
}

// SetAWX_PROOT_ENABLED sets field value
func (o *InlineObject60) SetAWX_PROOT_ENABLED(v bool) {
	o.AWX_PROOT_ENABLED = v
}

// GetAWX_PROOT_HIDE_PATHS returns the AWX_PROOT_HIDE_PATHS field value if set, zero value otherwise.
func (o *InlineObject60) GetAWX_PROOT_HIDE_PATHS() []string {
	if o == nil || o.AWX_PROOT_HIDE_PATHS == nil {
		var ret []string
		return ret
	}
	return *o.AWX_PROOT_HIDE_PATHS
}

// GetAWX_PROOT_HIDE_PATHSOk returns a tuple with the AWX_PROOT_HIDE_PATHS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAWX_PROOT_HIDE_PATHSOk() (*[]string, bool) {
	if o == nil || o.AWX_PROOT_HIDE_PATHS == nil {
		return nil, false
	}
	return o.AWX_PROOT_HIDE_PATHS, true
}

// HasAWX_PROOT_HIDE_PATHS returns a boolean if a field has been set.
func (o *InlineObject60) HasAWX_PROOT_HIDE_PATHS() bool {
	if o != nil && o.AWX_PROOT_HIDE_PATHS != nil {
		return true
	}

	return false
}

// SetAWX_PROOT_HIDE_PATHS gets a reference to the given []string and assigns it to the AWX_PROOT_HIDE_PATHS field.
func (o *InlineObject60) SetAWX_PROOT_HIDE_PATHS(v []string) {
	o.AWX_PROOT_HIDE_PATHS = &v
}

// GetAWX_PROOT_SHOW_PATHS returns the AWX_PROOT_SHOW_PATHS field value if set, zero value otherwise.
func (o *InlineObject60) GetAWX_PROOT_SHOW_PATHS() []string {
	if o == nil || o.AWX_PROOT_SHOW_PATHS == nil {
		var ret []string
		return ret
	}
	return *o.AWX_PROOT_SHOW_PATHS
}

// GetAWX_PROOT_SHOW_PATHSOk returns a tuple with the AWX_PROOT_SHOW_PATHS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAWX_PROOT_SHOW_PATHSOk() (*[]string, bool) {
	if o == nil || o.AWX_PROOT_SHOW_PATHS == nil {
		return nil, false
	}
	return o.AWX_PROOT_SHOW_PATHS, true
}

// HasAWX_PROOT_SHOW_PATHS returns a boolean if a field has been set.
func (o *InlineObject60) HasAWX_PROOT_SHOW_PATHS() bool {
	if o != nil && o.AWX_PROOT_SHOW_PATHS != nil {
		return true
	}

	return false
}

// SetAWX_PROOT_SHOW_PATHS gets a reference to the given []string and assigns it to the AWX_PROOT_SHOW_PATHS field.
func (o *InlineObject60) SetAWX_PROOT_SHOW_PATHS(v []string) {
	o.AWX_PROOT_SHOW_PATHS = &v
}

// GetAWX_RESOURCE_PROFILING_CPU_POLL_INTERVAL returns the AWX_RESOURCE_PROFILING_CPU_POLL_INTERVAL field value if set, zero value otherwise.
func (o *InlineObject60) GetAWX_RESOURCE_PROFILING_CPU_POLL_INTERVAL() float32 {
	if o == nil || o.AWX_RESOURCE_PROFILING_CPU_POLL_INTERVAL == nil {
		var ret float32
		return ret
	}
	return *o.AWX_RESOURCE_PROFILING_CPU_POLL_INTERVAL
}

// GetAWX_RESOURCE_PROFILING_CPU_POLL_INTERVALOk returns a tuple with the AWX_RESOURCE_PROFILING_CPU_POLL_INTERVAL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAWX_RESOURCE_PROFILING_CPU_POLL_INTERVALOk() (*float32, bool) {
	if o == nil || o.AWX_RESOURCE_PROFILING_CPU_POLL_INTERVAL == nil {
		return nil, false
	}
	return o.AWX_RESOURCE_PROFILING_CPU_POLL_INTERVAL, true
}

// HasAWX_RESOURCE_PROFILING_CPU_POLL_INTERVAL returns a boolean if a field has been set.
func (o *InlineObject60) HasAWX_RESOURCE_PROFILING_CPU_POLL_INTERVAL() bool {
	if o != nil && o.AWX_RESOURCE_PROFILING_CPU_POLL_INTERVAL != nil {
		return true
	}

	return false
}

// SetAWX_RESOURCE_PROFILING_CPU_POLL_INTERVAL gets a reference to the given float32 and assigns it to the AWX_RESOURCE_PROFILING_CPU_POLL_INTERVAL field.
func (o *InlineObject60) SetAWX_RESOURCE_PROFILING_CPU_POLL_INTERVAL(v float32) {
	o.AWX_RESOURCE_PROFILING_CPU_POLL_INTERVAL = &v
}

// GetAWX_RESOURCE_PROFILING_ENABLED returns the AWX_RESOURCE_PROFILING_ENABLED field value if set, zero value otherwise.
func (o *InlineObject60) GetAWX_RESOURCE_PROFILING_ENABLED() bool {
	if o == nil || o.AWX_RESOURCE_PROFILING_ENABLED == nil {
		var ret bool
		return ret
	}
	return *o.AWX_RESOURCE_PROFILING_ENABLED
}

// GetAWX_RESOURCE_PROFILING_ENABLEDOk returns a tuple with the AWX_RESOURCE_PROFILING_ENABLED field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAWX_RESOURCE_PROFILING_ENABLEDOk() (*bool, bool) {
	if o == nil || o.AWX_RESOURCE_PROFILING_ENABLED == nil {
		return nil, false
	}
	return o.AWX_RESOURCE_PROFILING_ENABLED, true
}

// HasAWX_RESOURCE_PROFILING_ENABLED returns a boolean if a field has been set.
func (o *InlineObject60) HasAWX_RESOURCE_PROFILING_ENABLED() bool {
	if o != nil && o.AWX_RESOURCE_PROFILING_ENABLED != nil {
		return true
	}

	return false
}

// SetAWX_RESOURCE_PROFILING_ENABLED gets a reference to the given bool and assigns it to the AWX_RESOURCE_PROFILING_ENABLED field.
func (o *InlineObject60) SetAWX_RESOURCE_PROFILING_ENABLED(v bool) {
	o.AWX_RESOURCE_PROFILING_ENABLED = &v
}

// GetAWX_RESOURCE_PROFILING_MEMORY_POLL_INTERVAL returns the AWX_RESOURCE_PROFILING_MEMORY_POLL_INTERVAL field value if set, zero value otherwise.
func (o *InlineObject60) GetAWX_RESOURCE_PROFILING_MEMORY_POLL_INTERVAL() float32 {
	if o == nil || o.AWX_RESOURCE_PROFILING_MEMORY_POLL_INTERVAL == nil {
		var ret float32
		return ret
	}
	return *o.AWX_RESOURCE_PROFILING_MEMORY_POLL_INTERVAL
}

// GetAWX_RESOURCE_PROFILING_MEMORY_POLL_INTERVALOk returns a tuple with the AWX_RESOURCE_PROFILING_MEMORY_POLL_INTERVAL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAWX_RESOURCE_PROFILING_MEMORY_POLL_INTERVALOk() (*float32, bool) {
	if o == nil || o.AWX_RESOURCE_PROFILING_MEMORY_POLL_INTERVAL == nil {
		return nil, false
	}
	return o.AWX_RESOURCE_PROFILING_MEMORY_POLL_INTERVAL, true
}

// HasAWX_RESOURCE_PROFILING_MEMORY_POLL_INTERVAL returns a boolean if a field has been set.
func (o *InlineObject60) HasAWX_RESOURCE_PROFILING_MEMORY_POLL_INTERVAL() bool {
	if o != nil && o.AWX_RESOURCE_PROFILING_MEMORY_POLL_INTERVAL != nil {
		return true
	}

	return false
}

// SetAWX_RESOURCE_PROFILING_MEMORY_POLL_INTERVAL gets a reference to the given float32 and assigns it to the AWX_RESOURCE_PROFILING_MEMORY_POLL_INTERVAL field.
func (o *InlineObject60) SetAWX_RESOURCE_PROFILING_MEMORY_POLL_INTERVAL(v float32) {
	o.AWX_RESOURCE_PROFILING_MEMORY_POLL_INTERVAL = &v
}

// GetAWX_RESOURCE_PROFILING_PID_POLL_INTERVAL returns the AWX_RESOURCE_PROFILING_PID_POLL_INTERVAL field value if set, zero value otherwise.
func (o *InlineObject60) GetAWX_RESOURCE_PROFILING_PID_POLL_INTERVAL() float32 {
	if o == nil || o.AWX_RESOURCE_PROFILING_PID_POLL_INTERVAL == nil {
		var ret float32
		return ret
	}
	return *o.AWX_RESOURCE_PROFILING_PID_POLL_INTERVAL
}

// GetAWX_RESOURCE_PROFILING_PID_POLL_INTERVALOk returns a tuple with the AWX_RESOURCE_PROFILING_PID_POLL_INTERVAL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAWX_RESOURCE_PROFILING_PID_POLL_INTERVALOk() (*float32, bool) {
	if o == nil || o.AWX_RESOURCE_PROFILING_PID_POLL_INTERVAL == nil {
		return nil, false
	}
	return o.AWX_RESOURCE_PROFILING_PID_POLL_INTERVAL, true
}

// HasAWX_RESOURCE_PROFILING_PID_POLL_INTERVAL returns a boolean if a field has been set.
func (o *InlineObject60) HasAWX_RESOURCE_PROFILING_PID_POLL_INTERVAL() bool {
	if o != nil && o.AWX_RESOURCE_PROFILING_PID_POLL_INTERVAL != nil {
		return true
	}

	return false
}

// SetAWX_RESOURCE_PROFILING_PID_POLL_INTERVAL gets a reference to the given float32 and assigns it to the AWX_RESOURCE_PROFILING_PID_POLL_INTERVAL field.
func (o *InlineObject60) SetAWX_RESOURCE_PROFILING_PID_POLL_INTERVAL(v float32) {
	o.AWX_RESOURCE_PROFILING_PID_POLL_INTERVAL = &v
}

// GetAWX_ROLES_ENABLED returns the AWX_ROLES_ENABLED field value if set, zero value otherwise.
func (o *InlineObject60) GetAWX_ROLES_ENABLED() bool {
	if o == nil || o.AWX_ROLES_ENABLED == nil {
		var ret bool
		return ret
	}
	return *o.AWX_ROLES_ENABLED
}

// GetAWX_ROLES_ENABLEDOk returns a tuple with the AWX_ROLES_ENABLED field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAWX_ROLES_ENABLEDOk() (*bool, bool) {
	if o == nil || o.AWX_ROLES_ENABLED == nil {
		return nil, false
	}
	return o.AWX_ROLES_ENABLED, true
}

// HasAWX_ROLES_ENABLED returns a boolean if a field has been set.
func (o *InlineObject60) HasAWX_ROLES_ENABLED() bool {
	if o != nil && o.AWX_ROLES_ENABLED != nil {
		return true
	}

	return false
}

// SetAWX_ROLES_ENABLED gets a reference to the given bool and assigns it to the AWX_ROLES_ENABLED field.
func (o *InlineObject60) SetAWX_ROLES_ENABLED(v bool) {
	o.AWX_ROLES_ENABLED = &v
}

// GetAWX_SHOW_PLAYBOOK_LINKS returns the AWX_SHOW_PLAYBOOK_LINKS field value if set, zero value otherwise.
func (o *InlineObject60) GetAWX_SHOW_PLAYBOOK_LINKS() bool {
	if o == nil || o.AWX_SHOW_PLAYBOOK_LINKS == nil {
		var ret bool
		return ret
	}
	return *o.AWX_SHOW_PLAYBOOK_LINKS
}

// GetAWX_SHOW_PLAYBOOK_LINKSOk returns a tuple with the AWX_SHOW_PLAYBOOK_LINKS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAWX_SHOW_PLAYBOOK_LINKSOk() (*bool, bool) {
	if o == nil || o.AWX_SHOW_PLAYBOOK_LINKS == nil {
		return nil, false
	}
	return o.AWX_SHOW_PLAYBOOK_LINKS, true
}

// HasAWX_SHOW_PLAYBOOK_LINKS returns a boolean if a field has been set.
func (o *InlineObject60) HasAWX_SHOW_PLAYBOOK_LINKS() bool {
	if o != nil && o.AWX_SHOW_PLAYBOOK_LINKS != nil {
		return true
	}

	return false
}

// SetAWX_SHOW_PLAYBOOK_LINKS gets a reference to the given bool and assigns it to the AWX_SHOW_PLAYBOOK_LINKS field.
func (o *InlineObject60) SetAWX_SHOW_PLAYBOOK_LINKS(v bool) {
	o.AWX_SHOW_PLAYBOOK_LINKS = &v
}

// GetAWX_TASK_ENV returns the AWX_TASK_ENV field value if set, zero value otherwise.
func (o *InlineObject60) GetAWX_TASK_ENV() map[string]interface{} {
	if o == nil || o.AWX_TASK_ENV == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.AWX_TASK_ENV
}

// GetAWX_TASK_ENVOk returns a tuple with the AWX_TASK_ENV field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetAWX_TASK_ENVOk() (*map[string]interface{}, bool) {
	if o == nil || o.AWX_TASK_ENV == nil {
		return nil, false
	}
	return o.AWX_TASK_ENV, true
}

// HasAWX_TASK_ENV returns a boolean if a field has been set.
func (o *InlineObject60) HasAWX_TASK_ENV() bool {
	if o != nil && o.AWX_TASK_ENV != nil {
		return true
	}

	return false
}

// SetAWX_TASK_ENV gets a reference to the given map[string]interface{} and assigns it to the AWX_TASK_ENV field.
func (o *InlineObject60) SetAWX_TASK_ENV(v map[string]interface{}) {
	o.AWX_TASK_ENV = &v
}

// GetCUSTOM_LOGIN_INFO returns the CUSTOM_LOGIN_INFO field value if set, zero value otherwise.
func (o *InlineObject60) GetCUSTOM_LOGIN_INFO() string {
	if o == nil || o.CUSTOM_LOGIN_INFO == nil {
		var ret string
		return ret
	}
	return *o.CUSTOM_LOGIN_INFO
}

// GetCUSTOM_LOGIN_INFOOk returns a tuple with the CUSTOM_LOGIN_INFO field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetCUSTOM_LOGIN_INFOOk() (*string, bool) {
	if o == nil || o.CUSTOM_LOGIN_INFO == nil {
		return nil, false
	}
	return o.CUSTOM_LOGIN_INFO, true
}

// HasCUSTOM_LOGIN_INFO returns a boolean if a field has been set.
func (o *InlineObject60) HasCUSTOM_LOGIN_INFO() bool {
	if o != nil && o.CUSTOM_LOGIN_INFO != nil {
		return true
	}

	return false
}

// SetCUSTOM_LOGIN_INFO gets a reference to the given string and assigns it to the CUSTOM_LOGIN_INFO field.
func (o *InlineObject60) SetCUSTOM_LOGIN_INFO(v string) {
	o.CUSTOM_LOGIN_INFO = &v
}

// GetCUSTOM_LOGO returns the CUSTOM_LOGO field value if set, zero value otherwise.
func (o *InlineObject60) GetCUSTOM_LOGO() string {
	if o == nil || o.CUSTOM_LOGO == nil {
		var ret string
		return ret
	}
	return *o.CUSTOM_LOGO
}

// GetCUSTOM_LOGOOk returns a tuple with the CUSTOM_LOGO field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetCUSTOM_LOGOOk() (*string, bool) {
	if o == nil || o.CUSTOM_LOGO == nil {
		return nil, false
	}
	return o.CUSTOM_LOGO, true
}

// HasCUSTOM_LOGO returns a boolean if a field has been set.
func (o *InlineObject60) HasCUSTOM_LOGO() bool {
	if o != nil && o.CUSTOM_LOGO != nil {
		return true
	}

	return false
}

// SetCUSTOM_LOGO gets a reference to the given string and assigns it to the CUSTOM_LOGO field.
func (o *InlineObject60) SetCUSTOM_LOGO(v string) {
	o.CUSTOM_LOGO = &v
}

// GetCUSTOM_VENV_PATHS returns the CUSTOM_VENV_PATHS field value if set, zero value otherwise.
func (o *InlineObject60) GetCUSTOM_VENV_PATHS() []string {
	if o == nil || o.CUSTOM_VENV_PATHS == nil {
		var ret []string
		return ret
	}
	return *o.CUSTOM_VENV_PATHS
}

// GetCUSTOM_VENV_PATHSOk returns a tuple with the CUSTOM_VENV_PATHS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetCUSTOM_VENV_PATHSOk() (*[]string, bool) {
	if o == nil || o.CUSTOM_VENV_PATHS == nil {
		return nil, false
	}
	return o.CUSTOM_VENV_PATHS, true
}

// HasCUSTOM_VENV_PATHS returns a boolean if a field has been set.
func (o *InlineObject60) HasCUSTOM_VENV_PATHS() bool {
	if o != nil && o.CUSTOM_VENV_PATHS != nil {
		return true
	}

	return false
}

// SetCUSTOM_VENV_PATHS gets a reference to the given []string and assigns it to the CUSTOM_VENV_PATHS field.
func (o *InlineObject60) SetCUSTOM_VENV_PATHS(v []string) {
	o.CUSTOM_VENV_PATHS = &v
}

// GetDEFAULT_INVENTORY_UPDATE_TIMEOUT returns the DEFAULT_INVENTORY_UPDATE_TIMEOUT field value if set, zero value otherwise.
func (o *InlineObject60) GetDEFAULT_INVENTORY_UPDATE_TIMEOUT() int32 {
	if o == nil || o.DEFAULT_INVENTORY_UPDATE_TIMEOUT == nil {
		var ret int32
		return ret
	}
	return *o.DEFAULT_INVENTORY_UPDATE_TIMEOUT
}

// GetDEFAULT_INVENTORY_UPDATE_TIMEOUTOk returns a tuple with the DEFAULT_INVENTORY_UPDATE_TIMEOUT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetDEFAULT_INVENTORY_UPDATE_TIMEOUTOk() (*int32, bool) {
	if o == nil || o.DEFAULT_INVENTORY_UPDATE_TIMEOUT == nil {
		return nil, false
	}
	return o.DEFAULT_INVENTORY_UPDATE_TIMEOUT, true
}

// HasDEFAULT_INVENTORY_UPDATE_TIMEOUT returns a boolean if a field has been set.
func (o *InlineObject60) HasDEFAULT_INVENTORY_UPDATE_TIMEOUT() bool {
	if o != nil && o.DEFAULT_INVENTORY_UPDATE_TIMEOUT != nil {
		return true
	}

	return false
}

// SetDEFAULT_INVENTORY_UPDATE_TIMEOUT gets a reference to the given int32 and assigns it to the DEFAULT_INVENTORY_UPDATE_TIMEOUT field.
func (o *InlineObject60) SetDEFAULT_INVENTORY_UPDATE_TIMEOUT(v int32) {
	o.DEFAULT_INVENTORY_UPDATE_TIMEOUT = &v
}

// GetDEFAULT_JOB_TIMEOUT returns the DEFAULT_JOB_TIMEOUT field value if set, zero value otherwise.
func (o *InlineObject60) GetDEFAULT_JOB_TIMEOUT() int32 {
	if o == nil || o.DEFAULT_JOB_TIMEOUT == nil {
		var ret int32
		return ret
	}
	return *o.DEFAULT_JOB_TIMEOUT
}

// GetDEFAULT_JOB_TIMEOUTOk returns a tuple with the DEFAULT_JOB_TIMEOUT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetDEFAULT_JOB_TIMEOUTOk() (*int32, bool) {
	if o == nil || o.DEFAULT_JOB_TIMEOUT == nil {
		return nil, false
	}
	return o.DEFAULT_JOB_TIMEOUT, true
}

// HasDEFAULT_JOB_TIMEOUT returns a boolean if a field has been set.
func (o *InlineObject60) HasDEFAULT_JOB_TIMEOUT() bool {
	if o != nil && o.DEFAULT_JOB_TIMEOUT != nil {
		return true
	}

	return false
}

// SetDEFAULT_JOB_TIMEOUT gets a reference to the given int32 and assigns it to the DEFAULT_JOB_TIMEOUT field.
func (o *InlineObject60) SetDEFAULT_JOB_TIMEOUT(v int32) {
	o.DEFAULT_JOB_TIMEOUT = &v
}

// GetDEFAULT_PROJECT_UPDATE_TIMEOUT returns the DEFAULT_PROJECT_UPDATE_TIMEOUT field value if set, zero value otherwise.
func (o *InlineObject60) GetDEFAULT_PROJECT_UPDATE_TIMEOUT() int32 {
	if o == nil || o.DEFAULT_PROJECT_UPDATE_TIMEOUT == nil {
		var ret int32
		return ret
	}
	return *o.DEFAULT_PROJECT_UPDATE_TIMEOUT
}

// GetDEFAULT_PROJECT_UPDATE_TIMEOUTOk returns a tuple with the DEFAULT_PROJECT_UPDATE_TIMEOUT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetDEFAULT_PROJECT_UPDATE_TIMEOUTOk() (*int32, bool) {
	if o == nil || o.DEFAULT_PROJECT_UPDATE_TIMEOUT == nil {
		return nil, false
	}
	return o.DEFAULT_PROJECT_UPDATE_TIMEOUT, true
}

// HasDEFAULT_PROJECT_UPDATE_TIMEOUT returns a boolean if a field has been set.
func (o *InlineObject60) HasDEFAULT_PROJECT_UPDATE_TIMEOUT() bool {
	if o != nil && o.DEFAULT_PROJECT_UPDATE_TIMEOUT != nil {
		return true
	}

	return false
}

// SetDEFAULT_PROJECT_UPDATE_TIMEOUT gets a reference to the given int32 and assigns it to the DEFAULT_PROJECT_UPDATE_TIMEOUT field.
func (o *InlineObject60) SetDEFAULT_PROJECT_UPDATE_TIMEOUT(v int32) {
	o.DEFAULT_PROJECT_UPDATE_TIMEOUT = &v
}

// GetEVENT_STDOUT_MAX_BYTES_DISPLAY returns the EVENT_STDOUT_MAX_BYTES_DISPLAY field value
func (o *InlineObject60) GetEVENT_STDOUT_MAX_BYTES_DISPLAY() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.EVENT_STDOUT_MAX_BYTES_DISPLAY
}

// GetEVENT_STDOUT_MAX_BYTES_DISPLAYOk returns a tuple with the EVENT_STDOUT_MAX_BYTES_DISPLAY field value
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetEVENT_STDOUT_MAX_BYTES_DISPLAYOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.EVENT_STDOUT_MAX_BYTES_DISPLAY, true
}

// SetEVENT_STDOUT_MAX_BYTES_DISPLAY sets field value
func (o *InlineObject60) SetEVENT_STDOUT_MAX_BYTES_DISPLAY(v int32) {
	o.EVENT_STDOUT_MAX_BYTES_DISPLAY = v
}

// GetGALAXY_IGNORE_CERTS returns the GALAXY_IGNORE_CERTS field value if set, zero value otherwise.
func (o *InlineObject60) GetGALAXY_IGNORE_CERTS() bool {
	if o == nil || o.GALAXY_IGNORE_CERTS == nil {
		var ret bool
		return ret
	}
	return *o.GALAXY_IGNORE_CERTS
}

// GetGALAXY_IGNORE_CERTSOk returns a tuple with the GALAXY_IGNORE_CERTS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetGALAXY_IGNORE_CERTSOk() (*bool, bool) {
	if o == nil || o.GALAXY_IGNORE_CERTS == nil {
		return nil, false
	}
	return o.GALAXY_IGNORE_CERTS, true
}

// HasGALAXY_IGNORE_CERTS returns a boolean if a field has been set.
func (o *InlineObject60) HasGALAXY_IGNORE_CERTS() bool {
	if o != nil && o.GALAXY_IGNORE_CERTS != nil {
		return true
	}

	return false
}

// SetGALAXY_IGNORE_CERTS gets a reference to the given bool and assigns it to the GALAXY_IGNORE_CERTS field.
func (o *InlineObject60) SetGALAXY_IGNORE_CERTS(v bool) {
	o.GALAXY_IGNORE_CERTS = &v
}

// GetINSIGHTS_TRACKING_STATE returns the INSIGHTS_TRACKING_STATE field value if set, zero value otherwise.
func (o *InlineObject60) GetINSIGHTS_TRACKING_STATE() bool {
	if o == nil || o.INSIGHTS_TRACKING_STATE == nil {
		var ret bool
		return ret
	}
	return *o.INSIGHTS_TRACKING_STATE
}

// GetINSIGHTS_TRACKING_STATEOk returns a tuple with the INSIGHTS_TRACKING_STATE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetINSIGHTS_TRACKING_STATEOk() (*bool, bool) {
	if o == nil || o.INSIGHTS_TRACKING_STATE == nil {
		return nil, false
	}
	return o.INSIGHTS_TRACKING_STATE, true
}

// HasINSIGHTS_TRACKING_STATE returns a boolean if a field has been set.
func (o *InlineObject60) HasINSIGHTS_TRACKING_STATE() bool {
	if o != nil && o.INSIGHTS_TRACKING_STATE != nil {
		return true
	}

	return false
}

// SetINSIGHTS_TRACKING_STATE gets a reference to the given bool and assigns it to the INSIGHTS_TRACKING_STATE field.
func (o *InlineObject60) SetINSIGHTS_TRACKING_STATE(v bool) {
	o.INSIGHTS_TRACKING_STATE = &v
}

// GetLOGIN_REDIRECT_OVERRIDE returns the LOGIN_REDIRECT_OVERRIDE field value if set, zero value otherwise.
func (o *InlineObject60) GetLOGIN_REDIRECT_OVERRIDE() string {
	if o == nil || o.LOGIN_REDIRECT_OVERRIDE == nil {
		var ret string
		return ret
	}
	return *o.LOGIN_REDIRECT_OVERRIDE
}

// GetLOGIN_REDIRECT_OVERRIDEOk returns a tuple with the LOGIN_REDIRECT_OVERRIDE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetLOGIN_REDIRECT_OVERRIDEOk() (*string, bool) {
	if o == nil || o.LOGIN_REDIRECT_OVERRIDE == nil {
		return nil, false
	}
	return o.LOGIN_REDIRECT_OVERRIDE, true
}

// HasLOGIN_REDIRECT_OVERRIDE returns a boolean if a field has been set.
func (o *InlineObject60) HasLOGIN_REDIRECT_OVERRIDE() bool {
	if o != nil && o.LOGIN_REDIRECT_OVERRIDE != nil {
		return true
	}

	return false
}

// SetLOGIN_REDIRECT_OVERRIDE gets a reference to the given string and assigns it to the LOGIN_REDIRECT_OVERRIDE field.
func (o *InlineObject60) SetLOGIN_REDIRECT_OVERRIDE(v string) {
	o.LOGIN_REDIRECT_OVERRIDE = &v
}

// GetLOG_AGGREGATOR_ENABLED returns the LOG_AGGREGATOR_ENABLED field value if set, zero value otherwise.
func (o *InlineObject60) GetLOG_AGGREGATOR_ENABLED() bool {
	if o == nil || o.LOG_AGGREGATOR_ENABLED == nil {
		var ret bool
		return ret
	}
	return *o.LOG_AGGREGATOR_ENABLED
}

// GetLOG_AGGREGATOR_ENABLEDOk returns a tuple with the LOG_AGGREGATOR_ENABLED field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetLOG_AGGREGATOR_ENABLEDOk() (*bool, bool) {
	if o == nil || o.LOG_AGGREGATOR_ENABLED == nil {
		return nil, false
	}
	return o.LOG_AGGREGATOR_ENABLED, true
}

// HasLOG_AGGREGATOR_ENABLED returns a boolean if a field has been set.
func (o *InlineObject60) HasLOG_AGGREGATOR_ENABLED() bool {
	if o != nil && o.LOG_AGGREGATOR_ENABLED != nil {
		return true
	}

	return false
}

// SetLOG_AGGREGATOR_ENABLED gets a reference to the given bool and assigns it to the LOG_AGGREGATOR_ENABLED field.
func (o *InlineObject60) SetLOG_AGGREGATOR_ENABLED(v bool) {
	o.LOG_AGGREGATOR_ENABLED = &v
}

// GetLOG_AGGREGATOR_HOST returns the LOG_AGGREGATOR_HOST field value if set, zero value otherwise.
func (o *InlineObject60) GetLOG_AGGREGATOR_HOST() string {
	if o == nil || o.LOG_AGGREGATOR_HOST == nil {
		var ret string
		return ret
	}
	return *o.LOG_AGGREGATOR_HOST
}

// GetLOG_AGGREGATOR_HOSTOk returns a tuple with the LOG_AGGREGATOR_HOST field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetLOG_AGGREGATOR_HOSTOk() (*string, bool) {
	if o == nil || o.LOG_AGGREGATOR_HOST == nil {
		return nil, false
	}
	return o.LOG_AGGREGATOR_HOST, true
}

// HasLOG_AGGREGATOR_HOST returns a boolean if a field has been set.
func (o *InlineObject60) HasLOG_AGGREGATOR_HOST() bool {
	if o != nil && o.LOG_AGGREGATOR_HOST != nil {
		return true
	}

	return false
}

// SetLOG_AGGREGATOR_HOST gets a reference to the given string and assigns it to the LOG_AGGREGATOR_HOST field.
func (o *InlineObject60) SetLOG_AGGREGATOR_HOST(v string) {
	o.LOG_AGGREGATOR_HOST = &v
}

// GetLOG_AGGREGATOR_INDIVIDUAL_FACTS returns the LOG_AGGREGATOR_INDIVIDUAL_FACTS field value if set, zero value otherwise.
func (o *InlineObject60) GetLOG_AGGREGATOR_INDIVIDUAL_FACTS() bool {
	if o == nil || o.LOG_AGGREGATOR_INDIVIDUAL_FACTS == nil {
		var ret bool
		return ret
	}
	return *o.LOG_AGGREGATOR_INDIVIDUAL_FACTS
}

// GetLOG_AGGREGATOR_INDIVIDUAL_FACTSOk returns a tuple with the LOG_AGGREGATOR_INDIVIDUAL_FACTS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetLOG_AGGREGATOR_INDIVIDUAL_FACTSOk() (*bool, bool) {
	if o == nil || o.LOG_AGGREGATOR_INDIVIDUAL_FACTS == nil {
		return nil, false
	}
	return o.LOG_AGGREGATOR_INDIVIDUAL_FACTS, true
}

// HasLOG_AGGREGATOR_INDIVIDUAL_FACTS returns a boolean if a field has been set.
func (o *InlineObject60) HasLOG_AGGREGATOR_INDIVIDUAL_FACTS() bool {
	if o != nil && o.LOG_AGGREGATOR_INDIVIDUAL_FACTS != nil {
		return true
	}

	return false
}

// SetLOG_AGGREGATOR_INDIVIDUAL_FACTS gets a reference to the given bool and assigns it to the LOG_AGGREGATOR_INDIVIDUAL_FACTS field.
func (o *InlineObject60) SetLOG_AGGREGATOR_INDIVIDUAL_FACTS(v bool) {
	o.LOG_AGGREGATOR_INDIVIDUAL_FACTS = &v
}

// GetLOG_AGGREGATOR_LEVEL returns the LOG_AGGREGATOR_LEVEL field value if set, zero value otherwise.
func (o *InlineObject60) GetLOG_AGGREGATOR_LEVEL() string {
	if o == nil || o.LOG_AGGREGATOR_LEVEL == nil {
		var ret string
		return ret
	}
	return *o.LOG_AGGREGATOR_LEVEL
}

// GetLOG_AGGREGATOR_LEVELOk returns a tuple with the LOG_AGGREGATOR_LEVEL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetLOG_AGGREGATOR_LEVELOk() (*string, bool) {
	if o == nil || o.LOG_AGGREGATOR_LEVEL == nil {
		return nil, false
	}
	return o.LOG_AGGREGATOR_LEVEL, true
}

// HasLOG_AGGREGATOR_LEVEL returns a boolean if a field has been set.
func (o *InlineObject60) HasLOG_AGGREGATOR_LEVEL() bool {
	if o != nil && o.LOG_AGGREGATOR_LEVEL != nil {
		return true
	}

	return false
}

// SetLOG_AGGREGATOR_LEVEL gets a reference to the given string and assigns it to the LOG_AGGREGATOR_LEVEL field.
func (o *InlineObject60) SetLOG_AGGREGATOR_LEVEL(v string) {
	o.LOG_AGGREGATOR_LEVEL = &v
}

// GetLOG_AGGREGATOR_LOGGERS returns the LOG_AGGREGATOR_LOGGERS field value if set, zero value otherwise.
func (o *InlineObject60) GetLOG_AGGREGATOR_LOGGERS() []string {
	if o == nil || o.LOG_AGGREGATOR_LOGGERS == nil {
		var ret []string
		return ret
	}
	return *o.LOG_AGGREGATOR_LOGGERS
}

// GetLOG_AGGREGATOR_LOGGERSOk returns a tuple with the LOG_AGGREGATOR_LOGGERS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetLOG_AGGREGATOR_LOGGERSOk() (*[]string, bool) {
	if o == nil || o.LOG_AGGREGATOR_LOGGERS == nil {
		return nil, false
	}
	return o.LOG_AGGREGATOR_LOGGERS, true
}

// HasLOG_AGGREGATOR_LOGGERS returns a boolean if a field has been set.
func (o *InlineObject60) HasLOG_AGGREGATOR_LOGGERS() bool {
	if o != nil && o.LOG_AGGREGATOR_LOGGERS != nil {
		return true
	}

	return false
}

// SetLOG_AGGREGATOR_LOGGERS gets a reference to the given []string and assigns it to the LOG_AGGREGATOR_LOGGERS field.
func (o *InlineObject60) SetLOG_AGGREGATOR_LOGGERS(v []string) {
	o.LOG_AGGREGATOR_LOGGERS = &v
}

// GetLOG_AGGREGATOR_MAX_DISK_USAGE_GB returns the LOG_AGGREGATOR_MAX_DISK_USAGE_GB field value if set, zero value otherwise.
func (o *InlineObject60) GetLOG_AGGREGATOR_MAX_DISK_USAGE_GB() int32 {
	if o == nil || o.LOG_AGGREGATOR_MAX_DISK_USAGE_GB == nil {
		var ret int32
		return ret
	}
	return *o.LOG_AGGREGATOR_MAX_DISK_USAGE_GB
}

// GetLOG_AGGREGATOR_MAX_DISK_USAGE_GBOk returns a tuple with the LOG_AGGREGATOR_MAX_DISK_USAGE_GB field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetLOG_AGGREGATOR_MAX_DISK_USAGE_GBOk() (*int32, bool) {
	if o == nil || o.LOG_AGGREGATOR_MAX_DISK_USAGE_GB == nil {
		return nil, false
	}
	return o.LOG_AGGREGATOR_MAX_DISK_USAGE_GB, true
}

// HasLOG_AGGREGATOR_MAX_DISK_USAGE_GB returns a boolean if a field has been set.
func (o *InlineObject60) HasLOG_AGGREGATOR_MAX_DISK_USAGE_GB() bool {
	if o != nil && o.LOG_AGGREGATOR_MAX_DISK_USAGE_GB != nil {
		return true
	}

	return false
}

// SetLOG_AGGREGATOR_MAX_DISK_USAGE_GB gets a reference to the given int32 and assigns it to the LOG_AGGREGATOR_MAX_DISK_USAGE_GB field.
func (o *InlineObject60) SetLOG_AGGREGATOR_MAX_DISK_USAGE_GB(v int32) {
	o.LOG_AGGREGATOR_MAX_DISK_USAGE_GB = &v
}

// GetLOG_AGGREGATOR_MAX_DISK_USAGE_PATH returns the LOG_AGGREGATOR_MAX_DISK_USAGE_PATH field value if set, zero value otherwise.
func (o *InlineObject60) GetLOG_AGGREGATOR_MAX_DISK_USAGE_PATH() string {
	if o == nil || o.LOG_AGGREGATOR_MAX_DISK_USAGE_PATH == nil {
		var ret string
		return ret
	}
	return *o.LOG_AGGREGATOR_MAX_DISK_USAGE_PATH
}

// GetLOG_AGGREGATOR_MAX_DISK_USAGE_PATHOk returns a tuple with the LOG_AGGREGATOR_MAX_DISK_USAGE_PATH field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetLOG_AGGREGATOR_MAX_DISK_USAGE_PATHOk() (*string, bool) {
	if o == nil || o.LOG_AGGREGATOR_MAX_DISK_USAGE_PATH == nil {
		return nil, false
	}
	return o.LOG_AGGREGATOR_MAX_DISK_USAGE_PATH, true
}

// HasLOG_AGGREGATOR_MAX_DISK_USAGE_PATH returns a boolean if a field has been set.
func (o *InlineObject60) HasLOG_AGGREGATOR_MAX_DISK_USAGE_PATH() bool {
	if o != nil && o.LOG_AGGREGATOR_MAX_DISK_USAGE_PATH != nil {
		return true
	}

	return false
}

// SetLOG_AGGREGATOR_MAX_DISK_USAGE_PATH gets a reference to the given string and assigns it to the LOG_AGGREGATOR_MAX_DISK_USAGE_PATH field.
func (o *InlineObject60) SetLOG_AGGREGATOR_MAX_DISK_USAGE_PATH(v string) {
	o.LOG_AGGREGATOR_MAX_DISK_USAGE_PATH = &v
}

// GetLOG_AGGREGATOR_PASSWORD returns the LOG_AGGREGATOR_PASSWORD field value if set, zero value otherwise.
func (o *InlineObject60) GetLOG_AGGREGATOR_PASSWORD() string {
	if o == nil || o.LOG_AGGREGATOR_PASSWORD == nil {
		var ret string
		return ret
	}
	return *o.LOG_AGGREGATOR_PASSWORD
}

// GetLOG_AGGREGATOR_PASSWORDOk returns a tuple with the LOG_AGGREGATOR_PASSWORD field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetLOG_AGGREGATOR_PASSWORDOk() (*string, bool) {
	if o == nil || o.LOG_AGGREGATOR_PASSWORD == nil {
		return nil, false
	}
	return o.LOG_AGGREGATOR_PASSWORD, true
}

// HasLOG_AGGREGATOR_PASSWORD returns a boolean if a field has been set.
func (o *InlineObject60) HasLOG_AGGREGATOR_PASSWORD() bool {
	if o != nil && o.LOG_AGGREGATOR_PASSWORD != nil {
		return true
	}

	return false
}

// SetLOG_AGGREGATOR_PASSWORD gets a reference to the given string and assigns it to the LOG_AGGREGATOR_PASSWORD field.
func (o *InlineObject60) SetLOG_AGGREGATOR_PASSWORD(v string) {
	o.LOG_AGGREGATOR_PASSWORD = &v
}

// GetLOG_AGGREGATOR_PORT returns the LOG_AGGREGATOR_PORT field value if set, zero value otherwise.
func (o *InlineObject60) GetLOG_AGGREGATOR_PORT() int32 {
	if o == nil || o.LOG_AGGREGATOR_PORT == nil {
		var ret int32
		return ret
	}
	return *o.LOG_AGGREGATOR_PORT
}

// GetLOG_AGGREGATOR_PORTOk returns a tuple with the LOG_AGGREGATOR_PORT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetLOG_AGGREGATOR_PORTOk() (*int32, bool) {
	if o == nil || o.LOG_AGGREGATOR_PORT == nil {
		return nil, false
	}
	return o.LOG_AGGREGATOR_PORT, true
}

// HasLOG_AGGREGATOR_PORT returns a boolean if a field has been set.
func (o *InlineObject60) HasLOG_AGGREGATOR_PORT() bool {
	if o != nil && o.LOG_AGGREGATOR_PORT != nil {
		return true
	}

	return false
}

// SetLOG_AGGREGATOR_PORT gets a reference to the given int32 and assigns it to the LOG_AGGREGATOR_PORT field.
func (o *InlineObject60) SetLOG_AGGREGATOR_PORT(v int32) {
	o.LOG_AGGREGATOR_PORT = &v
}

// GetLOG_AGGREGATOR_PROTOCOL returns the LOG_AGGREGATOR_PROTOCOL field value if set, zero value otherwise.
func (o *InlineObject60) GetLOG_AGGREGATOR_PROTOCOL() string {
	if o == nil || o.LOG_AGGREGATOR_PROTOCOL == nil {
		var ret string
		return ret
	}
	return *o.LOG_AGGREGATOR_PROTOCOL
}

// GetLOG_AGGREGATOR_PROTOCOLOk returns a tuple with the LOG_AGGREGATOR_PROTOCOL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetLOG_AGGREGATOR_PROTOCOLOk() (*string, bool) {
	if o == nil || o.LOG_AGGREGATOR_PROTOCOL == nil {
		return nil, false
	}
	return o.LOG_AGGREGATOR_PROTOCOL, true
}

// HasLOG_AGGREGATOR_PROTOCOL returns a boolean if a field has been set.
func (o *InlineObject60) HasLOG_AGGREGATOR_PROTOCOL() bool {
	if o != nil && o.LOG_AGGREGATOR_PROTOCOL != nil {
		return true
	}

	return false
}

// SetLOG_AGGREGATOR_PROTOCOL gets a reference to the given string and assigns it to the LOG_AGGREGATOR_PROTOCOL field.
func (o *InlineObject60) SetLOG_AGGREGATOR_PROTOCOL(v string) {
	o.LOG_AGGREGATOR_PROTOCOL = &v
}

// GetLOG_AGGREGATOR_RSYSLOGD_DEBUG returns the LOG_AGGREGATOR_RSYSLOGD_DEBUG field value if set, zero value otherwise.
func (o *InlineObject60) GetLOG_AGGREGATOR_RSYSLOGD_DEBUG() bool {
	if o == nil || o.LOG_AGGREGATOR_RSYSLOGD_DEBUG == nil {
		var ret bool
		return ret
	}
	return *o.LOG_AGGREGATOR_RSYSLOGD_DEBUG
}

// GetLOG_AGGREGATOR_RSYSLOGD_DEBUGOk returns a tuple with the LOG_AGGREGATOR_RSYSLOGD_DEBUG field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetLOG_AGGREGATOR_RSYSLOGD_DEBUGOk() (*bool, bool) {
	if o == nil || o.LOG_AGGREGATOR_RSYSLOGD_DEBUG == nil {
		return nil, false
	}
	return o.LOG_AGGREGATOR_RSYSLOGD_DEBUG, true
}

// HasLOG_AGGREGATOR_RSYSLOGD_DEBUG returns a boolean if a field has been set.
func (o *InlineObject60) HasLOG_AGGREGATOR_RSYSLOGD_DEBUG() bool {
	if o != nil && o.LOG_AGGREGATOR_RSYSLOGD_DEBUG != nil {
		return true
	}

	return false
}

// SetLOG_AGGREGATOR_RSYSLOGD_DEBUG gets a reference to the given bool and assigns it to the LOG_AGGREGATOR_RSYSLOGD_DEBUG field.
func (o *InlineObject60) SetLOG_AGGREGATOR_RSYSLOGD_DEBUG(v bool) {
	o.LOG_AGGREGATOR_RSYSLOGD_DEBUG = &v
}

// GetLOG_AGGREGATOR_TCP_TIMEOUT returns the LOG_AGGREGATOR_TCP_TIMEOUT field value if set, zero value otherwise.
func (o *InlineObject60) GetLOG_AGGREGATOR_TCP_TIMEOUT() int32 {
	if o == nil || o.LOG_AGGREGATOR_TCP_TIMEOUT == nil {
		var ret int32
		return ret
	}
	return *o.LOG_AGGREGATOR_TCP_TIMEOUT
}

// GetLOG_AGGREGATOR_TCP_TIMEOUTOk returns a tuple with the LOG_AGGREGATOR_TCP_TIMEOUT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetLOG_AGGREGATOR_TCP_TIMEOUTOk() (*int32, bool) {
	if o == nil || o.LOG_AGGREGATOR_TCP_TIMEOUT == nil {
		return nil, false
	}
	return o.LOG_AGGREGATOR_TCP_TIMEOUT, true
}

// HasLOG_AGGREGATOR_TCP_TIMEOUT returns a boolean if a field has been set.
func (o *InlineObject60) HasLOG_AGGREGATOR_TCP_TIMEOUT() bool {
	if o != nil && o.LOG_AGGREGATOR_TCP_TIMEOUT != nil {
		return true
	}

	return false
}

// SetLOG_AGGREGATOR_TCP_TIMEOUT gets a reference to the given int32 and assigns it to the LOG_AGGREGATOR_TCP_TIMEOUT field.
func (o *InlineObject60) SetLOG_AGGREGATOR_TCP_TIMEOUT(v int32) {
	o.LOG_AGGREGATOR_TCP_TIMEOUT = &v
}

// GetLOG_AGGREGATOR_TOWER_UUID returns the LOG_AGGREGATOR_TOWER_UUID field value if set, zero value otherwise.
func (o *InlineObject60) GetLOG_AGGREGATOR_TOWER_UUID() string {
	if o == nil || o.LOG_AGGREGATOR_TOWER_UUID == nil {
		var ret string
		return ret
	}
	return *o.LOG_AGGREGATOR_TOWER_UUID
}

// GetLOG_AGGREGATOR_TOWER_UUIDOk returns a tuple with the LOG_AGGREGATOR_TOWER_UUID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetLOG_AGGREGATOR_TOWER_UUIDOk() (*string, bool) {
	if o == nil || o.LOG_AGGREGATOR_TOWER_UUID == nil {
		return nil, false
	}
	return o.LOG_AGGREGATOR_TOWER_UUID, true
}

// HasLOG_AGGREGATOR_TOWER_UUID returns a boolean if a field has been set.
func (o *InlineObject60) HasLOG_AGGREGATOR_TOWER_UUID() bool {
	if o != nil && o.LOG_AGGREGATOR_TOWER_UUID != nil {
		return true
	}

	return false
}

// SetLOG_AGGREGATOR_TOWER_UUID gets a reference to the given string and assigns it to the LOG_AGGREGATOR_TOWER_UUID field.
func (o *InlineObject60) SetLOG_AGGREGATOR_TOWER_UUID(v string) {
	o.LOG_AGGREGATOR_TOWER_UUID = &v
}

// GetLOG_AGGREGATOR_TYPE returns the LOG_AGGREGATOR_TYPE field value if set, zero value otherwise.
func (o *InlineObject60) GetLOG_AGGREGATOR_TYPE() string {
	if o == nil || o.LOG_AGGREGATOR_TYPE == nil {
		var ret string
		return ret
	}
	return *o.LOG_AGGREGATOR_TYPE
}

// GetLOG_AGGREGATOR_TYPEOk returns a tuple with the LOG_AGGREGATOR_TYPE field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetLOG_AGGREGATOR_TYPEOk() (*string, bool) {
	if o == nil || o.LOG_AGGREGATOR_TYPE == nil {
		return nil, false
	}
	return o.LOG_AGGREGATOR_TYPE, true
}

// HasLOG_AGGREGATOR_TYPE returns a boolean if a field has been set.
func (o *InlineObject60) HasLOG_AGGREGATOR_TYPE() bool {
	if o != nil && o.LOG_AGGREGATOR_TYPE != nil {
		return true
	}

	return false
}

// SetLOG_AGGREGATOR_TYPE gets a reference to the given string and assigns it to the LOG_AGGREGATOR_TYPE field.
func (o *InlineObject60) SetLOG_AGGREGATOR_TYPE(v string) {
	o.LOG_AGGREGATOR_TYPE = &v
}

// GetLOG_AGGREGATOR_USERNAME returns the LOG_AGGREGATOR_USERNAME field value if set, zero value otherwise.
func (o *InlineObject60) GetLOG_AGGREGATOR_USERNAME() string {
	if o == nil || o.LOG_AGGREGATOR_USERNAME == nil {
		var ret string
		return ret
	}
	return *o.LOG_AGGREGATOR_USERNAME
}

// GetLOG_AGGREGATOR_USERNAMEOk returns a tuple with the LOG_AGGREGATOR_USERNAME field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetLOG_AGGREGATOR_USERNAMEOk() (*string, bool) {
	if o == nil || o.LOG_AGGREGATOR_USERNAME == nil {
		return nil, false
	}
	return o.LOG_AGGREGATOR_USERNAME, true
}

// HasLOG_AGGREGATOR_USERNAME returns a boolean if a field has been set.
func (o *InlineObject60) HasLOG_AGGREGATOR_USERNAME() bool {
	if o != nil && o.LOG_AGGREGATOR_USERNAME != nil {
		return true
	}

	return false
}

// SetLOG_AGGREGATOR_USERNAME gets a reference to the given string and assigns it to the LOG_AGGREGATOR_USERNAME field.
func (o *InlineObject60) SetLOG_AGGREGATOR_USERNAME(v string) {
	o.LOG_AGGREGATOR_USERNAME = &v
}

// GetLOG_AGGREGATOR_VERIFY_CERT returns the LOG_AGGREGATOR_VERIFY_CERT field value if set, zero value otherwise.
func (o *InlineObject60) GetLOG_AGGREGATOR_VERIFY_CERT() bool {
	if o == nil || o.LOG_AGGREGATOR_VERIFY_CERT == nil {
		var ret bool
		return ret
	}
	return *o.LOG_AGGREGATOR_VERIFY_CERT
}

// GetLOG_AGGREGATOR_VERIFY_CERTOk returns a tuple with the LOG_AGGREGATOR_VERIFY_CERT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetLOG_AGGREGATOR_VERIFY_CERTOk() (*bool, bool) {
	if o == nil || o.LOG_AGGREGATOR_VERIFY_CERT == nil {
		return nil, false
	}
	return o.LOG_AGGREGATOR_VERIFY_CERT, true
}

// HasLOG_AGGREGATOR_VERIFY_CERT returns a boolean if a field has been set.
func (o *InlineObject60) HasLOG_AGGREGATOR_VERIFY_CERT() bool {
	if o != nil && o.LOG_AGGREGATOR_VERIFY_CERT != nil {
		return true
	}

	return false
}

// SetLOG_AGGREGATOR_VERIFY_CERT gets a reference to the given bool and assigns it to the LOG_AGGREGATOR_VERIFY_CERT field.
func (o *InlineObject60) SetLOG_AGGREGATOR_VERIFY_CERT(v bool) {
	o.LOG_AGGREGATOR_VERIFY_CERT = &v
}

// GetMANAGE_ORGANIZATION_AUTH returns the MANAGE_ORGANIZATION_AUTH field value
func (o *InlineObject60) GetMANAGE_ORGANIZATION_AUTH() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.MANAGE_ORGANIZATION_AUTH
}

// GetMANAGE_ORGANIZATION_AUTHOk returns a tuple with the MANAGE_ORGANIZATION_AUTH field value
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetMANAGE_ORGANIZATION_AUTHOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MANAGE_ORGANIZATION_AUTH, true
}

// SetMANAGE_ORGANIZATION_AUTH sets field value
func (o *InlineObject60) SetMANAGE_ORGANIZATION_AUTH(v bool) {
	o.MANAGE_ORGANIZATION_AUTH = v
}

// GetMAX_FORKS returns the MAX_FORKS field value if set, zero value otherwise.
func (o *InlineObject60) GetMAX_FORKS() int32 {
	if o == nil || o.MAX_FORKS == nil {
		var ret int32
		return ret
	}
	return *o.MAX_FORKS
}

// GetMAX_FORKSOk returns a tuple with the MAX_FORKS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetMAX_FORKSOk() (*int32, bool) {
	if o == nil || o.MAX_FORKS == nil {
		return nil, false
	}
	return o.MAX_FORKS, true
}

// HasMAX_FORKS returns a boolean if a field has been set.
func (o *InlineObject60) HasMAX_FORKS() bool {
	if o != nil && o.MAX_FORKS != nil {
		return true
	}

	return false
}

// SetMAX_FORKS gets a reference to the given int32 and assigns it to the MAX_FORKS field.
func (o *InlineObject60) SetMAX_FORKS(v int32) {
	o.MAX_FORKS = &v
}

// GetMAX_UI_JOB_EVENTS returns the MAX_UI_JOB_EVENTS field value
func (o *InlineObject60) GetMAX_UI_JOB_EVENTS() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.MAX_UI_JOB_EVENTS
}

// GetMAX_UI_JOB_EVENTSOk returns a tuple with the MAX_UI_JOB_EVENTS field value
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetMAX_UI_JOB_EVENTSOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.MAX_UI_JOB_EVENTS, true
}

// SetMAX_UI_JOB_EVENTS sets field value
func (o *InlineObject60) SetMAX_UI_JOB_EVENTS(v int32) {
	o.MAX_UI_JOB_EVENTS = v
}

// GetOAUTH2PROVIDER returns the OAUTH2PROVIDER field value if set, zero value otherwise.
func (o *InlineObject60) GetOAUTH2PROVIDER() map[string]interface{} {
	if o == nil || o.OAUTH2PROVIDER == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.OAUTH2PROVIDER
}

// GetOAUTH2PROVIDEROk returns a tuple with the OAUTH2PROVIDER field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetOAUTH2PROVIDEROk() (*map[string]interface{}, bool) {
	if o == nil || o.OAUTH2PROVIDER == nil {
		return nil, false
	}
	return o.OAUTH2PROVIDER, true
}

// HasOAUTH2PROVIDER returns a boolean if a field has been set.
func (o *InlineObject60) HasOAUTH2PROVIDER() bool {
	if o != nil && o.OAUTH2PROVIDER != nil {
		return true
	}

	return false
}

// SetOAUTH2PROVIDER gets a reference to the given map[string]interface{} and assigns it to the OAUTH2PROVIDER field.
func (o *InlineObject60) SetOAUTH2PROVIDER(v map[string]interface{}) {
	o.OAUTH2PROVIDER = &v
}

// GetORG_ADMINS_CAN_SEE_ALL_USERS returns the ORG_ADMINS_CAN_SEE_ALL_USERS field value
func (o *InlineObject60) GetORG_ADMINS_CAN_SEE_ALL_USERS() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.ORG_ADMINS_CAN_SEE_ALL_USERS
}

// GetORG_ADMINS_CAN_SEE_ALL_USERSOk returns a tuple with the ORG_ADMINS_CAN_SEE_ALL_USERS field value
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetORG_ADMINS_CAN_SEE_ALL_USERSOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.ORG_ADMINS_CAN_SEE_ALL_USERS, true
}

// SetORG_ADMINS_CAN_SEE_ALL_USERS sets field value
func (o *InlineObject60) SetORG_ADMINS_CAN_SEE_ALL_USERS(v bool) {
	o.ORG_ADMINS_CAN_SEE_ALL_USERS = v
}

// GetPROJECT_UPDATE_VVV returns the PROJECT_UPDATE_VVV field value
func (o *InlineObject60) GetPROJECT_UPDATE_VVV() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.PROJECT_UPDATE_VVV
}

// GetPROJECT_UPDATE_VVVOk returns a tuple with the PROJECT_UPDATE_VVV field value
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetPROJECT_UPDATE_VVVOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PROJECT_UPDATE_VVV, true
}

// SetPROJECT_UPDATE_VVV sets field value
func (o *InlineObject60) SetPROJECT_UPDATE_VVV(v bool) {
	o.PROJECT_UPDATE_VVV = v
}

// GetPROXY_IP_ALLOWED_LIST returns the PROXY_IP_ALLOWED_LIST field value
func (o *InlineObject60) GetPROXY_IP_ALLOWED_LIST() []string {
	if o == nil  {
		var ret []string
		return ret
	}

	return o.PROXY_IP_ALLOWED_LIST
}

// GetPROXY_IP_ALLOWED_LISTOk returns a tuple with the PROXY_IP_ALLOWED_LIST field value
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetPROXY_IP_ALLOWED_LISTOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.PROXY_IP_ALLOWED_LIST, true
}

// SetPROXY_IP_ALLOWED_LIST sets field value
func (o *InlineObject60) SetPROXY_IP_ALLOWED_LIST(v []string) {
	o.PROXY_IP_ALLOWED_LIST = v
}

// GetRADIUS_PORT returns the RADIUS_PORT field value if set, zero value otherwise.
func (o *InlineObject60) GetRADIUS_PORT() int32 {
	if o == nil || o.RADIUS_PORT == nil {
		var ret int32
		return ret
	}
	return *o.RADIUS_PORT
}

// GetRADIUS_PORTOk returns a tuple with the RADIUS_PORT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetRADIUS_PORTOk() (*int32, bool) {
	if o == nil || o.RADIUS_PORT == nil {
		return nil, false
	}
	return o.RADIUS_PORT, true
}

// HasRADIUS_PORT returns a boolean if a field has been set.
func (o *InlineObject60) HasRADIUS_PORT() bool {
	if o != nil && o.RADIUS_PORT != nil {
		return true
	}

	return false
}

// SetRADIUS_PORT gets a reference to the given int32 and assigns it to the RADIUS_PORT field.
func (o *InlineObject60) SetRADIUS_PORT(v int32) {
	o.RADIUS_PORT = &v
}

// GetRADIUS_SECRET returns the RADIUS_SECRET field value if set, zero value otherwise.
func (o *InlineObject60) GetRADIUS_SECRET() string {
	if o == nil || o.RADIUS_SECRET == nil {
		var ret string
		return ret
	}
	return *o.RADIUS_SECRET
}

// GetRADIUS_SECRETOk returns a tuple with the RADIUS_SECRET field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetRADIUS_SECRETOk() (*string, bool) {
	if o == nil || o.RADIUS_SECRET == nil {
		return nil, false
	}
	return o.RADIUS_SECRET, true
}

// HasRADIUS_SECRET returns a boolean if a field has been set.
func (o *InlineObject60) HasRADIUS_SECRET() bool {
	if o != nil && o.RADIUS_SECRET != nil {
		return true
	}

	return false
}

// SetRADIUS_SECRET gets a reference to the given string and assigns it to the RADIUS_SECRET field.
func (o *InlineObject60) SetRADIUS_SECRET(v string) {
	o.RADIUS_SECRET = &v
}

// GetRADIUS_SERVER returns the RADIUS_SERVER field value if set, zero value otherwise.
func (o *InlineObject60) GetRADIUS_SERVER() string {
	if o == nil || o.RADIUS_SERVER == nil {
		var ret string
		return ret
	}
	return *o.RADIUS_SERVER
}

// GetRADIUS_SERVEROk returns a tuple with the RADIUS_SERVER field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetRADIUS_SERVEROk() (*string, bool) {
	if o == nil || o.RADIUS_SERVER == nil {
		return nil, false
	}
	return o.RADIUS_SERVER, true
}

// HasRADIUS_SERVER returns a boolean if a field has been set.
func (o *InlineObject60) HasRADIUS_SERVER() bool {
	if o != nil && o.RADIUS_SERVER != nil {
		return true
	}

	return false
}

// SetRADIUS_SERVER gets a reference to the given string and assigns it to the RADIUS_SERVER field.
func (o *InlineObject60) SetRADIUS_SERVER(v string) {
	o.RADIUS_SERVER = &v
}

// GetREDHAT_PASSWORD returns the REDHAT_PASSWORD field value if set, zero value otherwise.
func (o *InlineObject60) GetREDHAT_PASSWORD() string {
	if o == nil || o.REDHAT_PASSWORD == nil {
		var ret string
		return ret
	}
	return *o.REDHAT_PASSWORD
}

// GetREDHAT_PASSWORDOk returns a tuple with the REDHAT_PASSWORD field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetREDHAT_PASSWORDOk() (*string, bool) {
	if o == nil || o.REDHAT_PASSWORD == nil {
		return nil, false
	}
	return o.REDHAT_PASSWORD, true
}

// HasREDHAT_PASSWORD returns a boolean if a field has been set.
func (o *InlineObject60) HasREDHAT_PASSWORD() bool {
	if o != nil && o.REDHAT_PASSWORD != nil {
		return true
	}

	return false
}

// SetREDHAT_PASSWORD gets a reference to the given string and assigns it to the REDHAT_PASSWORD field.
func (o *InlineObject60) SetREDHAT_PASSWORD(v string) {
	o.REDHAT_PASSWORD = &v
}

// GetREDHAT_USERNAME returns the REDHAT_USERNAME field value if set, zero value otherwise.
func (o *InlineObject60) GetREDHAT_USERNAME() string {
	if o == nil || o.REDHAT_USERNAME == nil {
		var ret string
		return ret
	}
	return *o.REDHAT_USERNAME
}

// GetREDHAT_USERNAMEOk returns a tuple with the REDHAT_USERNAME field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetREDHAT_USERNAMEOk() (*string, bool) {
	if o == nil || o.REDHAT_USERNAME == nil {
		return nil, false
	}
	return o.REDHAT_USERNAME, true
}

// HasREDHAT_USERNAME returns a boolean if a field has been set.
func (o *InlineObject60) HasREDHAT_USERNAME() bool {
	if o != nil && o.REDHAT_USERNAME != nil {
		return true
	}

	return false
}

// SetREDHAT_USERNAME gets a reference to the given string and assigns it to the REDHAT_USERNAME field.
func (o *InlineObject60) SetREDHAT_USERNAME(v string) {
	o.REDHAT_USERNAME = &v
}

// GetREMOTE_HOST_HEADERS returns the REMOTE_HOST_HEADERS field value
func (o *InlineObject60) GetREMOTE_HOST_HEADERS() []string {
	if o == nil  {
		var ret []string
		return ret
	}

	return o.REMOTE_HOST_HEADERS
}

// GetREMOTE_HOST_HEADERSOk returns a tuple with the REMOTE_HOST_HEADERS field value
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetREMOTE_HOST_HEADERSOk() (*[]string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.REMOTE_HOST_HEADERS, true
}

// SetREMOTE_HOST_HEADERS sets field value
func (o *InlineObject60) SetREMOTE_HOST_HEADERS(v []string) {
	o.REMOTE_HOST_HEADERS = v
}

// GetSAML_AUTO_CREATE_OBJECTS returns the SAML_AUTO_CREATE_OBJECTS field value if set, zero value otherwise.
func (o *InlineObject60) GetSAML_AUTO_CREATE_OBJECTS() bool {
	if o == nil || o.SAML_AUTO_CREATE_OBJECTS == nil {
		var ret bool
		return ret
	}
	return *o.SAML_AUTO_CREATE_OBJECTS
}

// GetSAML_AUTO_CREATE_OBJECTSOk returns a tuple with the SAML_AUTO_CREATE_OBJECTS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSAML_AUTO_CREATE_OBJECTSOk() (*bool, bool) {
	if o == nil || o.SAML_AUTO_CREATE_OBJECTS == nil {
		return nil, false
	}
	return o.SAML_AUTO_CREATE_OBJECTS, true
}

// HasSAML_AUTO_CREATE_OBJECTS returns a boolean if a field has been set.
func (o *InlineObject60) HasSAML_AUTO_CREATE_OBJECTS() bool {
	if o != nil && o.SAML_AUTO_CREATE_OBJECTS != nil {
		return true
	}

	return false
}

// SetSAML_AUTO_CREATE_OBJECTS gets a reference to the given bool and assigns it to the SAML_AUTO_CREATE_OBJECTS field.
func (o *InlineObject60) SetSAML_AUTO_CREATE_OBJECTS(v bool) {
	o.SAML_AUTO_CREATE_OBJECTS = &v
}

// GetSCHEDULE_MAX_JOBS returns the SCHEDULE_MAX_JOBS field value
func (o *InlineObject60) GetSCHEDULE_MAX_JOBS() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.SCHEDULE_MAX_JOBS
}

// GetSCHEDULE_MAX_JOBSOk returns a tuple with the SCHEDULE_MAX_JOBS field value
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSCHEDULE_MAX_JOBSOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SCHEDULE_MAX_JOBS, true
}

// SetSCHEDULE_MAX_JOBS sets field value
func (o *InlineObject60) SetSCHEDULE_MAX_JOBS(v int32) {
	o.SCHEDULE_MAX_JOBS = v
}

// GetSESSIONS_PER_USER returns the SESSIONS_PER_USER field value
func (o *InlineObject60) GetSESSIONS_PER_USER() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.SESSIONS_PER_USER
}

// GetSESSIONS_PER_USEROk returns a tuple with the SESSIONS_PER_USER field value
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSESSIONS_PER_USEROk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SESSIONS_PER_USER, true
}

// SetSESSIONS_PER_USER sets field value
func (o *InlineObject60) SetSESSIONS_PER_USER(v int32) {
	o.SESSIONS_PER_USER = v
}

// GetSESSION_COOKIE_AGE returns the SESSION_COOKIE_AGE field value
func (o *InlineObject60) GetSESSION_COOKIE_AGE() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.SESSION_COOKIE_AGE
}

// GetSESSION_COOKIE_AGEOk returns a tuple with the SESSION_COOKIE_AGE field value
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSESSION_COOKIE_AGEOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SESSION_COOKIE_AGE, true
}

// SetSESSION_COOKIE_AGE sets field value
func (o *InlineObject60) SetSESSION_COOKIE_AGE(v int32) {
	o.SESSION_COOKIE_AGE = v
}

// GetSOCIALAUTHAZUREADOAUTH2KEY returns the SOCIALAUTHAZUREADOAUTH2KEY field value if set, zero value otherwise.
func (o *InlineObject60) GetSOCIALAUTHAZUREADOAUTH2KEY() string {
	if o == nil || o.SOCIALAUTHAZUREADOAUTH2KEY == nil {
		var ret string
		return ret
	}
	return *o.SOCIALAUTHAZUREADOAUTH2KEY
}

// GetSOCIALAUTHAZUREADOAUTH2KEYOk returns a tuple with the SOCIALAUTHAZUREADOAUTH2KEY field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIALAUTHAZUREADOAUTH2KEYOk() (*string, bool) {
	if o == nil || o.SOCIALAUTHAZUREADOAUTH2KEY == nil {
		return nil, false
	}
	return o.SOCIALAUTHAZUREADOAUTH2KEY, true
}

// HasSOCIALAUTHAZUREADOAUTH2KEY returns a boolean if a field has been set.
func (o *InlineObject60) HasSOCIALAUTHAZUREADOAUTH2KEY() bool {
	if o != nil && o.SOCIALAUTHAZUREADOAUTH2KEY != nil {
		return true
	}

	return false
}

// SetSOCIALAUTHAZUREADOAUTH2KEY gets a reference to the given string and assigns it to the SOCIALAUTHAZUREADOAUTH2KEY field.
func (o *InlineObject60) SetSOCIALAUTHAZUREADOAUTH2KEY(v string) {
	o.SOCIALAUTHAZUREADOAUTH2KEY = &v
}

// GetSOCIALAUTHAZUREADOAUTH2ORGANIZATIONMAP returns the SOCIALAUTHAZUREADOAUTH2ORGANIZATIONMAP field value if set, zero value otherwise.
func (o *InlineObject60) GetSOCIALAUTHAZUREADOAUTH2ORGANIZATIONMAP() map[string]interface{} {
	if o == nil || o.SOCIALAUTHAZUREADOAUTH2ORGANIZATIONMAP == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.SOCIALAUTHAZUREADOAUTH2ORGANIZATIONMAP
}

// GetSOCIALAUTHAZUREADOAUTH2ORGANIZATIONMAPOk returns a tuple with the SOCIALAUTHAZUREADOAUTH2ORGANIZATIONMAP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIALAUTHAZUREADOAUTH2ORGANIZATIONMAPOk() (*map[string]interface{}, bool) {
	if o == nil || o.SOCIALAUTHAZUREADOAUTH2ORGANIZATIONMAP == nil {
		return nil, false
	}
	return o.SOCIALAUTHAZUREADOAUTH2ORGANIZATIONMAP, true
}

// HasSOCIALAUTHAZUREADOAUTH2ORGANIZATIONMAP returns a boolean if a field has been set.
func (o *InlineObject60) HasSOCIALAUTHAZUREADOAUTH2ORGANIZATIONMAP() bool {
	if o != nil && o.SOCIALAUTHAZUREADOAUTH2ORGANIZATIONMAP != nil {
		return true
	}

	return false
}

// SetSOCIALAUTHAZUREADOAUTH2ORGANIZATIONMAP gets a reference to the given map[string]interface{} and assigns it to the SOCIALAUTHAZUREADOAUTH2ORGANIZATIONMAP field.
func (o *InlineObject60) SetSOCIALAUTHAZUREADOAUTH2ORGANIZATIONMAP(v map[string]interface{}) {
	o.SOCIALAUTHAZUREADOAUTH2ORGANIZATIONMAP = &v
}

// GetSOCIALAUTHAZUREADOAUTH2SECRET returns the SOCIALAUTHAZUREADOAUTH2SECRET field value if set, zero value otherwise.
func (o *InlineObject60) GetSOCIALAUTHAZUREADOAUTH2SECRET() string {
	if o == nil || o.SOCIALAUTHAZUREADOAUTH2SECRET == nil {
		var ret string
		return ret
	}
	return *o.SOCIALAUTHAZUREADOAUTH2SECRET
}

// GetSOCIALAUTHAZUREADOAUTH2SECRETOk returns a tuple with the SOCIALAUTHAZUREADOAUTH2SECRET field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIALAUTHAZUREADOAUTH2SECRETOk() (*string, bool) {
	if o == nil || o.SOCIALAUTHAZUREADOAUTH2SECRET == nil {
		return nil, false
	}
	return o.SOCIALAUTHAZUREADOAUTH2SECRET, true
}

// HasSOCIALAUTHAZUREADOAUTH2SECRET returns a boolean if a field has been set.
func (o *InlineObject60) HasSOCIALAUTHAZUREADOAUTH2SECRET() bool {
	if o != nil && o.SOCIALAUTHAZUREADOAUTH2SECRET != nil {
		return true
	}

	return false
}

// SetSOCIALAUTHAZUREADOAUTH2SECRET gets a reference to the given string and assigns it to the SOCIALAUTHAZUREADOAUTH2SECRET field.
func (o *InlineObject60) SetSOCIALAUTHAZUREADOAUTH2SECRET(v string) {
	o.SOCIALAUTHAZUREADOAUTH2SECRET = &v
}

// GetSOCIALAUTHAZUREADOAUTH2TEAMMAP returns the SOCIALAUTHAZUREADOAUTH2TEAMMAP field value if set, zero value otherwise.
func (o *InlineObject60) GetSOCIALAUTHAZUREADOAUTH2TEAMMAP() map[string]interface{} {
	if o == nil || o.SOCIALAUTHAZUREADOAUTH2TEAMMAP == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.SOCIALAUTHAZUREADOAUTH2TEAMMAP
}

// GetSOCIALAUTHAZUREADOAUTH2TEAMMAPOk returns a tuple with the SOCIALAUTHAZUREADOAUTH2TEAMMAP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIALAUTHAZUREADOAUTH2TEAMMAPOk() (*map[string]interface{}, bool) {
	if o == nil || o.SOCIALAUTHAZUREADOAUTH2TEAMMAP == nil {
		return nil, false
	}
	return o.SOCIALAUTHAZUREADOAUTH2TEAMMAP, true
}

// HasSOCIALAUTHAZUREADOAUTH2TEAMMAP returns a boolean if a field has been set.
func (o *InlineObject60) HasSOCIALAUTHAZUREADOAUTH2TEAMMAP() bool {
	if o != nil && o.SOCIALAUTHAZUREADOAUTH2TEAMMAP != nil {
		return true
	}

	return false
}

// SetSOCIALAUTHAZUREADOAUTH2TEAMMAP gets a reference to the given map[string]interface{} and assigns it to the SOCIALAUTHAZUREADOAUTH2TEAMMAP field.
func (o *InlineObject60) SetSOCIALAUTHAZUREADOAUTH2TEAMMAP(v map[string]interface{}) {
	o.SOCIALAUTHAZUREADOAUTH2TEAMMAP = &v
}

// GetSOCIAL_AUTH_GITHUB_KEY returns the SOCIAL_AUTH_GITHUB_KEY field value if set, zero value otherwise.
func (o *InlineObject60) GetSOCIAL_AUTH_GITHUB_KEY() string {
	if o == nil || o.SOCIAL_AUTH_GITHUB_KEY == nil {
		var ret string
		return ret
	}
	return *o.SOCIAL_AUTH_GITHUB_KEY
}

// GetSOCIAL_AUTH_GITHUB_KEYOk returns a tuple with the SOCIAL_AUTH_GITHUB_KEY field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIAL_AUTH_GITHUB_KEYOk() (*string, bool) {
	if o == nil || o.SOCIAL_AUTH_GITHUB_KEY == nil {
		return nil, false
	}
	return o.SOCIAL_AUTH_GITHUB_KEY, true
}

// HasSOCIAL_AUTH_GITHUB_KEY returns a boolean if a field has been set.
func (o *InlineObject60) HasSOCIAL_AUTH_GITHUB_KEY() bool {
	if o != nil && o.SOCIAL_AUTH_GITHUB_KEY != nil {
		return true
	}

	return false
}

// SetSOCIAL_AUTH_GITHUB_KEY gets a reference to the given string and assigns it to the SOCIAL_AUTH_GITHUB_KEY field.
func (o *InlineObject60) SetSOCIAL_AUTH_GITHUB_KEY(v string) {
	o.SOCIAL_AUTH_GITHUB_KEY = &v
}

// GetSOCIAL_AUTH_GITHUB_ORGANIZATION_MAP returns the SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP field value if set, zero value otherwise.
func (o *InlineObject60) GetSOCIAL_AUTH_GITHUB_ORGANIZATION_MAP() map[string]interface{} {
	if o == nil || o.SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP
}

// GetSOCIAL_AUTH_GITHUB_ORGANIZATION_MAPOk returns a tuple with the SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIAL_AUTH_GITHUB_ORGANIZATION_MAPOk() (*map[string]interface{}, bool) {
	if o == nil || o.SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP == nil {
		return nil, false
	}
	return o.SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP, true
}

// HasSOCIAL_AUTH_GITHUB_ORGANIZATION_MAP returns a boolean if a field has been set.
func (o *InlineObject60) HasSOCIAL_AUTH_GITHUB_ORGANIZATION_MAP() bool {
	if o != nil && o.SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP != nil {
		return true
	}

	return false
}

// SetSOCIAL_AUTH_GITHUB_ORGANIZATION_MAP gets a reference to the given map[string]interface{} and assigns it to the SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP field.
func (o *InlineObject60) SetSOCIAL_AUTH_GITHUB_ORGANIZATION_MAP(v map[string]interface{}) {
	o.SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP = &v
}

// GetSOCIAL_AUTH_GITHUB_ORG_KEY returns the SOCIAL_AUTH_GITHUB_ORG_KEY field value if set, zero value otherwise.
func (o *InlineObject60) GetSOCIAL_AUTH_GITHUB_ORG_KEY() string {
	if o == nil || o.SOCIAL_AUTH_GITHUB_ORG_KEY == nil {
		var ret string
		return ret
	}
	return *o.SOCIAL_AUTH_GITHUB_ORG_KEY
}

// GetSOCIAL_AUTH_GITHUB_ORG_KEYOk returns a tuple with the SOCIAL_AUTH_GITHUB_ORG_KEY field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIAL_AUTH_GITHUB_ORG_KEYOk() (*string, bool) {
	if o == nil || o.SOCIAL_AUTH_GITHUB_ORG_KEY == nil {
		return nil, false
	}
	return o.SOCIAL_AUTH_GITHUB_ORG_KEY, true
}

// HasSOCIAL_AUTH_GITHUB_ORG_KEY returns a boolean if a field has been set.
func (o *InlineObject60) HasSOCIAL_AUTH_GITHUB_ORG_KEY() bool {
	if o != nil && o.SOCIAL_AUTH_GITHUB_ORG_KEY != nil {
		return true
	}

	return false
}

// SetSOCIAL_AUTH_GITHUB_ORG_KEY gets a reference to the given string and assigns it to the SOCIAL_AUTH_GITHUB_ORG_KEY field.
func (o *InlineObject60) SetSOCIAL_AUTH_GITHUB_ORG_KEY(v string) {
	o.SOCIAL_AUTH_GITHUB_ORG_KEY = &v
}

// GetSOCIAL_AUTH_GITHUB_ORG_NAME returns the SOCIAL_AUTH_GITHUB_ORG_NAME field value if set, zero value otherwise.
func (o *InlineObject60) GetSOCIAL_AUTH_GITHUB_ORG_NAME() string {
	if o == nil || o.SOCIAL_AUTH_GITHUB_ORG_NAME == nil {
		var ret string
		return ret
	}
	return *o.SOCIAL_AUTH_GITHUB_ORG_NAME
}

// GetSOCIAL_AUTH_GITHUB_ORG_NAMEOk returns a tuple with the SOCIAL_AUTH_GITHUB_ORG_NAME field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIAL_AUTH_GITHUB_ORG_NAMEOk() (*string, bool) {
	if o == nil || o.SOCIAL_AUTH_GITHUB_ORG_NAME == nil {
		return nil, false
	}
	return o.SOCIAL_AUTH_GITHUB_ORG_NAME, true
}

// HasSOCIAL_AUTH_GITHUB_ORG_NAME returns a boolean if a field has been set.
func (o *InlineObject60) HasSOCIAL_AUTH_GITHUB_ORG_NAME() bool {
	if o != nil && o.SOCIAL_AUTH_GITHUB_ORG_NAME != nil {
		return true
	}

	return false
}

// SetSOCIAL_AUTH_GITHUB_ORG_NAME gets a reference to the given string and assigns it to the SOCIAL_AUTH_GITHUB_ORG_NAME field.
func (o *InlineObject60) SetSOCIAL_AUTH_GITHUB_ORG_NAME(v string) {
	o.SOCIAL_AUTH_GITHUB_ORG_NAME = &v
}

// GetSOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP returns the SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP field value if set, zero value otherwise.
func (o *InlineObject60) GetSOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP() map[string]interface{} {
	if o == nil || o.SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP
}

// GetSOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAPOk returns a tuple with the SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAPOk() (*map[string]interface{}, bool) {
	if o == nil || o.SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP == nil {
		return nil, false
	}
	return o.SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP, true
}

// HasSOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP returns a boolean if a field has been set.
func (o *InlineObject60) HasSOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP() bool {
	if o != nil && o.SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP != nil {
		return true
	}

	return false
}

// SetSOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP gets a reference to the given map[string]interface{} and assigns it to the SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP field.
func (o *InlineObject60) SetSOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP(v map[string]interface{}) {
	o.SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP = &v
}

// GetSOCIAL_AUTH_GITHUB_ORG_SECRET returns the SOCIAL_AUTH_GITHUB_ORG_SECRET field value if set, zero value otherwise.
func (o *InlineObject60) GetSOCIAL_AUTH_GITHUB_ORG_SECRET() string {
	if o == nil || o.SOCIAL_AUTH_GITHUB_ORG_SECRET == nil {
		var ret string
		return ret
	}
	return *o.SOCIAL_AUTH_GITHUB_ORG_SECRET
}

// GetSOCIAL_AUTH_GITHUB_ORG_SECRETOk returns a tuple with the SOCIAL_AUTH_GITHUB_ORG_SECRET field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIAL_AUTH_GITHUB_ORG_SECRETOk() (*string, bool) {
	if o == nil || o.SOCIAL_AUTH_GITHUB_ORG_SECRET == nil {
		return nil, false
	}
	return o.SOCIAL_AUTH_GITHUB_ORG_SECRET, true
}

// HasSOCIAL_AUTH_GITHUB_ORG_SECRET returns a boolean if a field has been set.
func (o *InlineObject60) HasSOCIAL_AUTH_GITHUB_ORG_SECRET() bool {
	if o != nil && o.SOCIAL_AUTH_GITHUB_ORG_SECRET != nil {
		return true
	}

	return false
}

// SetSOCIAL_AUTH_GITHUB_ORG_SECRET gets a reference to the given string and assigns it to the SOCIAL_AUTH_GITHUB_ORG_SECRET field.
func (o *InlineObject60) SetSOCIAL_AUTH_GITHUB_ORG_SECRET(v string) {
	o.SOCIAL_AUTH_GITHUB_ORG_SECRET = &v
}

// GetSOCIAL_AUTH_GITHUB_ORG_TEAM_MAP returns the SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP field value if set, zero value otherwise.
func (o *InlineObject60) GetSOCIAL_AUTH_GITHUB_ORG_TEAM_MAP() map[string]interface{} {
	if o == nil || o.SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP
}

// GetSOCIAL_AUTH_GITHUB_ORG_TEAM_MAPOk returns a tuple with the SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIAL_AUTH_GITHUB_ORG_TEAM_MAPOk() (*map[string]interface{}, bool) {
	if o == nil || o.SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP == nil {
		return nil, false
	}
	return o.SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP, true
}

// HasSOCIAL_AUTH_GITHUB_ORG_TEAM_MAP returns a boolean if a field has been set.
func (o *InlineObject60) HasSOCIAL_AUTH_GITHUB_ORG_TEAM_MAP() bool {
	if o != nil && o.SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP != nil {
		return true
	}

	return false
}

// SetSOCIAL_AUTH_GITHUB_ORG_TEAM_MAP gets a reference to the given map[string]interface{} and assigns it to the SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP field.
func (o *InlineObject60) SetSOCIAL_AUTH_GITHUB_ORG_TEAM_MAP(v map[string]interface{}) {
	o.SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP = &v
}

// GetSOCIAL_AUTH_GITHUB_SECRET returns the SOCIAL_AUTH_GITHUB_SECRET field value if set, zero value otherwise.
func (o *InlineObject60) GetSOCIAL_AUTH_GITHUB_SECRET() string {
	if o == nil || o.SOCIAL_AUTH_GITHUB_SECRET == nil {
		var ret string
		return ret
	}
	return *o.SOCIAL_AUTH_GITHUB_SECRET
}

// GetSOCIAL_AUTH_GITHUB_SECRETOk returns a tuple with the SOCIAL_AUTH_GITHUB_SECRET field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIAL_AUTH_GITHUB_SECRETOk() (*string, bool) {
	if o == nil || o.SOCIAL_AUTH_GITHUB_SECRET == nil {
		return nil, false
	}
	return o.SOCIAL_AUTH_GITHUB_SECRET, true
}

// HasSOCIAL_AUTH_GITHUB_SECRET returns a boolean if a field has been set.
func (o *InlineObject60) HasSOCIAL_AUTH_GITHUB_SECRET() bool {
	if o != nil && o.SOCIAL_AUTH_GITHUB_SECRET != nil {
		return true
	}

	return false
}

// SetSOCIAL_AUTH_GITHUB_SECRET gets a reference to the given string and assigns it to the SOCIAL_AUTH_GITHUB_SECRET field.
func (o *InlineObject60) SetSOCIAL_AUTH_GITHUB_SECRET(v string) {
	o.SOCIAL_AUTH_GITHUB_SECRET = &v
}

// GetSOCIAL_AUTH_GITHUB_TEAM_ID returns the SOCIAL_AUTH_GITHUB_TEAM_ID field value if set, zero value otherwise.
func (o *InlineObject60) GetSOCIAL_AUTH_GITHUB_TEAM_ID() string {
	if o == nil || o.SOCIAL_AUTH_GITHUB_TEAM_ID == nil {
		var ret string
		return ret
	}
	return *o.SOCIAL_AUTH_GITHUB_TEAM_ID
}

// GetSOCIAL_AUTH_GITHUB_TEAM_IDOk returns a tuple with the SOCIAL_AUTH_GITHUB_TEAM_ID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIAL_AUTH_GITHUB_TEAM_IDOk() (*string, bool) {
	if o == nil || o.SOCIAL_AUTH_GITHUB_TEAM_ID == nil {
		return nil, false
	}
	return o.SOCIAL_AUTH_GITHUB_TEAM_ID, true
}

// HasSOCIAL_AUTH_GITHUB_TEAM_ID returns a boolean if a field has been set.
func (o *InlineObject60) HasSOCIAL_AUTH_GITHUB_TEAM_ID() bool {
	if o != nil && o.SOCIAL_AUTH_GITHUB_TEAM_ID != nil {
		return true
	}

	return false
}

// SetSOCIAL_AUTH_GITHUB_TEAM_ID gets a reference to the given string and assigns it to the SOCIAL_AUTH_GITHUB_TEAM_ID field.
func (o *InlineObject60) SetSOCIAL_AUTH_GITHUB_TEAM_ID(v string) {
	o.SOCIAL_AUTH_GITHUB_TEAM_ID = &v
}

// GetSOCIAL_AUTH_GITHUB_TEAM_KEY returns the SOCIAL_AUTH_GITHUB_TEAM_KEY field value if set, zero value otherwise.
func (o *InlineObject60) GetSOCIAL_AUTH_GITHUB_TEAM_KEY() string {
	if o == nil || o.SOCIAL_AUTH_GITHUB_TEAM_KEY == nil {
		var ret string
		return ret
	}
	return *o.SOCIAL_AUTH_GITHUB_TEAM_KEY
}

// GetSOCIAL_AUTH_GITHUB_TEAM_KEYOk returns a tuple with the SOCIAL_AUTH_GITHUB_TEAM_KEY field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIAL_AUTH_GITHUB_TEAM_KEYOk() (*string, bool) {
	if o == nil || o.SOCIAL_AUTH_GITHUB_TEAM_KEY == nil {
		return nil, false
	}
	return o.SOCIAL_AUTH_GITHUB_TEAM_KEY, true
}

// HasSOCIAL_AUTH_GITHUB_TEAM_KEY returns a boolean if a field has been set.
func (o *InlineObject60) HasSOCIAL_AUTH_GITHUB_TEAM_KEY() bool {
	if o != nil && o.SOCIAL_AUTH_GITHUB_TEAM_KEY != nil {
		return true
	}

	return false
}

// SetSOCIAL_AUTH_GITHUB_TEAM_KEY gets a reference to the given string and assigns it to the SOCIAL_AUTH_GITHUB_TEAM_KEY field.
func (o *InlineObject60) SetSOCIAL_AUTH_GITHUB_TEAM_KEY(v string) {
	o.SOCIAL_AUTH_GITHUB_TEAM_KEY = &v
}

// GetSOCIAL_AUTH_GITHUB_TEAM_MAP returns the SOCIAL_AUTH_GITHUB_TEAM_MAP field value if set, zero value otherwise.
func (o *InlineObject60) GetSOCIAL_AUTH_GITHUB_TEAM_MAP() map[string]interface{} {
	if o == nil || o.SOCIAL_AUTH_GITHUB_TEAM_MAP == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.SOCIAL_AUTH_GITHUB_TEAM_MAP
}

// GetSOCIAL_AUTH_GITHUB_TEAM_MAPOk returns a tuple with the SOCIAL_AUTH_GITHUB_TEAM_MAP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIAL_AUTH_GITHUB_TEAM_MAPOk() (*map[string]interface{}, bool) {
	if o == nil || o.SOCIAL_AUTH_GITHUB_TEAM_MAP == nil {
		return nil, false
	}
	return o.SOCIAL_AUTH_GITHUB_TEAM_MAP, true
}

// HasSOCIAL_AUTH_GITHUB_TEAM_MAP returns a boolean if a field has been set.
func (o *InlineObject60) HasSOCIAL_AUTH_GITHUB_TEAM_MAP() bool {
	if o != nil && o.SOCIAL_AUTH_GITHUB_TEAM_MAP != nil {
		return true
	}

	return false
}

// SetSOCIAL_AUTH_GITHUB_TEAM_MAP gets a reference to the given map[string]interface{} and assigns it to the SOCIAL_AUTH_GITHUB_TEAM_MAP field.
func (o *InlineObject60) SetSOCIAL_AUTH_GITHUB_TEAM_MAP(v map[string]interface{}) {
	o.SOCIAL_AUTH_GITHUB_TEAM_MAP = &v
}

// GetSOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP returns the SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP field value if set, zero value otherwise.
func (o *InlineObject60) GetSOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP() map[string]interface{} {
	if o == nil || o.SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP
}

// GetSOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAPOk returns a tuple with the SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAPOk() (*map[string]interface{}, bool) {
	if o == nil || o.SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP == nil {
		return nil, false
	}
	return o.SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP, true
}

// HasSOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP returns a boolean if a field has been set.
func (o *InlineObject60) HasSOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP() bool {
	if o != nil && o.SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP != nil {
		return true
	}

	return false
}

// SetSOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP gets a reference to the given map[string]interface{} and assigns it to the SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP field.
func (o *InlineObject60) SetSOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP(v map[string]interface{}) {
	o.SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP = &v
}

// GetSOCIAL_AUTH_GITHUB_TEAM_SECRET returns the SOCIAL_AUTH_GITHUB_TEAM_SECRET field value if set, zero value otherwise.
func (o *InlineObject60) GetSOCIAL_AUTH_GITHUB_TEAM_SECRET() string {
	if o == nil || o.SOCIAL_AUTH_GITHUB_TEAM_SECRET == nil {
		var ret string
		return ret
	}
	return *o.SOCIAL_AUTH_GITHUB_TEAM_SECRET
}

// GetSOCIAL_AUTH_GITHUB_TEAM_SECRETOk returns a tuple with the SOCIAL_AUTH_GITHUB_TEAM_SECRET field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIAL_AUTH_GITHUB_TEAM_SECRETOk() (*string, bool) {
	if o == nil || o.SOCIAL_AUTH_GITHUB_TEAM_SECRET == nil {
		return nil, false
	}
	return o.SOCIAL_AUTH_GITHUB_TEAM_SECRET, true
}

// HasSOCIAL_AUTH_GITHUB_TEAM_SECRET returns a boolean if a field has been set.
func (o *InlineObject60) HasSOCIAL_AUTH_GITHUB_TEAM_SECRET() bool {
	if o != nil && o.SOCIAL_AUTH_GITHUB_TEAM_SECRET != nil {
		return true
	}

	return false
}

// SetSOCIAL_AUTH_GITHUB_TEAM_SECRET gets a reference to the given string and assigns it to the SOCIAL_AUTH_GITHUB_TEAM_SECRET field.
func (o *InlineObject60) SetSOCIAL_AUTH_GITHUB_TEAM_SECRET(v string) {
	o.SOCIAL_AUTH_GITHUB_TEAM_SECRET = &v
}

// GetSOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP returns the SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP field value if set, zero value otherwise.
func (o *InlineObject60) GetSOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP() map[string]interface{} {
	if o == nil || o.SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP
}

// GetSOCIAL_AUTH_GITHUB_TEAM_TEAM_MAPOk returns a tuple with the SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIAL_AUTH_GITHUB_TEAM_TEAM_MAPOk() (*map[string]interface{}, bool) {
	if o == nil || o.SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP == nil {
		return nil, false
	}
	return o.SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP, true
}

// HasSOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP returns a boolean if a field has been set.
func (o *InlineObject60) HasSOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP() bool {
	if o != nil && o.SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP != nil {
		return true
	}

	return false
}

// SetSOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP gets a reference to the given map[string]interface{} and assigns it to the SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP field.
func (o *InlineObject60) SetSOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP(v map[string]interface{}) {
	o.SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP = &v
}

// GetSOCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTS returns the SOCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTS field value if set, zero value otherwise.
func (o *InlineObject60) GetSOCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTS() map[string]interface{} {
	if o == nil || o.SOCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTS == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.SOCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTS
}

// GetSOCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTSOk returns a tuple with the SOCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTSOk() (*map[string]interface{}, bool) {
	if o == nil || o.SOCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTS == nil {
		return nil, false
	}
	return o.SOCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTS, true
}

// HasSOCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTS returns a boolean if a field has been set.
func (o *InlineObject60) HasSOCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTS() bool {
	if o != nil && o.SOCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTS != nil {
		return true
	}

	return false
}

// SetSOCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTS gets a reference to the given map[string]interface{} and assigns it to the SOCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTS field.
func (o *InlineObject60) SetSOCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTS(v map[string]interface{}) {
	o.SOCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTS = &v
}

// GetSOCIALAUTHGOOGLEOAUTH2KEY returns the SOCIALAUTHGOOGLEOAUTH2KEY field value if set, zero value otherwise.
func (o *InlineObject60) GetSOCIALAUTHGOOGLEOAUTH2KEY() string {
	if o == nil || o.SOCIALAUTHGOOGLEOAUTH2KEY == nil {
		var ret string
		return ret
	}
	return *o.SOCIALAUTHGOOGLEOAUTH2KEY
}

// GetSOCIALAUTHGOOGLEOAUTH2KEYOk returns a tuple with the SOCIALAUTHGOOGLEOAUTH2KEY field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIALAUTHGOOGLEOAUTH2KEYOk() (*string, bool) {
	if o == nil || o.SOCIALAUTHGOOGLEOAUTH2KEY == nil {
		return nil, false
	}
	return o.SOCIALAUTHGOOGLEOAUTH2KEY, true
}

// HasSOCIALAUTHGOOGLEOAUTH2KEY returns a boolean if a field has been set.
func (o *InlineObject60) HasSOCIALAUTHGOOGLEOAUTH2KEY() bool {
	if o != nil && o.SOCIALAUTHGOOGLEOAUTH2KEY != nil {
		return true
	}

	return false
}

// SetSOCIALAUTHGOOGLEOAUTH2KEY gets a reference to the given string and assigns it to the SOCIALAUTHGOOGLEOAUTH2KEY field.
func (o *InlineObject60) SetSOCIALAUTHGOOGLEOAUTH2KEY(v string) {
	o.SOCIALAUTHGOOGLEOAUTH2KEY = &v
}

// GetSOCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAP returns the SOCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAP field value if set, zero value otherwise.
func (o *InlineObject60) GetSOCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAP() map[string]interface{} {
	if o == nil || o.SOCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAP == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.SOCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAP
}

// GetSOCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAPOk returns a tuple with the SOCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAPOk() (*map[string]interface{}, bool) {
	if o == nil || o.SOCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAP == nil {
		return nil, false
	}
	return o.SOCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAP, true
}

// HasSOCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAP returns a boolean if a field has been set.
func (o *InlineObject60) HasSOCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAP() bool {
	if o != nil && o.SOCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAP != nil {
		return true
	}

	return false
}

// SetSOCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAP gets a reference to the given map[string]interface{} and assigns it to the SOCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAP field.
func (o *InlineObject60) SetSOCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAP(v map[string]interface{}) {
	o.SOCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAP = &v
}

// GetSOCIALAUTHGOOGLEOAUTH2SECRET returns the SOCIALAUTHGOOGLEOAUTH2SECRET field value if set, zero value otherwise.
func (o *InlineObject60) GetSOCIALAUTHGOOGLEOAUTH2SECRET() string {
	if o == nil || o.SOCIALAUTHGOOGLEOAUTH2SECRET == nil {
		var ret string
		return ret
	}
	return *o.SOCIALAUTHGOOGLEOAUTH2SECRET
}

// GetSOCIALAUTHGOOGLEOAUTH2SECRETOk returns a tuple with the SOCIALAUTHGOOGLEOAUTH2SECRET field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIALAUTHGOOGLEOAUTH2SECRETOk() (*string, bool) {
	if o == nil || o.SOCIALAUTHGOOGLEOAUTH2SECRET == nil {
		return nil, false
	}
	return o.SOCIALAUTHGOOGLEOAUTH2SECRET, true
}

// HasSOCIALAUTHGOOGLEOAUTH2SECRET returns a boolean if a field has been set.
func (o *InlineObject60) HasSOCIALAUTHGOOGLEOAUTH2SECRET() bool {
	if o != nil && o.SOCIALAUTHGOOGLEOAUTH2SECRET != nil {
		return true
	}

	return false
}

// SetSOCIALAUTHGOOGLEOAUTH2SECRET gets a reference to the given string and assigns it to the SOCIALAUTHGOOGLEOAUTH2SECRET field.
func (o *InlineObject60) SetSOCIALAUTHGOOGLEOAUTH2SECRET(v string) {
	o.SOCIALAUTHGOOGLEOAUTH2SECRET = &v
}

// GetSOCIALAUTHGOOGLEOAUTH2TEAMMAP returns the SOCIALAUTHGOOGLEOAUTH2TEAMMAP field value if set, zero value otherwise.
func (o *InlineObject60) GetSOCIALAUTHGOOGLEOAUTH2TEAMMAP() map[string]interface{} {
	if o == nil || o.SOCIALAUTHGOOGLEOAUTH2TEAMMAP == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.SOCIALAUTHGOOGLEOAUTH2TEAMMAP
}

// GetSOCIALAUTHGOOGLEOAUTH2TEAMMAPOk returns a tuple with the SOCIALAUTHGOOGLEOAUTH2TEAMMAP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIALAUTHGOOGLEOAUTH2TEAMMAPOk() (*map[string]interface{}, bool) {
	if o == nil || o.SOCIALAUTHGOOGLEOAUTH2TEAMMAP == nil {
		return nil, false
	}
	return o.SOCIALAUTHGOOGLEOAUTH2TEAMMAP, true
}

// HasSOCIALAUTHGOOGLEOAUTH2TEAMMAP returns a boolean if a field has been set.
func (o *InlineObject60) HasSOCIALAUTHGOOGLEOAUTH2TEAMMAP() bool {
	if o != nil && o.SOCIALAUTHGOOGLEOAUTH2TEAMMAP != nil {
		return true
	}

	return false
}

// SetSOCIALAUTHGOOGLEOAUTH2TEAMMAP gets a reference to the given map[string]interface{} and assigns it to the SOCIALAUTHGOOGLEOAUTH2TEAMMAP field.
func (o *InlineObject60) SetSOCIALAUTHGOOGLEOAUTH2TEAMMAP(v map[string]interface{}) {
	o.SOCIALAUTHGOOGLEOAUTH2TEAMMAP = &v
}

// GetSOCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINS returns the SOCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINS field value if set, zero value otherwise.
func (o *InlineObject60) GetSOCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINS() []string {
	if o == nil || o.SOCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINS == nil {
		var ret []string
		return ret
	}
	return *o.SOCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINS
}

// GetSOCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINSOk returns a tuple with the SOCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINSOk() (*[]string, bool) {
	if o == nil || o.SOCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINS == nil {
		return nil, false
	}
	return o.SOCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINS, true
}

// HasSOCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINS returns a boolean if a field has been set.
func (o *InlineObject60) HasSOCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINS() bool {
	if o != nil && o.SOCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINS != nil {
		return true
	}

	return false
}

// SetSOCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINS gets a reference to the given []string and assigns it to the SOCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINS field.
func (o *InlineObject60) SetSOCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINS(v []string) {
	o.SOCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINS = &v
}

// GetSOCIAL_AUTH_ORGANIZATION_MAP returns the SOCIAL_AUTH_ORGANIZATION_MAP field value if set, zero value otherwise.
func (o *InlineObject60) GetSOCIAL_AUTH_ORGANIZATION_MAP() map[string]interface{} {
	if o == nil || o.SOCIAL_AUTH_ORGANIZATION_MAP == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.SOCIAL_AUTH_ORGANIZATION_MAP
}

// GetSOCIAL_AUTH_ORGANIZATION_MAPOk returns a tuple with the SOCIAL_AUTH_ORGANIZATION_MAP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIAL_AUTH_ORGANIZATION_MAPOk() (*map[string]interface{}, bool) {
	if o == nil || o.SOCIAL_AUTH_ORGANIZATION_MAP == nil {
		return nil, false
	}
	return o.SOCIAL_AUTH_ORGANIZATION_MAP, true
}

// HasSOCIAL_AUTH_ORGANIZATION_MAP returns a boolean if a field has been set.
func (o *InlineObject60) HasSOCIAL_AUTH_ORGANIZATION_MAP() bool {
	if o != nil && o.SOCIAL_AUTH_ORGANIZATION_MAP != nil {
		return true
	}

	return false
}

// SetSOCIAL_AUTH_ORGANIZATION_MAP gets a reference to the given map[string]interface{} and assigns it to the SOCIAL_AUTH_ORGANIZATION_MAP field.
func (o *InlineObject60) SetSOCIAL_AUTH_ORGANIZATION_MAP(v map[string]interface{}) {
	o.SOCIAL_AUTH_ORGANIZATION_MAP = &v
}

// GetSOCIAL_AUTH_SAML_ENABLED_IDPS returns the SOCIAL_AUTH_SAML_ENABLED_IDPS field value if set, zero value otherwise.
func (o *InlineObject60) GetSOCIAL_AUTH_SAML_ENABLED_IDPS() map[string]interface{} {
	if o == nil || o.SOCIAL_AUTH_SAML_ENABLED_IDPS == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.SOCIAL_AUTH_SAML_ENABLED_IDPS
}

// GetSOCIAL_AUTH_SAML_ENABLED_IDPSOk returns a tuple with the SOCIAL_AUTH_SAML_ENABLED_IDPS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIAL_AUTH_SAML_ENABLED_IDPSOk() (*map[string]interface{}, bool) {
	if o == nil || o.SOCIAL_AUTH_SAML_ENABLED_IDPS == nil {
		return nil, false
	}
	return o.SOCIAL_AUTH_SAML_ENABLED_IDPS, true
}

// HasSOCIAL_AUTH_SAML_ENABLED_IDPS returns a boolean if a field has been set.
func (o *InlineObject60) HasSOCIAL_AUTH_SAML_ENABLED_IDPS() bool {
	if o != nil && o.SOCIAL_AUTH_SAML_ENABLED_IDPS != nil {
		return true
	}

	return false
}

// SetSOCIAL_AUTH_SAML_ENABLED_IDPS gets a reference to the given map[string]interface{} and assigns it to the SOCIAL_AUTH_SAML_ENABLED_IDPS field.
func (o *InlineObject60) SetSOCIAL_AUTH_SAML_ENABLED_IDPS(v map[string]interface{}) {
	o.SOCIAL_AUTH_SAML_ENABLED_IDPS = &v
}

// GetSOCIAL_AUTH_SAML_EXTRA_DATA returns the SOCIAL_AUTH_SAML_EXTRA_DATA field value if set, zero value otherwise.
func (o *InlineObject60) GetSOCIAL_AUTH_SAML_EXTRA_DATA() []string {
	if o == nil || o.SOCIAL_AUTH_SAML_EXTRA_DATA == nil {
		var ret []string
		return ret
	}
	return *o.SOCIAL_AUTH_SAML_EXTRA_DATA
}

// GetSOCIAL_AUTH_SAML_EXTRA_DATAOk returns a tuple with the SOCIAL_AUTH_SAML_EXTRA_DATA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIAL_AUTH_SAML_EXTRA_DATAOk() (*[]string, bool) {
	if o == nil || o.SOCIAL_AUTH_SAML_EXTRA_DATA == nil {
		return nil, false
	}
	return o.SOCIAL_AUTH_SAML_EXTRA_DATA, true
}

// HasSOCIAL_AUTH_SAML_EXTRA_DATA returns a boolean if a field has been set.
func (o *InlineObject60) HasSOCIAL_AUTH_SAML_EXTRA_DATA() bool {
	if o != nil && o.SOCIAL_AUTH_SAML_EXTRA_DATA != nil {
		return true
	}

	return false
}

// SetSOCIAL_AUTH_SAML_EXTRA_DATA gets a reference to the given []string and assigns it to the SOCIAL_AUTH_SAML_EXTRA_DATA field.
func (o *InlineObject60) SetSOCIAL_AUTH_SAML_EXTRA_DATA(v []string) {
	o.SOCIAL_AUTH_SAML_EXTRA_DATA = &v
}

// GetSOCIAL_AUTH_SAML_ORGANIZATION_ATTR returns the SOCIAL_AUTH_SAML_ORGANIZATION_ATTR field value if set, zero value otherwise.
func (o *InlineObject60) GetSOCIAL_AUTH_SAML_ORGANIZATION_ATTR() map[string]interface{} {
	if o == nil || o.SOCIAL_AUTH_SAML_ORGANIZATION_ATTR == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.SOCIAL_AUTH_SAML_ORGANIZATION_ATTR
}

// GetSOCIAL_AUTH_SAML_ORGANIZATION_ATTROk returns a tuple with the SOCIAL_AUTH_SAML_ORGANIZATION_ATTR field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIAL_AUTH_SAML_ORGANIZATION_ATTROk() (*map[string]interface{}, bool) {
	if o == nil || o.SOCIAL_AUTH_SAML_ORGANIZATION_ATTR == nil {
		return nil, false
	}
	return o.SOCIAL_AUTH_SAML_ORGANIZATION_ATTR, true
}

// HasSOCIAL_AUTH_SAML_ORGANIZATION_ATTR returns a boolean if a field has been set.
func (o *InlineObject60) HasSOCIAL_AUTH_SAML_ORGANIZATION_ATTR() bool {
	if o != nil && o.SOCIAL_AUTH_SAML_ORGANIZATION_ATTR != nil {
		return true
	}

	return false
}

// SetSOCIAL_AUTH_SAML_ORGANIZATION_ATTR gets a reference to the given map[string]interface{} and assigns it to the SOCIAL_AUTH_SAML_ORGANIZATION_ATTR field.
func (o *InlineObject60) SetSOCIAL_AUTH_SAML_ORGANIZATION_ATTR(v map[string]interface{}) {
	o.SOCIAL_AUTH_SAML_ORGANIZATION_ATTR = &v
}

// GetSOCIAL_AUTH_SAML_ORGANIZATION_MAP returns the SOCIAL_AUTH_SAML_ORGANIZATION_MAP field value if set, zero value otherwise.
func (o *InlineObject60) GetSOCIAL_AUTH_SAML_ORGANIZATION_MAP() map[string]interface{} {
	if o == nil || o.SOCIAL_AUTH_SAML_ORGANIZATION_MAP == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.SOCIAL_AUTH_SAML_ORGANIZATION_MAP
}

// GetSOCIAL_AUTH_SAML_ORGANIZATION_MAPOk returns a tuple with the SOCIAL_AUTH_SAML_ORGANIZATION_MAP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIAL_AUTH_SAML_ORGANIZATION_MAPOk() (*map[string]interface{}, bool) {
	if o == nil || o.SOCIAL_AUTH_SAML_ORGANIZATION_MAP == nil {
		return nil, false
	}
	return o.SOCIAL_AUTH_SAML_ORGANIZATION_MAP, true
}

// HasSOCIAL_AUTH_SAML_ORGANIZATION_MAP returns a boolean if a field has been set.
func (o *InlineObject60) HasSOCIAL_AUTH_SAML_ORGANIZATION_MAP() bool {
	if o != nil && o.SOCIAL_AUTH_SAML_ORGANIZATION_MAP != nil {
		return true
	}

	return false
}

// SetSOCIAL_AUTH_SAML_ORGANIZATION_MAP gets a reference to the given map[string]interface{} and assigns it to the SOCIAL_AUTH_SAML_ORGANIZATION_MAP field.
func (o *InlineObject60) SetSOCIAL_AUTH_SAML_ORGANIZATION_MAP(v map[string]interface{}) {
	o.SOCIAL_AUTH_SAML_ORGANIZATION_MAP = &v
}

// GetSOCIAL_AUTH_SAML_ORG_INFO returns the SOCIAL_AUTH_SAML_ORG_INFO field value
func (o *InlineObject60) GetSOCIAL_AUTH_SAML_ORG_INFO() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}

	return o.SOCIAL_AUTH_SAML_ORG_INFO
}

// GetSOCIAL_AUTH_SAML_ORG_INFOOk returns a tuple with the SOCIAL_AUTH_SAML_ORG_INFO field value
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIAL_AUTH_SAML_ORG_INFOOk() (*map[string]interface{}, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SOCIAL_AUTH_SAML_ORG_INFO, true
}

// SetSOCIAL_AUTH_SAML_ORG_INFO sets field value
func (o *InlineObject60) SetSOCIAL_AUTH_SAML_ORG_INFO(v map[string]interface{}) {
	o.SOCIAL_AUTH_SAML_ORG_INFO = v
}

// GetSOCIAL_AUTH_SAML_SECURITY_CONFIG returns the SOCIAL_AUTH_SAML_SECURITY_CONFIG field value if set, zero value otherwise.
func (o *InlineObject60) GetSOCIAL_AUTH_SAML_SECURITY_CONFIG() map[string]interface{} {
	if o == nil || o.SOCIAL_AUTH_SAML_SECURITY_CONFIG == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.SOCIAL_AUTH_SAML_SECURITY_CONFIG
}

// GetSOCIAL_AUTH_SAML_SECURITY_CONFIGOk returns a tuple with the SOCIAL_AUTH_SAML_SECURITY_CONFIG field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIAL_AUTH_SAML_SECURITY_CONFIGOk() (*map[string]interface{}, bool) {
	if o == nil || o.SOCIAL_AUTH_SAML_SECURITY_CONFIG == nil {
		return nil, false
	}
	return o.SOCIAL_AUTH_SAML_SECURITY_CONFIG, true
}

// HasSOCIAL_AUTH_SAML_SECURITY_CONFIG returns a boolean if a field has been set.
func (o *InlineObject60) HasSOCIAL_AUTH_SAML_SECURITY_CONFIG() bool {
	if o != nil && o.SOCIAL_AUTH_SAML_SECURITY_CONFIG != nil {
		return true
	}

	return false
}

// SetSOCIAL_AUTH_SAML_SECURITY_CONFIG gets a reference to the given map[string]interface{} and assigns it to the SOCIAL_AUTH_SAML_SECURITY_CONFIG field.
func (o *InlineObject60) SetSOCIAL_AUTH_SAML_SECURITY_CONFIG(v map[string]interface{}) {
	o.SOCIAL_AUTH_SAML_SECURITY_CONFIG = &v
}

// GetSOCIAL_AUTH_SAML_SP_ENTITY_ID returns the SOCIAL_AUTH_SAML_SP_ENTITY_ID field value if set, zero value otherwise.
func (o *InlineObject60) GetSOCIAL_AUTH_SAML_SP_ENTITY_ID() string {
	if o == nil || o.SOCIAL_AUTH_SAML_SP_ENTITY_ID == nil {
		var ret string
		return ret
	}
	return *o.SOCIAL_AUTH_SAML_SP_ENTITY_ID
}

// GetSOCIAL_AUTH_SAML_SP_ENTITY_IDOk returns a tuple with the SOCIAL_AUTH_SAML_SP_ENTITY_ID field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIAL_AUTH_SAML_SP_ENTITY_IDOk() (*string, bool) {
	if o == nil || o.SOCIAL_AUTH_SAML_SP_ENTITY_ID == nil {
		return nil, false
	}
	return o.SOCIAL_AUTH_SAML_SP_ENTITY_ID, true
}

// HasSOCIAL_AUTH_SAML_SP_ENTITY_ID returns a boolean if a field has been set.
func (o *InlineObject60) HasSOCIAL_AUTH_SAML_SP_ENTITY_ID() bool {
	if o != nil && o.SOCIAL_AUTH_SAML_SP_ENTITY_ID != nil {
		return true
	}

	return false
}

// SetSOCIAL_AUTH_SAML_SP_ENTITY_ID gets a reference to the given string and assigns it to the SOCIAL_AUTH_SAML_SP_ENTITY_ID field.
func (o *InlineObject60) SetSOCIAL_AUTH_SAML_SP_ENTITY_ID(v string) {
	o.SOCIAL_AUTH_SAML_SP_ENTITY_ID = &v
}

// GetSOCIAL_AUTH_SAML_SP_EXTRA returns the SOCIAL_AUTH_SAML_SP_EXTRA field value if set, zero value otherwise.
func (o *InlineObject60) GetSOCIAL_AUTH_SAML_SP_EXTRA() map[string]interface{} {
	if o == nil || o.SOCIAL_AUTH_SAML_SP_EXTRA == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.SOCIAL_AUTH_SAML_SP_EXTRA
}

// GetSOCIAL_AUTH_SAML_SP_EXTRAOk returns a tuple with the SOCIAL_AUTH_SAML_SP_EXTRA field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIAL_AUTH_SAML_SP_EXTRAOk() (*map[string]interface{}, bool) {
	if o == nil || o.SOCIAL_AUTH_SAML_SP_EXTRA == nil {
		return nil, false
	}
	return o.SOCIAL_AUTH_SAML_SP_EXTRA, true
}

// HasSOCIAL_AUTH_SAML_SP_EXTRA returns a boolean if a field has been set.
func (o *InlineObject60) HasSOCIAL_AUTH_SAML_SP_EXTRA() bool {
	if o != nil && o.SOCIAL_AUTH_SAML_SP_EXTRA != nil {
		return true
	}

	return false
}

// SetSOCIAL_AUTH_SAML_SP_EXTRA gets a reference to the given map[string]interface{} and assigns it to the SOCIAL_AUTH_SAML_SP_EXTRA field.
func (o *InlineObject60) SetSOCIAL_AUTH_SAML_SP_EXTRA(v map[string]interface{}) {
	o.SOCIAL_AUTH_SAML_SP_EXTRA = &v
}

// GetSOCIAL_AUTH_SAML_SP_PRIVATE_KEY returns the SOCIAL_AUTH_SAML_SP_PRIVATE_KEY field value
func (o *InlineObject60) GetSOCIAL_AUTH_SAML_SP_PRIVATE_KEY() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.SOCIAL_AUTH_SAML_SP_PRIVATE_KEY
}

// GetSOCIAL_AUTH_SAML_SP_PRIVATE_KEYOk returns a tuple with the SOCIAL_AUTH_SAML_SP_PRIVATE_KEY field value
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIAL_AUTH_SAML_SP_PRIVATE_KEYOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SOCIAL_AUTH_SAML_SP_PRIVATE_KEY, true
}

// SetSOCIAL_AUTH_SAML_SP_PRIVATE_KEY sets field value
func (o *InlineObject60) SetSOCIAL_AUTH_SAML_SP_PRIVATE_KEY(v string) {
	o.SOCIAL_AUTH_SAML_SP_PRIVATE_KEY = v
}

// GetSOCIAL_AUTH_SAML_SP_PUBLIC_CERT returns the SOCIAL_AUTH_SAML_SP_PUBLIC_CERT field value
func (o *InlineObject60) GetSOCIAL_AUTH_SAML_SP_PUBLIC_CERT() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.SOCIAL_AUTH_SAML_SP_PUBLIC_CERT
}

// GetSOCIAL_AUTH_SAML_SP_PUBLIC_CERTOk returns a tuple with the SOCIAL_AUTH_SAML_SP_PUBLIC_CERT field value
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIAL_AUTH_SAML_SP_PUBLIC_CERTOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SOCIAL_AUTH_SAML_SP_PUBLIC_CERT, true
}

// SetSOCIAL_AUTH_SAML_SP_PUBLIC_CERT sets field value
func (o *InlineObject60) SetSOCIAL_AUTH_SAML_SP_PUBLIC_CERT(v string) {
	o.SOCIAL_AUTH_SAML_SP_PUBLIC_CERT = v
}

// GetSOCIAL_AUTH_SAML_SUPPORT_CONTACT returns the SOCIAL_AUTH_SAML_SUPPORT_CONTACT field value
func (o *InlineObject60) GetSOCIAL_AUTH_SAML_SUPPORT_CONTACT() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}

	return o.SOCIAL_AUTH_SAML_SUPPORT_CONTACT
}

// GetSOCIAL_AUTH_SAML_SUPPORT_CONTACTOk returns a tuple with the SOCIAL_AUTH_SAML_SUPPORT_CONTACT field value
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIAL_AUTH_SAML_SUPPORT_CONTACTOk() (*map[string]interface{}, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SOCIAL_AUTH_SAML_SUPPORT_CONTACT, true
}

// SetSOCIAL_AUTH_SAML_SUPPORT_CONTACT sets field value
func (o *InlineObject60) SetSOCIAL_AUTH_SAML_SUPPORT_CONTACT(v map[string]interface{}) {
	o.SOCIAL_AUTH_SAML_SUPPORT_CONTACT = v
}

// GetSOCIAL_AUTH_SAML_TEAM_ATTR returns the SOCIAL_AUTH_SAML_TEAM_ATTR field value if set, zero value otherwise.
func (o *InlineObject60) GetSOCIAL_AUTH_SAML_TEAM_ATTR() map[string]interface{} {
	if o == nil || o.SOCIAL_AUTH_SAML_TEAM_ATTR == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.SOCIAL_AUTH_SAML_TEAM_ATTR
}

// GetSOCIAL_AUTH_SAML_TEAM_ATTROk returns a tuple with the SOCIAL_AUTH_SAML_TEAM_ATTR field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIAL_AUTH_SAML_TEAM_ATTROk() (*map[string]interface{}, bool) {
	if o == nil || o.SOCIAL_AUTH_SAML_TEAM_ATTR == nil {
		return nil, false
	}
	return o.SOCIAL_AUTH_SAML_TEAM_ATTR, true
}

// HasSOCIAL_AUTH_SAML_TEAM_ATTR returns a boolean if a field has been set.
func (o *InlineObject60) HasSOCIAL_AUTH_SAML_TEAM_ATTR() bool {
	if o != nil && o.SOCIAL_AUTH_SAML_TEAM_ATTR != nil {
		return true
	}

	return false
}

// SetSOCIAL_AUTH_SAML_TEAM_ATTR gets a reference to the given map[string]interface{} and assigns it to the SOCIAL_AUTH_SAML_TEAM_ATTR field.
func (o *InlineObject60) SetSOCIAL_AUTH_SAML_TEAM_ATTR(v map[string]interface{}) {
	o.SOCIAL_AUTH_SAML_TEAM_ATTR = &v
}

// GetSOCIAL_AUTH_SAML_TEAM_MAP returns the SOCIAL_AUTH_SAML_TEAM_MAP field value if set, zero value otherwise.
func (o *InlineObject60) GetSOCIAL_AUTH_SAML_TEAM_MAP() map[string]interface{} {
	if o == nil || o.SOCIAL_AUTH_SAML_TEAM_MAP == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.SOCIAL_AUTH_SAML_TEAM_MAP
}

// GetSOCIAL_AUTH_SAML_TEAM_MAPOk returns a tuple with the SOCIAL_AUTH_SAML_TEAM_MAP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIAL_AUTH_SAML_TEAM_MAPOk() (*map[string]interface{}, bool) {
	if o == nil || o.SOCIAL_AUTH_SAML_TEAM_MAP == nil {
		return nil, false
	}
	return o.SOCIAL_AUTH_SAML_TEAM_MAP, true
}

// HasSOCIAL_AUTH_SAML_TEAM_MAP returns a boolean if a field has been set.
func (o *InlineObject60) HasSOCIAL_AUTH_SAML_TEAM_MAP() bool {
	if o != nil && o.SOCIAL_AUTH_SAML_TEAM_MAP != nil {
		return true
	}

	return false
}

// SetSOCIAL_AUTH_SAML_TEAM_MAP gets a reference to the given map[string]interface{} and assigns it to the SOCIAL_AUTH_SAML_TEAM_MAP field.
func (o *InlineObject60) SetSOCIAL_AUTH_SAML_TEAM_MAP(v map[string]interface{}) {
	o.SOCIAL_AUTH_SAML_TEAM_MAP = &v
}

// GetSOCIAL_AUTH_SAML_TECHNICAL_CONTACT returns the SOCIAL_AUTH_SAML_TECHNICAL_CONTACT field value
func (o *InlineObject60) GetSOCIAL_AUTH_SAML_TECHNICAL_CONTACT() map[string]interface{} {
	if o == nil  {
		var ret map[string]interface{}
		return ret
	}

	return o.SOCIAL_AUTH_SAML_TECHNICAL_CONTACT
}

// GetSOCIAL_AUTH_SAML_TECHNICAL_CONTACTOk returns a tuple with the SOCIAL_AUTH_SAML_TECHNICAL_CONTACT field value
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIAL_AUTH_SAML_TECHNICAL_CONTACTOk() (*map[string]interface{}, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.SOCIAL_AUTH_SAML_TECHNICAL_CONTACT, true
}

// SetSOCIAL_AUTH_SAML_TECHNICAL_CONTACT sets field value
func (o *InlineObject60) SetSOCIAL_AUTH_SAML_TECHNICAL_CONTACT(v map[string]interface{}) {
	o.SOCIAL_AUTH_SAML_TECHNICAL_CONTACT = v
}

// GetSOCIAL_AUTH_TEAM_MAP returns the SOCIAL_AUTH_TEAM_MAP field value if set, zero value otherwise.
func (o *InlineObject60) GetSOCIAL_AUTH_TEAM_MAP() map[string]interface{} {
	if o == nil || o.SOCIAL_AUTH_TEAM_MAP == nil {
		var ret map[string]interface{}
		return ret
	}
	return *o.SOCIAL_AUTH_TEAM_MAP
}

// GetSOCIAL_AUTH_TEAM_MAPOk returns a tuple with the SOCIAL_AUTH_TEAM_MAP field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIAL_AUTH_TEAM_MAPOk() (*map[string]interface{}, bool) {
	if o == nil || o.SOCIAL_AUTH_TEAM_MAP == nil {
		return nil, false
	}
	return o.SOCIAL_AUTH_TEAM_MAP, true
}

// HasSOCIAL_AUTH_TEAM_MAP returns a boolean if a field has been set.
func (o *InlineObject60) HasSOCIAL_AUTH_TEAM_MAP() bool {
	if o != nil && o.SOCIAL_AUTH_TEAM_MAP != nil {
		return true
	}

	return false
}

// SetSOCIAL_AUTH_TEAM_MAP gets a reference to the given map[string]interface{} and assigns it to the SOCIAL_AUTH_TEAM_MAP field.
func (o *InlineObject60) SetSOCIAL_AUTH_TEAM_MAP(v map[string]interface{}) {
	o.SOCIAL_AUTH_TEAM_MAP = &v
}

// GetSOCIAL_AUTH_USER_FIELDS returns the SOCIAL_AUTH_USER_FIELDS field value if set, zero value otherwise.
func (o *InlineObject60) GetSOCIAL_AUTH_USER_FIELDS() []string {
	if o == nil || o.SOCIAL_AUTH_USER_FIELDS == nil {
		var ret []string
		return ret
	}
	return *o.SOCIAL_AUTH_USER_FIELDS
}

// GetSOCIAL_AUTH_USER_FIELDSOk returns a tuple with the SOCIAL_AUTH_USER_FIELDS field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSOCIAL_AUTH_USER_FIELDSOk() (*[]string, bool) {
	if o == nil || o.SOCIAL_AUTH_USER_FIELDS == nil {
		return nil, false
	}
	return o.SOCIAL_AUTH_USER_FIELDS, true
}

// HasSOCIAL_AUTH_USER_FIELDS returns a boolean if a field has been set.
func (o *InlineObject60) HasSOCIAL_AUTH_USER_FIELDS() bool {
	if o != nil && o.SOCIAL_AUTH_USER_FIELDS != nil {
		return true
	}

	return false
}

// SetSOCIAL_AUTH_USER_FIELDS gets a reference to the given []string and assigns it to the SOCIAL_AUTH_USER_FIELDS field.
func (o *InlineObject60) SetSOCIAL_AUTH_USER_FIELDS(v []string) {
	o.SOCIAL_AUTH_USER_FIELDS = &v
}

// GetSTDOUT_MAX_BYTES_DISPLAY returns the STDOUT_MAX_BYTES_DISPLAY field value
func (o *InlineObject60) GetSTDOUT_MAX_BYTES_DISPLAY() int32 {
	if o == nil  {
		var ret int32
		return ret
	}

	return o.STDOUT_MAX_BYTES_DISPLAY
}

// GetSTDOUT_MAX_BYTES_DISPLAYOk returns a tuple with the STDOUT_MAX_BYTES_DISPLAY field value
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetSTDOUT_MAX_BYTES_DISPLAYOk() (*int32, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.STDOUT_MAX_BYTES_DISPLAY, true
}

// SetSTDOUT_MAX_BYTES_DISPLAY sets field value
func (o *InlineObject60) SetSTDOUT_MAX_BYTES_DISPLAY(v int32) {
	o.STDOUT_MAX_BYTES_DISPLAY = v
}

// GetTACACSPLUS_AUTH_PROTOCOL returns the TACACSPLUS_AUTH_PROTOCOL field value if set, zero value otherwise.
func (o *InlineObject60) GetTACACSPLUS_AUTH_PROTOCOL() string {
	if o == nil || o.TACACSPLUS_AUTH_PROTOCOL == nil {
		var ret string
		return ret
	}
	return *o.TACACSPLUS_AUTH_PROTOCOL
}

// GetTACACSPLUS_AUTH_PROTOCOLOk returns a tuple with the TACACSPLUS_AUTH_PROTOCOL field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetTACACSPLUS_AUTH_PROTOCOLOk() (*string, bool) {
	if o == nil || o.TACACSPLUS_AUTH_PROTOCOL == nil {
		return nil, false
	}
	return o.TACACSPLUS_AUTH_PROTOCOL, true
}

// HasTACACSPLUS_AUTH_PROTOCOL returns a boolean if a field has been set.
func (o *InlineObject60) HasTACACSPLUS_AUTH_PROTOCOL() bool {
	if o != nil && o.TACACSPLUS_AUTH_PROTOCOL != nil {
		return true
	}

	return false
}

// SetTACACSPLUS_AUTH_PROTOCOL gets a reference to the given string and assigns it to the TACACSPLUS_AUTH_PROTOCOL field.
func (o *InlineObject60) SetTACACSPLUS_AUTH_PROTOCOL(v string) {
	o.TACACSPLUS_AUTH_PROTOCOL = &v
}

// GetTACACSPLUS_HOST returns the TACACSPLUS_HOST field value if set, zero value otherwise.
func (o *InlineObject60) GetTACACSPLUS_HOST() string {
	if o == nil || o.TACACSPLUS_HOST == nil {
		var ret string
		return ret
	}
	return *o.TACACSPLUS_HOST
}

// GetTACACSPLUS_HOSTOk returns a tuple with the TACACSPLUS_HOST field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetTACACSPLUS_HOSTOk() (*string, bool) {
	if o == nil || o.TACACSPLUS_HOST == nil {
		return nil, false
	}
	return o.TACACSPLUS_HOST, true
}

// HasTACACSPLUS_HOST returns a boolean if a field has been set.
func (o *InlineObject60) HasTACACSPLUS_HOST() bool {
	if o != nil && o.TACACSPLUS_HOST != nil {
		return true
	}

	return false
}

// SetTACACSPLUS_HOST gets a reference to the given string and assigns it to the TACACSPLUS_HOST field.
func (o *InlineObject60) SetTACACSPLUS_HOST(v string) {
	o.TACACSPLUS_HOST = &v
}

// GetTACACSPLUS_PORT returns the TACACSPLUS_PORT field value if set, zero value otherwise.
func (o *InlineObject60) GetTACACSPLUS_PORT() int32 {
	if o == nil || o.TACACSPLUS_PORT == nil {
		var ret int32
		return ret
	}
	return *o.TACACSPLUS_PORT
}

// GetTACACSPLUS_PORTOk returns a tuple with the TACACSPLUS_PORT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetTACACSPLUS_PORTOk() (*int32, bool) {
	if o == nil || o.TACACSPLUS_PORT == nil {
		return nil, false
	}
	return o.TACACSPLUS_PORT, true
}

// HasTACACSPLUS_PORT returns a boolean if a field has been set.
func (o *InlineObject60) HasTACACSPLUS_PORT() bool {
	if o != nil && o.TACACSPLUS_PORT != nil {
		return true
	}

	return false
}

// SetTACACSPLUS_PORT gets a reference to the given int32 and assigns it to the TACACSPLUS_PORT field.
func (o *InlineObject60) SetTACACSPLUS_PORT(v int32) {
	o.TACACSPLUS_PORT = &v
}

// GetTACACSPLUS_SECRET returns the TACACSPLUS_SECRET field value if set, zero value otherwise.
func (o *InlineObject60) GetTACACSPLUS_SECRET() string {
	if o == nil || o.TACACSPLUS_SECRET == nil {
		var ret string
		return ret
	}
	return *o.TACACSPLUS_SECRET
}

// GetTACACSPLUS_SECRETOk returns a tuple with the TACACSPLUS_SECRET field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetTACACSPLUS_SECRETOk() (*string, bool) {
	if o == nil || o.TACACSPLUS_SECRET == nil {
		return nil, false
	}
	return o.TACACSPLUS_SECRET, true
}

// HasTACACSPLUS_SECRET returns a boolean if a field has been set.
func (o *InlineObject60) HasTACACSPLUS_SECRET() bool {
	if o != nil && o.TACACSPLUS_SECRET != nil {
		return true
	}

	return false
}

// SetTACACSPLUS_SECRET gets a reference to the given string and assigns it to the TACACSPLUS_SECRET field.
func (o *InlineObject60) SetTACACSPLUS_SECRET(v string) {
	o.TACACSPLUS_SECRET = &v
}

// GetTACACSPLUS_SESSION_TIMEOUT returns the TACACSPLUS_SESSION_TIMEOUT field value if set, zero value otherwise.
func (o *InlineObject60) GetTACACSPLUS_SESSION_TIMEOUT() int32 {
	if o == nil || o.TACACSPLUS_SESSION_TIMEOUT == nil {
		var ret int32
		return ret
	}
	return *o.TACACSPLUS_SESSION_TIMEOUT
}

// GetTACACSPLUS_SESSION_TIMEOUTOk returns a tuple with the TACACSPLUS_SESSION_TIMEOUT field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetTACACSPLUS_SESSION_TIMEOUTOk() (*int32, bool) {
	if o == nil || o.TACACSPLUS_SESSION_TIMEOUT == nil {
		return nil, false
	}
	return o.TACACSPLUS_SESSION_TIMEOUT, true
}

// HasTACACSPLUS_SESSION_TIMEOUT returns a boolean if a field has been set.
func (o *InlineObject60) HasTACACSPLUS_SESSION_TIMEOUT() bool {
	if o != nil && o.TACACSPLUS_SESSION_TIMEOUT != nil {
		return true
	}

	return false
}

// SetTACACSPLUS_SESSION_TIMEOUT gets a reference to the given int32 and assigns it to the TACACSPLUS_SESSION_TIMEOUT field.
func (o *InlineObject60) SetTACACSPLUS_SESSION_TIMEOUT(v int32) {
	o.TACACSPLUS_SESSION_TIMEOUT = &v
}

// GetTOWER_URL_BASE returns the TOWER_URL_BASE field value
func (o *InlineObject60) GetTOWER_URL_BASE() string {
	if o == nil  {
		var ret string
		return ret
	}

	return o.TOWER_URL_BASE
}

// GetTOWER_URL_BASEOk returns a tuple with the TOWER_URL_BASE field value
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetTOWER_URL_BASEOk() (*string, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.TOWER_URL_BASE, true
}

// SetTOWER_URL_BASE sets field value
func (o *InlineObject60) SetTOWER_URL_BASE(v string) {
	o.TOWER_URL_BASE = v
}

// GetUI_LIVE_UPDATES_ENABLED returns the UI_LIVE_UPDATES_ENABLED field value
func (o *InlineObject60) GetUI_LIVE_UPDATES_ENABLED() bool {
	if o == nil  {
		var ret bool
		return ret
	}

	return o.UI_LIVE_UPDATES_ENABLED
}

// GetUI_LIVE_UPDATES_ENABLEDOk returns a tuple with the UI_LIVE_UPDATES_ENABLED field value
// and a boolean to check if the value has been set.
func (o *InlineObject60) GetUI_LIVE_UPDATES_ENABLEDOk() (*bool, bool) {
	if o == nil  {
		return nil, false
	}
	return &o.UI_LIVE_UPDATES_ENABLED, true
}

// SetUI_LIVE_UPDATES_ENABLED sets field value
func (o *InlineObject60) SetUI_LIVE_UPDATES_ENABLED(v bool) {
	o.UI_LIVE_UPDATES_ENABLED = v
}

func (o InlineObject60) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["ACTIVITY_STREAM_ENABLED"] = o.ACTIVITY_STREAM_ENABLED
	}
	if true {
		toSerialize["ACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC"] = o.ACTIVITY_STREAM_ENABLED_FOR_INVENTORY_SYNC
	}
	if o.AD_HOC_COMMANDS != nil {
		toSerialize["AD_HOC_COMMANDS"] = o.AD_HOC_COMMANDS
	}
	if true {
		toSerialize["ALLOW_JINJA_IN_EXTRA_VARS"] = o.ALLOW_JINJA_IN_EXTRA_VARS
	}
	if o.ALLOWOAUTH2FOREXTERNALUSERS != nil {
		toSerialize["ALLOW_OAUTH2_FOR_EXTERNAL_USERS"] = o.ALLOWOAUTH2FOREXTERNALUSERS
	}
	if o.ANSIBLE_FACT_CACHE_TIMEOUT != nil {
		toSerialize["ANSIBLE_FACT_CACHE_TIMEOUT"] = o.ANSIBLE_FACT_CACHE_TIMEOUT
	}
	if true {
		toSerialize["AUTH_BASIC_ENABLED"] = o.AUTH_BASIC_ENABLED
	}
	if o.AUTHLDAP1BINDDN != nil {
		toSerialize["AUTH_LDAP_1_BIND_DN"] = o.AUTHLDAP1BINDDN
	}
	if o.AUTHLDAP1BINDPASSWORD != nil {
		toSerialize["AUTH_LDAP_1_BIND_PASSWORD"] = o.AUTHLDAP1BINDPASSWORD
	}
	if o.AUTHLDAP1CONNECTIONOPTIONS != nil {
		toSerialize["AUTH_LDAP_1_CONNECTION_OPTIONS"] = o.AUTHLDAP1CONNECTIONOPTIONS
	}
	if o.AUTHLDAP1DENYGROUP != nil {
		toSerialize["AUTH_LDAP_1_DENY_GROUP"] = o.AUTHLDAP1DENYGROUP
	}
	if o.AUTHLDAP1GROUPSEARCH != nil {
		toSerialize["AUTH_LDAP_1_GROUP_SEARCH"] = o.AUTHLDAP1GROUPSEARCH
	}
	if o.AUTHLDAP1GROUPTYPE != nil {
		toSerialize["AUTH_LDAP_1_GROUP_TYPE"] = o.AUTHLDAP1GROUPTYPE
	}
	if o.AUTHLDAP1GROUPTYPEPARAMS != nil {
		toSerialize["AUTH_LDAP_1_GROUP_TYPE_PARAMS"] = o.AUTHLDAP1GROUPTYPEPARAMS
	}
	if o.AUTHLDAP1ORGANIZATIONMAP != nil {
		toSerialize["AUTH_LDAP_1_ORGANIZATION_MAP"] = o.AUTHLDAP1ORGANIZATIONMAP
	}
	if o.AUTHLDAP1REQUIREGROUP != nil {
		toSerialize["AUTH_LDAP_1_REQUIRE_GROUP"] = o.AUTHLDAP1REQUIREGROUP
	}
	if o.AUTHLDAP1SERVERURI != nil {
		toSerialize["AUTH_LDAP_1_SERVER_URI"] = o.AUTHLDAP1SERVERURI
	}
	if o.AUTHLDAP1STARTTLS != nil {
		toSerialize["AUTH_LDAP_1_START_TLS"] = o.AUTHLDAP1STARTTLS
	}
	if o.AUTHLDAP1TEAMMAP != nil {
		toSerialize["AUTH_LDAP_1_TEAM_MAP"] = o.AUTHLDAP1TEAMMAP
	}
	if o.AUTHLDAP1USERATTRMAP != nil {
		toSerialize["AUTH_LDAP_1_USER_ATTR_MAP"] = o.AUTHLDAP1USERATTRMAP
	}
	if o.AUTHLDAP1USERDNTEMPLATE != nil {
		toSerialize["AUTH_LDAP_1_USER_DN_TEMPLATE"] = o.AUTHLDAP1USERDNTEMPLATE
	}
	if o.AUTHLDAP1USERFLAGSBYGROUP != nil {
		toSerialize["AUTH_LDAP_1_USER_FLAGS_BY_GROUP"] = o.AUTHLDAP1USERFLAGSBYGROUP
	}
	if o.AUTHLDAP1USERSEARCH != nil {
		toSerialize["AUTH_LDAP_1_USER_SEARCH"] = o.AUTHLDAP1USERSEARCH
	}
	if o.AUTHLDAP2BINDDN != nil {
		toSerialize["AUTH_LDAP_2_BIND_DN"] = o.AUTHLDAP2BINDDN
	}
	if o.AUTHLDAP2BINDPASSWORD != nil {
		toSerialize["AUTH_LDAP_2_BIND_PASSWORD"] = o.AUTHLDAP2BINDPASSWORD
	}
	if o.AUTHLDAP2CONNECTIONOPTIONS != nil {
		toSerialize["AUTH_LDAP_2_CONNECTION_OPTIONS"] = o.AUTHLDAP2CONNECTIONOPTIONS
	}
	if o.AUTHLDAP2DENYGROUP != nil {
		toSerialize["AUTH_LDAP_2_DENY_GROUP"] = o.AUTHLDAP2DENYGROUP
	}
	if o.AUTHLDAP2GROUPSEARCH != nil {
		toSerialize["AUTH_LDAP_2_GROUP_SEARCH"] = o.AUTHLDAP2GROUPSEARCH
	}
	if o.AUTHLDAP2GROUPTYPE != nil {
		toSerialize["AUTH_LDAP_2_GROUP_TYPE"] = o.AUTHLDAP2GROUPTYPE
	}
	if o.AUTHLDAP2GROUPTYPEPARAMS != nil {
		toSerialize["AUTH_LDAP_2_GROUP_TYPE_PARAMS"] = o.AUTHLDAP2GROUPTYPEPARAMS
	}
	if o.AUTHLDAP2ORGANIZATIONMAP != nil {
		toSerialize["AUTH_LDAP_2_ORGANIZATION_MAP"] = o.AUTHLDAP2ORGANIZATIONMAP
	}
	if o.AUTHLDAP2REQUIREGROUP != nil {
		toSerialize["AUTH_LDAP_2_REQUIRE_GROUP"] = o.AUTHLDAP2REQUIREGROUP
	}
	if o.AUTHLDAP2SERVERURI != nil {
		toSerialize["AUTH_LDAP_2_SERVER_URI"] = o.AUTHLDAP2SERVERURI
	}
	if o.AUTHLDAP2STARTTLS != nil {
		toSerialize["AUTH_LDAP_2_START_TLS"] = o.AUTHLDAP2STARTTLS
	}
	if o.AUTHLDAP2TEAMMAP != nil {
		toSerialize["AUTH_LDAP_2_TEAM_MAP"] = o.AUTHLDAP2TEAMMAP
	}
	if o.AUTHLDAP2USERATTRMAP != nil {
		toSerialize["AUTH_LDAP_2_USER_ATTR_MAP"] = o.AUTHLDAP2USERATTRMAP
	}
	if o.AUTHLDAP2USERDNTEMPLATE != nil {
		toSerialize["AUTH_LDAP_2_USER_DN_TEMPLATE"] = o.AUTHLDAP2USERDNTEMPLATE
	}
	if o.AUTHLDAP2USERFLAGSBYGROUP != nil {
		toSerialize["AUTH_LDAP_2_USER_FLAGS_BY_GROUP"] = o.AUTHLDAP2USERFLAGSBYGROUP
	}
	if o.AUTHLDAP2USERSEARCH != nil {
		toSerialize["AUTH_LDAP_2_USER_SEARCH"] = o.AUTHLDAP2USERSEARCH
	}
	if o.AUTHLDAP3BINDDN != nil {
		toSerialize["AUTH_LDAP_3_BIND_DN"] = o.AUTHLDAP3BINDDN
	}
	if o.AUTHLDAP3BINDPASSWORD != nil {
		toSerialize["AUTH_LDAP_3_BIND_PASSWORD"] = o.AUTHLDAP3BINDPASSWORD
	}
	if o.AUTHLDAP3CONNECTIONOPTIONS != nil {
		toSerialize["AUTH_LDAP_3_CONNECTION_OPTIONS"] = o.AUTHLDAP3CONNECTIONOPTIONS
	}
	if o.AUTHLDAP3DENYGROUP != nil {
		toSerialize["AUTH_LDAP_3_DENY_GROUP"] = o.AUTHLDAP3DENYGROUP
	}
	if o.AUTHLDAP3GROUPSEARCH != nil {
		toSerialize["AUTH_LDAP_3_GROUP_SEARCH"] = o.AUTHLDAP3GROUPSEARCH
	}
	if o.AUTHLDAP3GROUPTYPE != nil {
		toSerialize["AUTH_LDAP_3_GROUP_TYPE"] = o.AUTHLDAP3GROUPTYPE
	}
	if o.AUTHLDAP3GROUPTYPEPARAMS != nil {
		toSerialize["AUTH_LDAP_3_GROUP_TYPE_PARAMS"] = o.AUTHLDAP3GROUPTYPEPARAMS
	}
	if o.AUTHLDAP3ORGANIZATIONMAP != nil {
		toSerialize["AUTH_LDAP_3_ORGANIZATION_MAP"] = o.AUTHLDAP3ORGANIZATIONMAP
	}
	if o.AUTHLDAP3REQUIREGROUP != nil {
		toSerialize["AUTH_LDAP_3_REQUIRE_GROUP"] = o.AUTHLDAP3REQUIREGROUP
	}
	if o.AUTHLDAP3SERVERURI != nil {
		toSerialize["AUTH_LDAP_3_SERVER_URI"] = o.AUTHLDAP3SERVERURI
	}
	if o.AUTHLDAP3STARTTLS != nil {
		toSerialize["AUTH_LDAP_3_START_TLS"] = o.AUTHLDAP3STARTTLS
	}
	if o.AUTHLDAP3TEAMMAP != nil {
		toSerialize["AUTH_LDAP_3_TEAM_MAP"] = o.AUTHLDAP3TEAMMAP
	}
	if o.AUTHLDAP3USERATTRMAP != nil {
		toSerialize["AUTH_LDAP_3_USER_ATTR_MAP"] = o.AUTHLDAP3USERATTRMAP
	}
	if o.AUTHLDAP3USERDNTEMPLATE != nil {
		toSerialize["AUTH_LDAP_3_USER_DN_TEMPLATE"] = o.AUTHLDAP3USERDNTEMPLATE
	}
	if o.AUTHLDAP3USERFLAGSBYGROUP != nil {
		toSerialize["AUTH_LDAP_3_USER_FLAGS_BY_GROUP"] = o.AUTHLDAP3USERFLAGSBYGROUP
	}
	if o.AUTHLDAP3USERSEARCH != nil {
		toSerialize["AUTH_LDAP_3_USER_SEARCH"] = o.AUTHLDAP3USERSEARCH
	}
	if o.AUTHLDAP4BINDDN != nil {
		toSerialize["AUTH_LDAP_4_BIND_DN"] = o.AUTHLDAP4BINDDN
	}
	if o.AUTHLDAP4BINDPASSWORD != nil {
		toSerialize["AUTH_LDAP_4_BIND_PASSWORD"] = o.AUTHLDAP4BINDPASSWORD
	}
	if o.AUTHLDAP4CONNECTIONOPTIONS != nil {
		toSerialize["AUTH_LDAP_4_CONNECTION_OPTIONS"] = o.AUTHLDAP4CONNECTIONOPTIONS
	}
	if o.AUTHLDAP4DENYGROUP != nil {
		toSerialize["AUTH_LDAP_4_DENY_GROUP"] = o.AUTHLDAP4DENYGROUP
	}
	if o.AUTHLDAP4GROUPSEARCH != nil {
		toSerialize["AUTH_LDAP_4_GROUP_SEARCH"] = o.AUTHLDAP4GROUPSEARCH
	}
	if o.AUTHLDAP4GROUPTYPE != nil {
		toSerialize["AUTH_LDAP_4_GROUP_TYPE"] = o.AUTHLDAP4GROUPTYPE
	}
	if o.AUTHLDAP4GROUPTYPEPARAMS != nil {
		toSerialize["AUTH_LDAP_4_GROUP_TYPE_PARAMS"] = o.AUTHLDAP4GROUPTYPEPARAMS
	}
	if o.AUTHLDAP4ORGANIZATIONMAP != nil {
		toSerialize["AUTH_LDAP_4_ORGANIZATION_MAP"] = o.AUTHLDAP4ORGANIZATIONMAP
	}
	if o.AUTHLDAP4REQUIREGROUP != nil {
		toSerialize["AUTH_LDAP_4_REQUIRE_GROUP"] = o.AUTHLDAP4REQUIREGROUP
	}
	if o.AUTHLDAP4SERVERURI != nil {
		toSerialize["AUTH_LDAP_4_SERVER_URI"] = o.AUTHLDAP4SERVERURI
	}
	if o.AUTHLDAP4STARTTLS != nil {
		toSerialize["AUTH_LDAP_4_START_TLS"] = o.AUTHLDAP4STARTTLS
	}
	if o.AUTHLDAP4TEAMMAP != nil {
		toSerialize["AUTH_LDAP_4_TEAM_MAP"] = o.AUTHLDAP4TEAMMAP
	}
	if o.AUTHLDAP4USERATTRMAP != nil {
		toSerialize["AUTH_LDAP_4_USER_ATTR_MAP"] = o.AUTHLDAP4USERATTRMAP
	}
	if o.AUTHLDAP4USERDNTEMPLATE != nil {
		toSerialize["AUTH_LDAP_4_USER_DN_TEMPLATE"] = o.AUTHLDAP4USERDNTEMPLATE
	}
	if o.AUTHLDAP4USERFLAGSBYGROUP != nil {
		toSerialize["AUTH_LDAP_4_USER_FLAGS_BY_GROUP"] = o.AUTHLDAP4USERFLAGSBYGROUP
	}
	if o.AUTHLDAP4USERSEARCH != nil {
		toSerialize["AUTH_LDAP_4_USER_SEARCH"] = o.AUTHLDAP4USERSEARCH
	}
	if o.AUTHLDAP5BINDDN != nil {
		toSerialize["AUTH_LDAP_5_BIND_DN"] = o.AUTHLDAP5BINDDN
	}
	if o.AUTHLDAP5BINDPASSWORD != nil {
		toSerialize["AUTH_LDAP_5_BIND_PASSWORD"] = o.AUTHLDAP5BINDPASSWORD
	}
	if o.AUTHLDAP5CONNECTIONOPTIONS != nil {
		toSerialize["AUTH_LDAP_5_CONNECTION_OPTIONS"] = o.AUTHLDAP5CONNECTIONOPTIONS
	}
	if o.AUTHLDAP5DENYGROUP != nil {
		toSerialize["AUTH_LDAP_5_DENY_GROUP"] = o.AUTHLDAP5DENYGROUP
	}
	if o.AUTHLDAP5GROUPSEARCH != nil {
		toSerialize["AUTH_LDAP_5_GROUP_SEARCH"] = o.AUTHLDAP5GROUPSEARCH
	}
	if o.AUTHLDAP5GROUPTYPE != nil {
		toSerialize["AUTH_LDAP_5_GROUP_TYPE"] = o.AUTHLDAP5GROUPTYPE
	}
	if o.AUTHLDAP5GROUPTYPEPARAMS != nil {
		toSerialize["AUTH_LDAP_5_GROUP_TYPE_PARAMS"] = o.AUTHLDAP5GROUPTYPEPARAMS
	}
	if o.AUTHLDAP5ORGANIZATIONMAP != nil {
		toSerialize["AUTH_LDAP_5_ORGANIZATION_MAP"] = o.AUTHLDAP5ORGANIZATIONMAP
	}
	if o.AUTHLDAP5REQUIREGROUP != nil {
		toSerialize["AUTH_LDAP_5_REQUIRE_GROUP"] = o.AUTHLDAP5REQUIREGROUP
	}
	if o.AUTHLDAP5SERVERURI != nil {
		toSerialize["AUTH_LDAP_5_SERVER_URI"] = o.AUTHLDAP5SERVERURI
	}
	if o.AUTHLDAP5STARTTLS != nil {
		toSerialize["AUTH_LDAP_5_START_TLS"] = o.AUTHLDAP5STARTTLS
	}
	if o.AUTHLDAP5TEAMMAP != nil {
		toSerialize["AUTH_LDAP_5_TEAM_MAP"] = o.AUTHLDAP5TEAMMAP
	}
	if o.AUTHLDAP5USERATTRMAP != nil {
		toSerialize["AUTH_LDAP_5_USER_ATTR_MAP"] = o.AUTHLDAP5USERATTRMAP
	}
	if o.AUTHLDAP5USERDNTEMPLATE != nil {
		toSerialize["AUTH_LDAP_5_USER_DN_TEMPLATE"] = o.AUTHLDAP5USERDNTEMPLATE
	}
	if o.AUTHLDAP5USERFLAGSBYGROUP != nil {
		toSerialize["AUTH_LDAP_5_USER_FLAGS_BY_GROUP"] = o.AUTHLDAP5USERFLAGSBYGROUP
	}
	if o.AUTHLDAP5USERSEARCH != nil {
		toSerialize["AUTH_LDAP_5_USER_SEARCH"] = o.AUTHLDAP5USERSEARCH
	}
	if o.AUTH_LDAP_BIND_DN != nil {
		toSerialize["AUTH_LDAP_BIND_DN"] = o.AUTH_LDAP_BIND_DN
	}
	if o.AUTH_LDAP_BIND_PASSWORD != nil {
		toSerialize["AUTH_LDAP_BIND_PASSWORD"] = o.AUTH_LDAP_BIND_PASSWORD
	}
	if o.AUTH_LDAP_CONNECTION_OPTIONS != nil {
		toSerialize["AUTH_LDAP_CONNECTION_OPTIONS"] = o.AUTH_LDAP_CONNECTION_OPTIONS
	}
	if o.AUTH_LDAP_DENY_GROUP != nil {
		toSerialize["AUTH_LDAP_DENY_GROUP"] = o.AUTH_LDAP_DENY_GROUP
	}
	if o.AUTH_LDAP_GROUP_SEARCH != nil {
		toSerialize["AUTH_LDAP_GROUP_SEARCH"] = o.AUTH_LDAP_GROUP_SEARCH
	}
	if o.AUTH_LDAP_GROUP_TYPE != nil {
		toSerialize["AUTH_LDAP_GROUP_TYPE"] = o.AUTH_LDAP_GROUP_TYPE
	}
	if o.AUTH_LDAP_GROUP_TYPE_PARAMS != nil {
		toSerialize["AUTH_LDAP_GROUP_TYPE_PARAMS"] = o.AUTH_LDAP_GROUP_TYPE_PARAMS
	}
	if o.AUTH_LDAP_ORGANIZATION_MAP != nil {
		toSerialize["AUTH_LDAP_ORGANIZATION_MAP"] = o.AUTH_LDAP_ORGANIZATION_MAP
	}
	if o.AUTH_LDAP_REQUIRE_GROUP != nil {
		toSerialize["AUTH_LDAP_REQUIRE_GROUP"] = o.AUTH_LDAP_REQUIRE_GROUP
	}
	if o.AUTH_LDAP_SERVER_URI != nil {
		toSerialize["AUTH_LDAP_SERVER_URI"] = o.AUTH_LDAP_SERVER_URI
	}
	if o.AUTH_LDAP_START_TLS != nil {
		toSerialize["AUTH_LDAP_START_TLS"] = o.AUTH_LDAP_START_TLS
	}
	if o.AUTH_LDAP_TEAM_MAP != nil {
		toSerialize["AUTH_LDAP_TEAM_MAP"] = o.AUTH_LDAP_TEAM_MAP
	}
	if o.AUTH_LDAP_USER_ATTR_MAP != nil {
		toSerialize["AUTH_LDAP_USER_ATTR_MAP"] = o.AUTH_LDAP_USER_ATTR_MAP
	}
	if o.AUTH_LDAP_USER_DN_TEMPLATE != nil {
		toSerialize["AUTH_LDAP_USER_DN_TEMPLATE"] = o.AUTH_LDAP_USER_DN_TEMPLATE
	}
	if o.AUTH_LDAP_USER_FLAGS_BY_GROUP != nil {
		toSerialize["AUTH_LDAP_USER_FLAGS_BY_GROUP"] = o.AUTH_LDAP_USER_FLAGS_BY_GROUP
	}
	if o.AUTH_LDAP_USER_SEARCH != nil {
		toSerialize["AUTH_LDAP_USER_SEARCH"] = o.AUTH_LDAP_USER_SEARCH
	}
	if o.AUTOMATION_ANALYTICS_GATHER_INTERVAL != nil {
		toSerialize["AUTOMATION_ANALYTICS_GATHER_INTERVAL"] = o.AUTOMATION_ANALYTICS_GATHER_INTERVAL
	}
	if true {
		toSerialize["AUTOMATION_ANALYTICS_LAST_GATHER"] = o.AUTOMATION_ANALYTICS_LAST_GATHER
	}
	if o.AUTOMATION_ANALYTICS_URL != nil {
		toSerialize["AUTOMATION_ANALYTICS_URL"] = o.AUTOMATION_ANALYTICS_URL
	}
	if o.AWX_ANSIBLE_CALLBACK_PLUGINS != nil {
		toSerialize["AWX_ANSIBLE_CALLBACK_PLUGINS"] = o.AWX_ANSIBLE_CALLBACK_PLUGINS
	}
	if o.AWX_COLLECTIONS_ENABLED != nil {
		toSerialize["AWX_COLLECTIONS_ENABLED"] = o.AWX_COLLECTIONS_ENABLED
	}
	if true {
		toSerialize["AWX_ISOLATED_CHECK_INTERVAL"] = o.AWX_ISOLATED_CHECK_INTERVAL
	}
	if o.AWX_ISOLATED_CONNECTION_TIMEOUT != nil {
		toSerialize["AWX_ISOLATED_CONNECTION_TIMEOUT"] = o.AWX_ISOLATED_CONNECTION_TIMEOUT
	}
	if o.AWX_ISOLATED_HOST_KEY_CHECKING != nil {
		toSerialize["AWX_ISOLATED_HOST_KEY_CHECKING"] = o.AWX_ISOLATED_HOST_KEY_CHECKING
	}
	if true {
		toSerialize["AWX_ISOLATED_LAUNCH_TIMEOUT"] = o.AWX_ISOLATED_LAUNCH_TIMEOUT
	}
	if true {
		toSerialize["AWX_PROOT_BASE_PATH"] = o.AWX_PROOT_BASE_PATH
	}
	if true {
		toSerialize["AWX_PROOT_ENABLED"] = o.AWX_PROOT_ENABLED
	}
	if o.AWX_PROOT_HIDE_PATHS != nil {
		toSerialize["AWX_PROOT_HIDE_PATHS"] = o.AWX_PROOT_HIDE_PATHS
	}
	if o.AWX_PROOT_SHOW_PATHS != nil {
		toSerialize["AWX_PROOT_SHOW_PATHS"] = o.AWX_PROOT_SHOW_PATHS
	}
	if o.AWX_RESOURCE_PROFILING_CPU_POLL_INTERVAL != nil {
		toSerialize["AWX_RESOURCE_PROFILING_CPU_POLL_INTERVAL"] = o.AWX_RESOURCE_PROFILING_CPU_POLL_INTERVAL
	}
	if o.AWX_RESOURCE_PROFILING_ENABLED != nil {
		toSerialize["AWX_RESOURCE_PROFILING_ENABLED"] = o.AWX_RESOURCE_PROFILING_ENABLED
	}
	if o.AWX_RESOURCE_PROFILING_MEMORY_POLL_INTERVAL != nil {
		toSerialize["AWX_RESOURCE_PROFILING_MEMORY_POLL_INTERVAL"] = o.AWX_RESOURCE_PROFILING_MEMORY_POLL_INTERVAL
	}
	if o.AWX_RESOURCE_PROFILING_PID_POLL_INTERVAL != nil {
		toSerialize["AWX_RESOURCE_PROFILING_PID_POLL_INTERVAL"] = o.AWX_RESOURCE_PROFILING_PID_POLL_INTERVAL
	}
	if o.AWX_ROLES_ENABLED != nil {
		toSerialize["AWX_ROLES_ENABLED"] = o.AWX_ROLES_ENABLED
	}
	if o.AWX_SHOW_PLAYBOOK_LINKS != nil {
		toSerialize["AWX_SHOW_PLAYBOOK_LINKS"] = o.AWX_SHOW_PLAYBOOK_LINKS
	}
	if o.AWX_TASK_ENV != nil {
		toSerialize["AWX_TASK_ENV"] = o.AWX_TASK_ENV
	}
	if o.CUSTOM_LOGIN_INFO != nil {
		toSerialize["CUSTOM_LOGIN_INFO"] = o.CUSTOM_LOGIN_INFO
	}
	if o.CUSTOM_LOGO != nil {
		toSerialize["CUSTOM_LOGO"] = o.CUSTOM_LOGO
	}
	if o.CUSTOM_VENV_PATHS != nil {
		toSerialize["CUSTOM_VENV_PATHS"] = o.CUSTOM_VENV_PATHS
	}
	if o.DEFAULT_INVENTORY_UPDATE_TIMEOUT != nil {
		toSerialize["DEFAULT_INVENTORY_UPDATE_TIMEOUT"] = o.DEFAULT_INVENTORY_UPDATE_TIMEOUT
	}
	if o.DEFAULT_JOB_TIMEOUT != nil {
		toSerialize["DEFAULT_JOB_TIMEOUT"] = o.DEFAULT_JOB_TIMEOUT
	}
	if o.DEFAULT_PROJECT_UPDATE_TIMEOUT != nil {
		toSerialize["DEFAULT_PROJECT_UPDATE_TIMEOUT"] = o.DEFAULT_PROJECT_UPDATE_TIMEOUT
	}
	if true {
		toSerialize["EVENT_STDOUT_MAX_BYTES_DISPLAY"] = o.EVENT_STDOUT_MAX_BYTES_DISPLAY
	}
	if o.GALAXY_IGNORE_CERTS != nil {
		toSerialize["GALAXY_IGNORE_CERTS"] = o.GALAXY_IGNORE_CERTS
	}
	if o.INSIGHTS_TRACKING_STATE != nil {
		toSerialize["INSIGHTS_TRACKING_STATE"] = o.INSIGHTS_TRACKING_STATE
	}
	if o.LOGIN_REDIRECT_OVERRIDE != nil {
		toSerialize["LOGIN_REDIRECT_OVERRIDE"] = o.LOGIN_REDIRECT_OVERRIDE
	}
	if o.LOG_AGGREGATOR_ENABLED != nil {
		toSerialize["LOG_AGGREGATOR_ENABLED"] = o.LOG_AGGREGATOR_ENABLED
	}
	if o.LOG_AGGREGATOR_HOST != nil {
		toSerialize["LOG_AGGREGATOR_HOST"] = o.LOG_AGGREGATOR_HOST
	}
	if o.LOG_AGGREGATOR_INDIVIDUAL_FACTS != nil {
		toSerialize["LOG_AGGREGATOR_INDIVIDUAL_FACTS"] = o.LOG_AGGREGATOR_INDIVIDUAL_FACTS
	}
	if o.LOG_AGGREGATOR_LEVEL != nil {
		toSerialize["LOG_AGGREGATOR_LEVEL"] = o.LOG_AGGREGATOR_LEVEL
	}
	if o.LOG_AGGREGATOR_LOGGERS != nil {
		toSerialize["LOG_AGGREGATOR_LOGGERS"] = o.LOG_AGGREGATOR_LOGGERS
	}
	if o.LOG_AGGREGATOR_MAX_DISK_USAGE_GB != nil {
		toSerialize["LOG_AGGREGATOR_MAX_DISK_USAGE_GB"] = o.LOG_AGGREGATOR_MAX_DISK_USAGE_GB
	}
	if o.LOG_AGGREGATOR_MAX_DISK_USAGE_PATH != nil {
		toSerialize["LOG_AGGREGATOR_MAX_DISK_USAGE_PATH"] = o.LOG_AGGREGATOR_MAX_DISK_USAGE_PATH
	}
	if o.LOG_AGGREGATOR_PASSWORD != nil {
		toSerialize["LOG_AGGREGATOR_PASSWORD"] = o.LOG_AGGREGATOR_PASSWORD
	}
	if o.LOG_AGGREGATOR_PORT != nil {
		toSerialize["LOG_AGGREGATOR_PORT"] = o.LOG_AGGREGATOR_PORT
	}
	if o.LOG_AGGREGATOR_PROTOCOL != nil {
		toSerialize["LOG_AGGREGATOR_PROTOCOL"] = o.LOG_AGGREGATOR_PROTOCOL
	}
	if o.LOG_AGGREGATOR_RSYSLOGD_DEBUG != nil {
		toSerialize["LOG_AGGREGATOR_RSYSLOGD_DEBUG"] = o.LOG_AGGREGATOR_RSYSLOGD_DEBUG
	}
	if o.LOG_AGGREGATOR_TCP_TIMEOUT != nil {
		toSerialize["LOG_AGGREGATOR_TCP_TIMEOUT"] = o.LOG_AGGREGATOR_TCP_TIMEOUT
	}
	if o.LOG_AGGREGATOR_TOWER_UUID != nil {
		toSerialize["LOG_AGGREGATOR_TOWER_UUID"] = o.LOG_AGGREGATOR_TOWER_UUID
	}
	if o.LOG_AGGREGATOR_TYPE != nil {
		toSerialize["LOG_AGGREGATOR_TYPE"] = o.LOG_AGGREGATOR_TYPE
	}
	if o.LOG_AGGREGATOR_USERNAME != nil {
		toSerialize["LOG_AGGREGATOR_USERNAME"] = o.LOG_AGGREGATOR_USERNAME
	}
	if o.LOG_AGGREGATOR_VERIFY_CERT != nil {
		toSerialize["LOG_AGGREGATOR_VERIFY_CERT"] = o.LOG_AGGREGATOR_VERIFY_CERT
	}
	if true {
		toSerialize["MANAGE_ORGANIZATION_AUTH"] = o.MANAGE_ORGANIZATION_AUTH
	}
	if o.MAX_FORKS != nil {
		toSerialize["MAX_FORKS"] = o.MAX_FORKS
	}
	if true {
		toSerialize["MAX_UI_JOB_EVENTS"] = o.MAX_UI_JOB_EVENTS
	}
	if o.OAUTH2PROVIDER != nil {
		toSerialize["OAUTH2_PROVIDER"] = o.OAUTH2PROVIDER
	}
	if true {
		toSerialize["ORG_ADMINS_CAN_SEE_ALL_USERS"] = o.ORG_ADMINS_CAN_SEE_ALL_USERS
	}
	if true {
		toSerialize["PROJECT_UPDATE_VVV"] = o.PROJECT_UPDATE_VVV
	}
	if true {
		toSerialize["PROXY_IP_ALLOWED_LIST"] = o.PROXY_IP_ALLOWED_LIST
	}
	if o.RADIUS_PORT != nil {
		toSerialize["RADIUS_PORT"] = o.RADIUS_PORT
	}
	if o.RADIUS_SECRET != nil {
		toSerialize["RADIUS_SECRET"] = o.RADIUS_SECRET
	}
	if o.RADIUS_SERVER != nil {
		toSerialize["RADIUS_SERVER"] = o.RADIUS_SERVER
	}
	if o.REDHAT_PASSWORD != nil {
		toSerialize["REDHAT_PASSWORD"] = o.REDHAT_PASSWORD
	}
	if o.REDHAT_USERNAME != nil {
		toSerialize["REDHAT_USERNAME"] = o.REDHAT_USERNAME
	}
	if true {
		toSerialize["REMOTE_HOST_HEADERS"] = o.REMOTE_HOST_HEADERS
	}
	if o.SAML_AUTO_CREATE_OBJECTS != nil {
		toSerialize["SAML_AUTO_CREATE_OBJECTS"] = o.SAML_AUTO_CREATE_OBJECTS
	}
	if true {
		toSerialize["SCHEDULE_MAX_JOBS"] = o.SCHEDULE_MAX_JOBS
	}
	if true {
		toSerialize["SESSIONS_PER_USER"] = o.SESSIONS_PER_USER
	}
	if true {
		toSerialize["SESSION_COOKIE_AGE"] = o.SESSION_COOKIE_AGE
	}
	if o.SOCIALAUTHAZUREADOAUTH2KEY != nil {
		toSerialize["SOCIAL_AUTH_AZUREAD_OAUTH2_KEY"] = o.SOCIALAUTHAZUREADOAUTH2KEY
	}
	if o.SOCIALAUTHAZUREADOAUTH2ORGANIZATIONMAP != nil {
		toSerialize["SOCIAL_AUTH_AZUREAD_OAUTH2_ORGANIZATION_MAP"] = o.SOCIALAUTHAZUREADOAUTH2ORGANIZATIONMAP
	}
	if o.SOCIALAUTHAZUREADOAUTH2SECRET != nil {
		toSerialize["SOCIAL_AUTH_AZUREAD_OAUTH2_SECRET"] = o.SOCIALAUTHAZUREADOAUTH2SECRET
	}
	if o.SOCIALAUTHAZUREADOAUTH2TEAMMAP != nil {
		toSerialize["SOCIAL_AUTH_AZUREAD_OAUTH2_TEAM_MAP"] = o.SOCIALAUTHAZUREADOAUTH2TEAMMAP
	}
	if o.SOCIAL_AUTH_GITHUB_KEY != nil {
		toSerialize["SOCIAL_AUTH_GITHUB_KEY"] = o.SOCIAL_AUTH_GITHUB_KEY
	}
	if o.SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP != nil {
		toSerialize["SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP"] = o.SOCIAL_AUTH_GITHUB_ORGANIZATION_MAP
	}
	if o.SOCIAL_AUTH_GITHUB_ORG_KEY != nil {
		toSerialize["SOCIAL_AUTH_GITHUB_ORG_KEY"] = o.SOCIAL_AUTH_GITHUB_ORG_KEY
	}
	if o.SOCIAL_AUTH_GITHUB_ORG_NAME != nil {
		toSerialize["SOCIAL_AUTH_GITHUB_ORG_NAME"] = o.SOCIAL_AUTH_GITHUB_ORG_NAME
	}
	if o.SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP != nil {
		toSerialize["SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP"] = o.SOCIAL_AUTH_GITHUB_ORG_ORGANIZATION_MAP
	}
	if o.SOCIAL_AUTH_GITHUB_ORG_SECRET != nil {
		toSerialize["SOCIAL_AUTH_GITHUB_ORG_SECRET"] = o.SOCIAL_AUTH_GITHUB_ORG_SECRET
	}
	if o.SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP != nil {
		toSerialize["SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP"] = o.SOCIAL_AUTH_GITHUB_ORG_TEAM_MAP
	}
	if o.SOCIAL_AUTH_GITHUB_SECRET != nil {
		toSerialize["SOCIAL_AUTH_GITHUB_SECRET"] = o.SOCIAL_AUTH_GITHUB_SECRET
	}
	if o.SOCIAL_AUTH_GITHUB_TEAM_ID != nil {
		toSerialize["SOCIAL_AUTH_GITHUB_TEAM_ID"] = o.SOCIAL_AUTH_GITHUB_TEAM_ID
	}
	if o.SOCIAL_AUTH_GITHUB_TEAM_KEY != nil {
		toSerialize["SOCIAL_AUTH_GITHUB_TEAM_KEY"] = o.SOCIAL_AUTH_GITHUB_TEAM_KEY
	}
	if o.SOCIAL_AUTH_GITHUB_TEAM_MAP != nil {
		toSerialize["SOCIAL_AUTH_GITHUB_TEAM_MAP"] = o.SOCIAL_AUTH_GITHUB_TEAM_MAP
	}
	if o.SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP != nil {
		toSerialize["SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP"] = o.SOCIAL_AUTH_GITHUB_TEAM_ORGANIZATION_MAP
	}
	if o.SOCIAL_AUTH_GITHUB_TEAM_SECRET != nil {
		toSerialize["SOCIAL_AUTH_GITHUB_TEAM_SECRET"] = o.SOCIAL_AUTH_GITHUB_TEAM_SECRET
	}
	if o.SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP != nil {
		toSerialize["SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP"] = o.SOCIAL_AUTH_GITHUB_TEAM_TEAM_MAP
	}
	if o.SOCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTS != nil {
		toSerialize["SOCIAL_AUTH_GOOGLE_OAUTH2_AUTH_EXTRA_ARGUMENTS"] = o.SOCIALAUTHGOOGLEOAUTH2AUTHEXTRAARGUMENTS
	}
	if o.SOCIALAUTHGOOGLEOAUTH2KEY != nil {
		toSerialize["SOCIAL_AUTH_GOOGLE_OAUTH2_KEY"] = o.SOCIALAUTHGOOGLEOAUTH2KEY
	}
	if o.SOCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAP != nil {
		toSerialize["SOCIAL_AUTH_GOOGLE_OAUTH2_ORGANIZATION_MAP"] = o.SOCIALAUTHGOOGLEOAUTH2ORGANIZATIONMAP
	}
	if o.SOCIALAUTHGOOGLEOAUTH2SECRET != nil {
		toSerialize["SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET"] = o.SOCIALAUTHGOOGLEOAUTH2SECRET
	}
	if o.SOCIALAUTHGOOGLEOAUTH2TEAMMAP != nil {
		toSerialize["SOCIAL_AUTH_GOOGLE_OAUTH2_TEAM_MAP"] = o.SOCIALAUTHGOOGLEOAUTH2TEAMMAP
	}
	if o.SOCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINS != nil {
		toSerialize["SOCIAL_AUTH_GOOGLE_OAUTH2_WHITELISTED_DOMAINS"] = o.SOCIALAUTHGOOGLEOAUTH2WHITELISTEDDOMAINS
	}
	if o.SOCIAL_AUTH_ORGANIZATION_MAP != nil {
		toSerialize["SOCIAL_AUTH_ORGANIZATION_MAP"] = o.SOCIAL_AUTH_ORGANIZATION_MAP
	}
	if o.SOCIAL_AUTH_SAML_ENABLED_IDPS != nil {
		toSerialize["SOCIAL_AUTH_SAML_ENABLED_IDPS"] = o.SOCIAL_AUTH_SAML_ENABLED_IDPS
	}
	if o.SOCIAL_AUTH_SAML_EXTRA_DATA != nil {
		toSerialize["SOCIAL_AUTH_SAML_EXTRA_DATA"] = o.SOCIAL_AUTH_SAML_EXTRA_DATA
	}
	if o.SOCIAL_AUTH_SAML_ORGANIZATION_ATTR != nil {
		toSerialize["SOCIAL_AUTH_SAML_ORGANIZATION_ATTR"] = o.SOCIAL_AUTH_SAML_ORGANIZATION_ATTR
	}
	if o.SOCIAL_AUTH_SAML_ORGANIZATION_MAP != nil {
		toSerialize["SOCIAL_AUTH_SAML_ORGANIZATION_MAP"] = o.SOCIAL_AUTH_SAML_ORGANIZATION_MAP
	}
	if true {
		toSerialize["SOCIAL_AUTH_SAML_ORG_INFO"] = o.SOCIAL_AUTH_SAML_ORG_INFO
	}
	if o.SOCIAL_AUTH_SAML_SECURITY_CONFIG != nil {
		toSerialize["SOCIAL_AUTH_SAML_SECURITY_CONFIG"] = o.SOCIAL_AUTH_SAML_SECURITY_CONFIG
	}
	if o.SOCIAL_AUTH_SAML_SP_ENTITY_ID != nil {
		toSerialize["SOCIAL_AUTH_SAML_SP_ENTITY_ID"] = o.SOCIAL_AUTH_SAML_SP_ENTITY_ID
	}
	if o.SOCIAL_AUTH_SAML_SP_EXTRA != nil {
		toSerialize["SOCIAL_AUTH_SAML_SP_EXTRA"] = o.SOCIAL_AUTH_SAML_SP_EXTRA
	}
	if true {
		toSerialize["SOCIAL_AUTH_SAML_SP_PRIVATE_KEY"] = o.SOCIAL_AUTH_SAML_SP_PRIVATE_KEY
	}
	if true {
		toSerialize["SOCIAL_AUTH_SAML_SP_PUBLIC_CERT"] = o.SOCIAL_AUTH_SAML_SP_PUBLIC_CERT
	}
	if true {
		toSerialize["SOCIAL_AUTH_SAML_SUPPORT_CONTACT"] = o.SOCIAL_AUTH_SAML_SUPPORT_CONTACT
	}
	if o.SOCIAL_AUTH_SAML_TEAM_ATTR != nil {
		toSerialize["SOCIAL_AUTH_SAML_TEAM_ATTR"] = o.SOCIAL_AUTH_SAML_TEAM_ATTR
	}
	if o.SOCIAL_AUTH_SAML_TEAM_MAP != nil {
		toSerialize["SOCIAL_AUTH_SAML_TEAM_MAP"] = o.SOCIAL_AUTH_SAML_TEAM_MAP
	}
	if true {
		toSerialize["SOCIAL_AUTH_SAML_TECHNICAL_CONTACT"] = o.SOCIAL_AUTH_SAML_TECHNICAL_CONTACT
	}
	if o.SOCIAL_AUTH_TEAM_MAP != nil {
		toSerialize["SOCIAL_AUTH_TEAM_MAP"] = o.SOCIAL_AUTH_TEAM_MAP
	}
	if o.SOCIAL_AUTH_USER_FIELDS != nil {
		toSerialize["SOCIAL_AUTH_USER_FIELDS"] = o.SOCIAL_AUTH_USER_FIELDS
	}
	if true {
		toSerialize["STDOUT_MAX_BYTES_DISPLAY"] = o.STDOUT_MAX_BYTES_DISPLAY
	}
	if o.TACACSPLUS_AUTH_PROTOCOL != nil {
		toSerialize["TACACSPLUS_AUTH_PROTOCOL"] = o.TACACSPLUS_AUTH_PROTOCOL
	}
	if o.TACACSPLUS_HOST != nil {
		toSerialize["TACACSPLUS_HOST"] = o.TACACSPLUS_HOST
	}
	if o.TACACSPLUS_PORT != nil {
		toSerialize["TACACSPLUS_PORT"] = o.TACACSPLUS_PORT
	}
	if o.TACACSPLUS_SECRET != nil {
		toSerialize["TACACSPLUS_SECRET"] = o.TACACSPLUS_SECRET
	}
	if o.TACACSPLUS_SESSION_TIMEOUT != nil {
		toSerialize["TACACSPLUS_SESSION_TIMEOUT"] = o.TACACSPLUS_SESSION_TIMEOUT
	}
	if true {
		toSerialize["TOWER_URL_BASE"] = o.TOWER_URL_BASE
	}
	if true {
		toSerialize["UI_LIVE_UPDATES_ENABLED"] = o.UI_LIVE_UPDATES_ENABLED
	}
	return json.Marshal(toSerialize)
}

type NullableInlineObject60 struct {
	value *InlineObject60
	isSet bool
}

func (v NullableInlineObject60) Get() *InlineObject60 {
	return v.value
}

func (v *NullableInlineObject60) Set(val *InlineObject60) {
	v.value = val
	v.isSet = true
}

func (v NullableInlineObject60) IsSet() bool {
	return v.isSet
}

func (v *NullableInlineObject60) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInlineObject60(val *InlineObject60) *NullableInlineObject60 {
	return &NullableInlineObject60{value: val, isSet: true}
}

func (v NullableInlineObject60) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInlineObject60) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


